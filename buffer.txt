<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart AgriTech Dashboard</title>
    <!-- Favicon: A simple SVG icon for the browser tab -->
    <link rel="icon" href="android-chrome-192x192.png" type="image/png">
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Plotly.js CDN for charts -->
    <script src="https://cdn.plot.ly/plotly-2.32.0.min.js"></script>
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Google Fonts: Exo 2 for headings, Inter for body, Michroma for main title -->
    <link href="https://fonts.googleapis.com/css2?family=Exo+2:wght@700;800&family=Inter:wght@400;500;600&family=Michroma&display=swap" rel="stylesheet">

    <style>
        /* Base styles for body and font */
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url('pexels-madebymath-21393.jpg') no-repeat center center fixed; /* Placeholder image */
            background-size: cover;
            color: #e2e8f0; /* Light text */
            min-height: 100vh; /* Ensure full viewport height */
            display: flex;
            flex-direction: column;
            overflow-x: hidden; /* Prevent horizontal scroll */
            top: 0px !important; /* Fix for Google Translate banner pushing content down */
        }

        /* Apply Michroma font to the main title */
        .font-michroma {
            font-family: 'Michroma', sans-serif;
        }

        /* Custom Scrollbar for Webkit browsers */
        ::-webkit-scrollbar {
            width: 8px; /* Width of the vertical scrollbar */
            height: 8px; /* Height of the horizontal scrollbar */
        }

        ::-webkit-scrollbar-track {
            background: rgba(45, 55, 72, 0.7); /* Darker track background */
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb {
            background: #68D391; /* Green thumb */
            border-radius: 10px;
            border: 2px solid rgba(45, 55, 72, 0.7); /* Border to make it appear thinner */
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #48bb78; /* Darker green on hover */
        }

        /* Main container for content */
        .container {
            max-width: 1500px; /* Increased max-width for more content */
            margin: 0 auto;
            padding: 0.75rem; /* Further reduced padding */
            flex-grow: 1; /* Allow container to grow */
            animation: fadeIn 1s ease-out forwards; /* Fade-in animation for the whole container */
            opacity: 0; /* Start invisible for animation */
            display: flex;
            flex-direction: column;
        }
        @media (min-width: 640px) { /* sm breakpoint */
            .container {
                padding: 1rem; /* Slightly more padding on larger screens */
            }
        }

        /* Card styling */
        .card {
            background-color: rgba(45, 55, 72, 0.5); /* Semi-transparent card background */
            border-radius: 1.5rem; /* rounded-3xl for more pronounced corners */
            padding: 1.25rem; /* Reduced padding */
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3), 0 5px 10px rgba(0, 0, 0, 0.2);
            border: 1px solid #4a5568; /* Subtle border */
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out; /* Smooth hover effect */
            position: relative;
            overflow: hidden; /* Ensure content stays within rounded corners */
            display: flex; /* Make cards flex containers */
            flex-direction: column; /* Stack content vertically */
            min-height: 0; /* Allow cards to shrink as needed */
        }

        .card:hover {
            transform: translateY(-8px) scale(1.01);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4), 0 8px 15px rgba(0, 0, 0, 0.3);
        }

        /* Button styling enhancements */
        .button-primary {
            background: linear-gradient(45deg, #48bb78, #38a169); /* Green gradient */
            border: none;
            color: white;
            font-weight: bold;
            padding: 0.6rem 1.2rem; /* Reduced padding */
            border-radius: 0.75rem; /* rounded-xl */
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease-in-out;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem; /* text-sm */
        }

        .button-primary:hover {
            background: linear-gradient(45deg, #38a169, #2f855a); /* Darker green on hover */
            transform: translateY(-3px) scale(1.02);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        .button-primary:active {
            transform: translateY(0);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        /* Secondary button for play alerts */
        .button-secondary {
            background: linear-gradient(45deg, #63b3ed, #4299e1); /* Blue gradient */
            border: none;
            color: white;
            font-weight: bold;
            padding: 0.6rem 1.2rem; /* Reduced padding */
            border-radius: 0.75rem; /* rounded-xl */
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease-in-out;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem; /* text-sm */
        }

        .button-secondary:hover {
            background: linear-gradient(45deg, #4299e1, #3182ce); /* Darker blue on hover */
            transform: translateY(-3px) scale(1.02);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        .button-secondary:active {
            transform: translateY(0);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        /* Fade-in animation */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Custom scrollbar for raw data table */
        .dataframe-container {
            max-height: 200px; /* Further adjusted max-height */
            overflow-y: auto;
            border-radius: 0.75rem; /* rounded-xl */
            background-color: rgba(0,0,0,0); /* Transparent background */
            border: 1px solid #4a5568;
            flex-grow: 1; /* Allow table to grow */
        }

        /* Table styling within dataframe-container */
        .dataframe-container table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.8rem; /* Further smaller font for density */
        }

        .dataframe-container th, .dataframe-container td {
            padding: 0.5rem 0.7rem; /* Further reduced padding */
            border-bottom: 1px solid #4a5568;
            text-align: left;
        }

        .dataframe-container th {
            background-color: rgba(74, 85, 104, 0.7); /* Semi-transparent header */
            font-weight: bold;
            color: #e2e8f0;
            position: sticky;
            top: 0;
            z-index: 1;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .dataframe-container tr:nth-child(even) {
            background-color: rgba(45, 55, 72, 0.3);
        }
        .dataframe-container tr:nth-child(odd) {
            background-color: rgba(36, 44, 56, 0.3);
        }
        .dataframe-container tr:hover {
            background-color: rgba(74, 85, 104, 0.5);
        }

        /* Loading spinner animation */
        .loading-spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
            display: inline-block;
            vertical-align: middle;
            margin-right: 8px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        
        /* Hide the top banner */
        .goog-te-banner-frame.skiptranslate {
            display: none !important;
        }
        body {
            top: 0px !important;
        }

        /* Remove Google branding */
        .goog-logo-link, 
        .goog-te-gadget .goog-te-combo + span, 
        .goog-te-gadget .goog-te-gadget-icon {
            display: none !important;
        }

        /* Custom select box styling for Google Translate */
        #google_translate_element {
            /* Adjust this to fit your design */
            margin-left: 10px;
            display: none; /* Keep this hidden as we use a custom select */
        }
        /* Adjust body top padding which Google Translate adds */
        body {
            top: 0px !important;
        }

        /* Custom Language Select Styling */
        #customLanguageSelect {
            width: auto; /* Adjusted to fit content */
            max-height: 200px;
            overflow-y: auto;
            background: rgba(45, 55, 72, 0.8);
            color: #e2e8f0;
            border: 1px solid #4a5568;
            padding: 0.4rem 0.6rem;
            border-radius: 0.75rem;
            font-size: 0.9rem;
            appearance: none; /* Remove default arrow */
            -webkit-appearance: none;
            -moz-appearance: none;
            background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23e2e8f0%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13.2-6.4H18.2c-4.8%200-9.3%201.8-13.2%206.4-4.2%204.4-6.4%2010.2-6.4%2016.3%200%206.1%202.2%2011.9%206.4%2016.3l127.4%20127.3c4.2%204.4%2010.2%206.4%2016.3%206.4s11.9-2.2%2016.3-6.4L287%20102c4.2-4.4%206.4-10.2%206.4-16.3S291.2%2073.8%20287%2069.4z%22%2F%3E%3C%2Fsvg%3E');
            background-repeat: no-repeat;
            background-position: right 0.8rem center;
            background-size: 0.8em;
            padding-right: 2.5rem; /* Make space for the custom arrow */
        }
        #customLanguageSelect:focus {
            outline: none;
            border-color: #68D391;
            box-shadow: 0 0 0 2px rgba(104, 211, 145, 0.5);
        }
        #customLanguageSelect option {
            background-color: #2d3748;
            color: #e2e8f0;
        }
        #customLanguageSelect option:hover {
            background-color: #4a5568;
        }

        /* Dropdown styling */
        .goog-te-combo {
            width: auto !important;
            background: transparent !important;
            color: #e2e8f0 !important;
            border: 1px solid #38a169 !important; /* green border */
            padding: 0.4rem 0.6rem !important;
            border-radius: 0.75rem !important;
            font-size: 0.9rem !important;
            font-family: 'Inter', sans-serif !important;
            appearance: none !important;
            -webkit-appearance: none !important;
            -moz-appearance: none !important;
            background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg xmlns='http://www.w3.org/2000/svg' width='292.4' height='292.4'%3E%3Cpath fill='%23e2e8f0' d='M287 69.4a17.6 17.6 0 0 0-13.2-6.4H18.2c-4.8 0-9.3 1.8-13.2 6.4-4.2 4.4-6.4 10.2-6.4 16.3 0 6.1 2.2 11.9 6.4 16.3l127.4 127.3c4.2 4.4 10.2 6.4 16.3 6.4s11.9-2.2 16.3-6.4L287 102c4.2-4.4 6.4-10.2 6.4-16.3S291.2 73.8 287 69.4z'/%3E%3C/svg%3E") !important;
            background-repeat: no-repeat !important;
            background-position: right 0.8rem center !important;
            background-size: 0.8em !important;
            padding-right: 2.5rem !important;
        }

        /* Transparent dropdown list and green scrollbar */
        iframe.goog-te-menu-frame {
            box-shadow: none !important;
            border-radius: 0.75rem !important;
        }

        .goog-te-menu2 {
            background-color: transparent !important;
            border: none !important;
            font-family: 'Inter', sans-serif !important;
        }

        .goog-te-menu2-item {
            color: #e2e8f0 !important;
            background: rgba(0, 0, 0, 0.5) !important;
            padding: 0.5rem 1rem !important;
        }

        .goog-te-menu2-item div,
        .goog-te-menu2-item span {
            color: #e2e8f0 !important;
            background: transparent !important;
        }

        .goog-te-menu2-item:hover {
            background-color: rgba(56, 161, 105, 0.8) !important;
        }

        /* Green scrollbar inside iframe */
        .goog-te-menu2::-webkit-scrollbar {
            width: 8px;
        }
        .goog-te-menu2::-webkit-scrollbar-track {
            background: transparent;
        }
        .goog-te-menu2::-webkit-scrollbar-thumb {
            background-color: #38a169;
            border-radius: 10px;
        }

        /* Force iframe to have pointer events */
        .goog-te-menu-frame {
            pointer-events: auto !important;
        }

        /* --- END GOOGLE TRANSLATE CUSTOM STYLING --- */


        /* Toggle Switch Styles */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 80px; /* Reduced width */
            height: 30px; /* Reduced height */
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #4a5568;
            -webkit-transition: .4s;
            transition: .4s;
            border-radius: 30px; /* Adjusted radius */
            box-shadow: inset 0 0 5px rgba(0,0,0,0.3);
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 22px; /* Adjusted size */
            width: 22px; /* Adjusted size */
            left: 4px;
            bottom: 4px;
            background-color: #e2e8f0;
            -webkit-transition: .4s;
            transition: .4s;
            border-radius: 50%;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        input:checked + .slider {
            background-color: #48bb78;
            box-shadow: inset 0 0 5px rgba(0,0,0,0.3);
        }

        input:focus + .slider {
            box-shadow: 0 0 1px #48bb78;
        }

        input:checked + .slider:before {
            -webkit-transform: translateX(50px); /* Adjusted for narrower switch */
            -ms-transform: translateX(50px);
            transform: translateX(50px);
        }

        /* Round sliders */
        .slider.round {
            border-radius: 30px;
        }

        .slider.round:before {
            border-radius: 50%;
        }

        /* Labels for toggle switch */
        .toggle-labels {
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            transform: translateY(-50%);
            display: flex;
            justify-content: space-between;
            padding: 0 8px; /* Adjusted padding */
            color: #cbd5e0;
            font-weight: bold;
            font-size: 0.7rem; /* Smaller font */
            pointer-events: none;
        }
        .toggle-labels span {
            pointer-events: none;
        }

        /* Circular Progress Bar Styling (updated to be more like Farm Health Index) */
        .circular-progress-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 0.6rem;
            text-align: center;
            position: relative;
            background-color: rgba(36, 44, 56, 0.5);
            border-radius: 1rem;
            border: 1px solid #3a4458;
            height: 100%;
        }

        .circular-progress {
            position: relative;
            width: 70px; /* Slightly larger size for the circle */
            height: 70px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 0.3rem;
            /* Using SVG for better control over inner circle and text positioning */
        }

        .circular-progress svg {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        .circular-progress circle {
            fill: none;
            stroke-width: 7; /* Thickness of the ring */
            transform: rotate(-90deg);
            transform-origin: 50% 50%;
        }

        .circular-progress .bg-circle {
            stroke: #4a5568; /* Background color of the ring */
        }

        .circular-progress .progress-circle {
            stroke-linecap: round; /* Rounded ends for the progress bar */
            transition: stroke-dasharray 0.5s ease-in-out;
        }

        .progress-value {
            position: absolute; /* Position value absolutely within the container */
            font-size: clamp(0.8rem, 2vw, 1.1rem); /* Adjusted font size for better fit and responsiveness */
            font-weight: bold;
            color: #e2e8f0;
            z-index: 2; /* Ensure text is above circles */
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%); /* Center the text precisely */
            white-space: nowrap; /* Prevent wrapping */
        }

        .sensor-icon {
            position: relative;
            z-index: 2;
            color: #68D391;
            font-size: 1.1rem;
            margin-bottom: 0.1rem;
        }

        .sensor-label {
            font-size: 0.75rem;
            color: #cbd5e0;
            margin-top: 0.1rem;
        }

        .sensor-update-time {
            font-size: 0.65rem;
            color: #94a3b8;
            margin-top: 0.25rem;
        }

        /* Specific colors for different gauges */
        .circular-progress.soil-moisture .progress-circle { stroke: #68D391; }
        .circular-progress.temperature .progress-circle { stroke: #F6AD55; }
        .circular-progress.humidity .progress-circle { stroke: #63B3ED; }
        .circular-progress.ph .progress-circle { stroke: #A78BFA; }
        .circular-progress.light-intensity .progress-circle { stroke: #ECC94B; }
        .circular-progress.rainfall .progress-circle { stroke: #4299E1; }

        /* Weather Card Styling */
        .weather-day {
            border-bottom: 1px solid #4a5568;
            padding-bottom: 0.5rem; /* Further reduced padding */
            margin-bottom: 0.5rem; /* Further reduced margin */
        }
        .weather-day:last-child {
            border-bottom: none;
            padding-bottom: 0;
            margin-bottom: 0;
        }

        /* Farm Health Index Progress Bar */
        .health-factor-progress {
            height: 6px; /* Even thinner */
            background-color: #4a5568;
            border-radius: 9999px;
            overflow: hidden;
        }
        .health-factor-bar {
            height: 100%;
            background-color: #48bb78;
            border-radius: 9999px;
            transition: width 0.5s ease-in-out;
        }

        /* Collapsible section styling */
        .collapsible-header {
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 0; /* Further reduced padding */
            border-bottom: 1px solid #4a5568;
            font-weight: 600;
            color: #e2e8f0;
            transition: color 0.2s ease-in-out;
            font-size: 1rem; /* Further smaller font for collapsible headers */
        }
        .collapsible-header:hover {
            color: #68D391;
        }
        .collapsible-content {
            padding-top: 0.5rem; /* Further reduced padding */
            padding-bottom: 0.5rem; /* Further reduced padding */
            display: none;
            overflow: hidden;
            transition: all 0.3s ease-in-out;
            background-color: rgba(45, 55, 72, 0.5);
            border-radius: 0.75rem;
            border: 1px solid #4a5568;
            margin-top: 0.3rem; /* Further reduced margin */
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        }
        .collapsible-content.active {
            display: block;
        }
        .collapsible-header .fas {
            transition: transform 0.3s ease-in-out;
        }
        .collapsible-header.active .fas {
            transform: rotate(90deg);
        }

        /* Real-Time Plant Monitoring Styling */
        .camera-feed-container { /* Changed from placeholder to container for video */
            background-color: #1a202c;
            border: 2px solid #4a5568;
            border-radius: 1rem;
            width: 100%;
            max-width: 100%;
            aspect-ratio: 16 / 9;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: #cbd5e0;
            font-size: clamp(0.8rem, 1.8vw, 0.9rem);
            position: relative;
            overflow: hidden;
            animation: pulse 2s infinite alternate;
        }

        .camera-feed-container video {
            width: 100%;
            height: 100%;
            object-fit: cover; /* Ensure video covers the area */
            border-radius: 1rem; /* Match container border-radius */
            display: block;
        }

        /* Pulse Animation */
        @keyframes pulse {
            0% { box-shadow: 0 0 0px rgba(72, 187, 120, 0.4); }
            100% { box-shadow: 0 0 15px rgba(72, 187, 120, 0.8); }
        }

        /* Live Indicator */
        .camera-feed-container .live-indicator {
            position: absolute;
            top: 0.6rem;
            left: 0.6rem;
            background-color: #e53e3e;
            color: white;
            padding: 0.15rem 0.3rem;
            border-radius: 0.3rem;
            font-size: clamp(0.5rem, 1.2vw, 0.65rem);
            font-weight: bold;
            display: flex;
            align-items: center;
            animation: blink 1s infinite;
            z-index: 10; /* Ensure it's above video */
        }

        /* Blinking */
        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        /* Connection Status */
        .camera-feed-container .connection-status {
            position: absolute;
            top: 0.6rem;
            right: 0.6rem;
            background-color: #48bb78;
            color: white;
            padding: 0.15rem 0.3rem;
            border-radius: 0.3rem;
            font-size: clamp(0.5rem, 1.2vw, 0.65rem);
            font-weight: bold;
            display: flex;
            align-items: center;
            z-index: 10; /* Ensure it's above video */
        }

        /* Camera Details (now external) */
        .camera-details-external {
            display: flex;
            flex-direction: column;
            gap: 0.3rem;
            background-color: rgba(0, 0, 0, 0.4);
            padding: 0.5rem 0.7rem;
            border-radius: 0.75rem;
            margin-top: 0.7rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            border: 1px solid #4a5568;
        }
        .camera-details-external span {
            background-color: rgba(0, 0, 0, 0.2);
            padding: 0.3rem 0.5rem;
            border-radius: 0.5rem;
            display: block;
            text-align: left;
            font-size: clamp(0.65rem, 1.3vw, 0.8rem);
            color: #cbd5e0;
            white-space: normal;
            overflow: visible;
            text-overflow: clip;
        }

        /* Camera Icon and Overlay Text (for when video is not active) */
        .camera-feed-container .camera-icon,
        .camera-feed-container .camera-overlay-text,
        .camera-feed-container .camera-feed-message {
            position: absolute;
            z-index: 5; /* Below indicators, above video */
            text-align: center;
        }
        .camera-feed-container .camera-icon {
            font-size: clamp(1.6rem, 4vw, 2.2rem);
            color: #63b3ed;
            margin-bottom: 0.3rem;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: none; /* Hidden by default, shown if video fails */
        }
        .camera-feed-container .camera-feed-message {
            font-size: clamp(0.8rem, 1.8vw, 0.9rem);
            color: #cbd5e0;
            top: calc(50% + 1.5rem); /* Below the icon */
            left: 50%;
            transform: translate(-50%, -50%);
            display: none; /* Hidden by default, shown if video fails */
        }
        .camera-feed-container .camera-overlay-text {
            font-size: clamp(0.8rem, 2vw, 1.2rem);
            font-weight: bold;
            color: rgba(255, 255, 255, 0.2);
            pointer-events: none;
            display: none; /* Hidden by default, shown if video fails */
        }


        /* Header Styling */
        .main-header {
            display: flex;
            flex-direction: column; /* Stack vertically by default */
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1.25rem;
            padding: 0.6rem 0;
            border-bottom: 1px solid #4a5568;
        }

        /* Responsive adjustments for header */
        @media (min-width: 768px) { /* md breakpoint */
            .main-header {
                flex-direction: row; /* Horizontal on medium screens and up */
                align-items: center;
            }
        }

        .main-header .logo-section {
            display: flex;
            align-items: center;
            margin-bottom: 1rem; /* Add margin below logo on small screens */
        }
        @media (min-width: 768px) {
            .main-header .logo-section {
                margin-bottom: 0; /* Remove margin on larger screens */
            }
        }

        .main-header .logo-section img {
            height: 45px; /* Further smaller logo */
            margin-right: 0.7rem; /* Further reduced margin */
        }
        .main-header .title-section h1 {
            font-family: 'Michroma', sans-serif; /* Applied Michroma font */
            font-size: 2rem; /* Further smaller main title */
            font-weight: 800;
            color: #68D391;
            line-height: 1;
            letter-spacing: 0.05em;
            text-align: center; /* Center title on small screens */
        }
        .main-header .title-section p {
            font-size: 0.85rem; /* Further smaller */
            color: #a0aec0;
            margin-top: 0.15rem; /* Further reduced margin */
            text-align: center; /* Center subtitle on small screens */
        }
        /* Desktop-specific alignment for the subtitle */
        @media (min-width: 1024px) { /* lg breakpoint, or adjust as needed for desktop */
            .main-header .title-section p {
                text-align: left;
            }
        }


        /* Adjust the container for buttons, toggle, and select in header */
        .header-controls {
            display: flex;
            flex-direction: column; /* Stack vertically by default */
            align-items: center;
            width: 100%; /* Take full width on small screens */
            gap: 0.75rem; /* Space between items */
        }
        @media (min-width: 640px) { /* sm breakpoint */
            .header-controls {
                flex-direction: row; /* Horizontal on small screens and up */
                flex-wrap: wrap; /* Allow wrapping if needed */
                justify-content: flex-end; /* Align to end on small screens */
                width: auto; /* Auto width on small screens and up */
            }
        }
        @media (min-width: 768px) { /* md breakpoint */
            .header-controls {
                flex-wrap: nowrap; /* Prevent wrapping on medium screens and up */
            }
        }


        /* Plotly Chart Specific Styling */
        .js-plotly-plot .plotly .modebar {
            background: rgba(45, 55, 72, 0.7) !important;
            border-radius: 0.5rem;
            padding: 0.25rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }
        .js-plotly-plot .plotly .modebar-btn {
            color: #cbd5e0 !important;
            transition: background-color 0.2s ease;
        }
        .js-plotly-plot .plotly .modebar-btn:hover {
            background-color: rgba(74, 85, 104, 0.5) !important;
            border-radius: 0.3rem;
        }
        .js-plotly-plot .plotly .modebar-btn.active {
            background-color: #48bb78 !important;
            color: white !important;
        }

        /* Footer transparency */
        footer {
            background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black */
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-100 min-h-screen">
    <div class="container">
        <!-- Main Header -->
        <header class="main-header">
            <div class="logo-section">
                <img src="android-chrome-192x192.png" alt="AgriTech Logo" class="rounded-full" onerror="this.onerror=null;this.src='https://placehold.co/192x192/2d3748/68d391?text=SA';">
                <div class="title-section">
                    <h1 class="font-michroma">SMART AGRITECH DASHBOARD</h1>
                    <!-- Added md:text-left for desktop alignment -->
                    <p class="md:text-left">Advanced AI & Sensor Technology for Modern Agriculture</p>
                </div>
            </div>
            <div class="header-controls">
                <button id="refresh-button" class="button-primary w-full sm:w-auto" data-translate-key="refresh_data">
                    <i class="fas fa-sync-alt mr-2"></i> Refresh Data
                </button>
                <!-- Simulation Mode Toggle -->
                <div class="flex items-center space-x-2">
                    <span class="text-sm font-medium text-gray-300" data-translate-key="mode_label">Mode:</span>
                    <label class="toggle-switch">
                        <input type="checkbox" id="simulation-mode-toggle">
                        <span class="slider round"></span>
                        <div class="toggle-labels">
                            <span class="ml-1" data-translate-key="mode_real">Real</span>
                            <span class="mr-1" data-translate-key="mode_sim">Sim</span>
                        </div>
                    </label>
                </div>
                <!-- Custom Language Selector -->
                <select id="customLanguageSelect" class="w-full sm:w-auto">
                    <option value="">🌐 Select Language</option>
                    <option value="en">English</option>
                    <option value="hi">Hindi</option>
                    <option value="bn">Bengali</option>
                    <option value="te">Telugu</option>
                    <option value="mr">Marathi</option>
                    <option value="ta">Tamil</option>
                    <option value="gu">Gujarati</option>
                    <option value="kn">Kannada</option>
                    <option value="ml">Malayalam</option>
                    <option value="pa">Punjabi</option>
                </select>
                <!-- Google Translate Element (Styled) -->
                <div id="google_translate_element"></div>
            </div>
        </header>

        <main class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-5 mb-5 flex-grow">

            <!-- Current Sensor Readings (Top-Left, Tall) -->
            <div class="card xl:row-span-2">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="current_sensor_readings_title">
                    <i class="fas fa-tachometer-alt mr-2"></i> Current Sensor Readings
                </h2>
                <!-- Custom Circular Gauges -->
                <div id="current-sensor-readings-grid" class="grid grid-cols-2 gap-2 mb-4">
                    <!-- Soil Moisture -->
                    <div class="circular-progress-container">
                        <div class="circular-progress soil-moisture" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7" ></circle>
                            </svg>
                            <span class="progress-value">0%</span>
                        </div>
                        <i class="fas fa-tint sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="soil_moisture_label">Soil Moisture</span>
                        <span class="sensor-update-time" id="soil-moisture-update">Updated: N/A</span>
                    </div>
                    <!-- Temperature -->
                    <div class="circular-progress-container">
                        <div class="circular-progress temperature" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7" ></circle>
                            </svg>
                            <span class="progress-value">0°C</span>
                        </div>
                        <i class="fas fa-thermometer-half sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="temperature_label">Temperature</span>
                        <span class="sensor-update-time" id="temperature-update">Updated: N/A</span>
                    </div>
                    <!-- Humidity -->
                    <div class="circular-progress-container">
                        <div class="circular-progress humidity" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7" ></circle>
                            </svg>
                            <span class="progress-value">0%</span>
                        </div>
                        <i class="fas fa-water sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="humidity_label">Humidity</span>
                        <span class="sensor-update-time" id="humidity-update">Updated: N/A</span>
                    </div>
                    <!-- pH Level -->
                    <div class="circular-progress-container">
                        <div class="circular-progress ph" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7" ></circle>
                            </svg>
                            <span class="progress-value">0</span>
                        </div>
                        <i class="fas fa-flask sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="ph_level_label">pH Level</span>
                        <span class="sensor-update-time" id="ph-update">Updated: N/A</span>
                    </div>
                    <!-- Light Intensity -->
                    <div class="circular-progress-container">
                        <div class="circular-progress light-intensity" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7" ></circle>
                            </svg>
                            <span class="progress-value">0 lux</span>
                        </div>
                        <i class="fas fa-sun sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="light_intensity_label">Light Intensity</span>
                        <span class="sensor-update-time" id="light-intensity-update">Updated: N/A</span>
                    </div>
                    <!-- Rainfall -->
                    <div class="circular-progress-container">
                        <div class="circular-progress rainfall" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7" ></circle>
                            </svg>
                            <span class="progress-value">0 mm</span>
                        </div>
                        <i class="fas fa-cloud-showers-heavy sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="rainfall_label">Rainfall</span>
                        <span class="sensor-update-time" id="rainfall-update">Updated: N/A</span>
                    </div>
                </div>

                <!-- New: Device Connectivity -->
                <h3 class="text-base font-medium text-gray-200 mb-2 border-t border-gray-700 pt-3" data-translate-key="device_connectivity_title"><i class="fas fa-network-wired mr-2"></i> Device Connectivity</h3>
                <div id="device-connectivity" class="space-y-1 text-xs">
                    <div class="flex justify-between items-center text-gray-300">
                        <span data-translate-key="main_gateway">Main Gateway</span>
                        <span id="gateway-status" class="font-semibold text-green-400"><i class="fas fa-circle text-xs mr-1"></i> Online</span>
                    </div>
                    <div class="flex justify-between items-center text-gray-300">
                        <span data-translate-key="irrigation_system">Irrigation System</span>
                        <span id="irrigation-status" class="font-semibold text-green-400"><i class="fas fa-circle text-xs mr-1"></i> Active</span>
                    </div>
                    <div class="flex justify-between items-center text-gray-300">
                        <span data-translate-key="camera_units">Camera Units</span>
                        <span id="camera-status" class="font-semibold text-green-400"><i class="fas fa-circle text-xs mr-1"></i> 3/3 Connected</span>
                    </div>
                    <div class="flex justify-between items-center text-gray-300">
                        <span data-translate-key="soil_sensors">Soil Sensors</span>
                        <span id="soil-sensor-status" class="font-semibold text-green-400"><i class="fas fa-circle text-xs mr-1"></i> All Online</span>
                    </div>
                </div>
            </div>

            <!-- Sensor Trends Over Time (Top-Middle, Wide) -->
            <div class="card xl:col-span-2">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="sensor_trends_title">
                    <i class="fas fa-chart-line mr-2"></i> Sensor Trends Over Time
                </h2>
                <!-- Filter for chart -->
                <div class="flex items-center mb-3">
                    <label for="chart-filter" class="text-xs font-medium text-gray-300 mr-2" data-translate-key="chart_filter_label">Show:</label>
                    <select id="chart-filter" class="bg-gray-700 text-white py-1 px-2 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 border border-gray-600 text-xs">
                        <option value="24h" data-translate-key="last_24_hours">Last 24 Hours</option>
                        <option value="7d" data-translate-key="last_7_days">Last 7 Days</option>
                        <option value="30d" data-translate-key="last_30_days">Last 30 Days</option>
                        <option value="all" data-translate-key="all_data">All Data</option>
                    </select>
                </div>
                <div id="sensor-trends-chart" class="w-full h-64 flex-grow"></div>
                <p id="sensor-trends-status" class="text-xs text-gray-400 mt-2 text-center"></p>
            </div>

            <!-- Weather Card (Top-Right, Normal) -->
            <div class="card">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="weather_title">
                    <i class="fas fa-cloud-sun mr-2"></i> Weather
                </h2>
                <div id="weather-data" class="mb-4">
                    <p class="text-gray-400 text-sm mb-2" id="current-location"><i class="fas fa-map-marker-alt mr-1"></i> Location: N/A</p>
                    <div class="flex justify-between items-center mb-2">
                        <div class="flex items-center">
                            <i id="weather-icon" class="fas fa-cloud text-3xl text-blue-300 mr-2"></i>
                            <div>
                                <p class="text-3xl font-bold text-white" id="current-temp">--°C</p>
                                <p class="text-gray-400 text-sm" id="current-humidity"><span data-translate-key="humidity_text">Humidity</span>: --%</p>
                            </div>
                        </div>
                        <p class="text-gray-400 text-sm"><i class="fas fa-wind mr-1"></i> <span id="wind-speed">-- km/h</span></p>
                    </div>

                    <div id="weather-forecast" class="text-xs">
                        <div class="weather-day flex justify-between items-center">
                            <p class="text-gray-300"><i class="fas fa-calendar-day mr-1"></i> <span data-translate-key="today">Today</span></p>
                            <p class="text-gray-200"><span id="today-high">--°</span> <span class="text-gray-400" id="today-low">--°</span></p>
                        </div>
                        <div class="weather-day flex justify-between items-center">
                            <p class="text-gray-300"><i class="fas fa-calendar-alt mr-1"></i> <span data-translate-key="tomorrow">Tomorrow</span></p>
                            <p class="text-gray-200"><span id="tomorrow-high">--°</span> <span class="text-gray-400" id="tomorrow-low">--°</span></p>
                        </div>
                        <div class="weather-day flex justify-between items-center">
                            <p class="text-gray-300"><i class="fas fa-calendar-week mr-1"></i> <span id="day-after-tomorrow">Wed</span></p>
                            <p class="text-gray-200"><span id="day-after-tomorrow-high">--°</span> <span class="text-gray-400" id="day-after-tomorrow-low">--°</span></p>
                        </div>
                    </div>
                </div>

                <!-- New: Weather Advisories -->
                <h3 class="text-base font-medium text-gray-200 mb-2 border-t border-gray-700 pt-3" data-translate-key="weather_advisories_title"><i class="fas fa-exclamation-triangle mr-2"></i> Weather Advisories</h3>
                <div id="weather-advisories" class="space-y-1 text-gray-300 text-xs">
                    <p><i class="fas fa-circle-info text-blue-400 text-sm mr-2"></i> <span data-translate-key="no_active_advisories">No active advisories.</span></p>
                </div>
            </div>

            <!-- Crop Care & AI Insights (Middle-Left, Wide) -->
            <div class="card xl:col-span-2">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="crop_care_ai_insights_title">
                    <i class="fas fa-seedling mr-2"></i> Crop Care & AI Insights
                </h2>

                <div class="mb-4">
                    <label for="crop-select" class="block text-sm font-medium text-gray-300 mb-2" data-translate-key="active_crop_label">
                        <i class="fas fa-leaf mr-2"></i> Active Crop:
                    </label>
                    <select id="crop-select" class="w-full bg-gray-700 text-white py-1.5 px-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 border border-gray-600 text-sm">
                        <!-- Options populated by JS -->
                    </select>
                </div>

                <!-- AI Recommendations (Collapsible) -->
                <div class="mb-2">
                    <div class="collapsible-header" onclick="toggleCollapsible('ai-recommendations-content')">
                        <h3 class="font-medium text-gray-200" data-translate-key="ai_recommendations_title"><i class="fas fa-lightbulb mr-2"></i> AI Recommendations</h3>
                        <i class="fas fa-chevron-right"></i>
                    </div>
                    <div id="ai-recommendations-content" class="collapsible-content bg-gray-800 p-3 rounded-lg border border-gray-700 mt-1 text-xs">
                        <div id="care-tips">
                            <p class="text-gray-400" data-translate-key="loading_recommendations">Loading recommendations...</p>
                        </div>
                        <button id="play-alerts-button" class="button-secondary w-full sm:w-auto mt-2 text-xs" data-translate-key="play_top_alerts">
                            <i class="fas fa-volume-up mr-2"></i> Play Top Alerts
                        </button>
                        <div id="audio-status" class="text-xs text-gray-400 mt-1 text-center"></div>
                    </div>
                </div>

                <!-- Growth Prediction (Collapsible) -->
                <div class="mb-2">
                    <div class="collapsible-header" onclick="toggleCollapsible('growth-prediction-content')">
                        <h3 class="font-medium text-gray-200" data-translate-key="growth_prediction_title"><i class="fas fa-robot mr-2"></i> Growth Prediction</h3>
                        <i class="fas fa-chevron-right"></i>
                    </div>
                    <div id="growth-prediction-content" class="collapsible-content bg-gray-800 p-3 rounded-lg border border-gray-700 mt-1 text-xs">
                        <div id="growth-prediction">
                            <p class="text-gray-400" data-translate-key="loading_predictions">Loading predictions...</p>
                        </div>
                    </div>
                </div>

                <!-- Market Forecast (Collapsible) -->
                <div class="mb-2">
                    <div class="collapsible-header" onclick="toggleCollapsible('market-forecast-content')">
                        <h3 class="font-medium text-gray-200" data-translate-key="market_forecast_title"><i class="fas fa-chart-bar mr-2"></i> Market Forecast</h3>
                        <i class="fas fa-chevron-right"></i>
                    </div>
                    <div id="market-forecast-content" class="collapsible-content bg-gray-800 p-3 rounded-lg border border-gray-700 mt-1 text-xs">
                        <div id="market-price-forecast">
                            <p class="text-gray-400" data-translate-key="loading_forecast">Loading forecast...</p>
                        </div>
                    </div>
                </div>

                <!-- Crop Suggestion (Separate, not collapsible in image) -->
                <h3 class="text-base font-medium text-gray-200 mb-2 mt-4" data-translate-key="crop_suggestion_title"><i class="fas fa-seedling mr-2"></i> Crop Suggestion Based on Predicted Conditions:</h3>
                <div id="crop-suggestion" class="bg-gray-800 p-3 rounded-lg min-h-[70px] border border-gray-700 text-xs">
                    <p class="text-gray-400" data-translate-key="loading_suggestions">Loading suggestions...</p>
                </div>

                <!-- New: Pest & Disease Scan -->
                <h3 class="text-base font-medium text-gray-200 mb-2 mt-4 border-t border-gray-700 pt-3" data-translate-key="pest_disease_scan_title"><i class="fas fa-bug mr-2"></i> Pest & Disease Scan</h3>
                <div id="pest-disease-scan" class="bg-gray-800 p-3 rounded-lg border border-gray-700 text-xs">
                    <p id="pest-scan-status" class="text-gray-400 mb-2" data-translate-key="last_scan_na">Last scan: N/A</p>
                    <button id="run-pest-scan-button" class="button-primary w-full text-xs" data-translate-key="run_new_scan">
                        <i class="fas fa-search mr-2"></i> Run New Scan
                    </button>
                    <div id="pest-scan-results" class="mt-2 text-gray-300">
                        <!-- Results will be displayed here -->
                    </div>
                </div>
            </div>

            <!-- Real-Time Plant Monitoring (Middle-Right, Normal) -->
            <div class="card">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="realtime_plant_monitoring_title">
                    <i class="fas fa-camera mr-2"></i> Real-Time Plant Monitoring
                </h2>
                <div id="camera-feed-container" class="camera-feed-container mb-2">
                    <span class="live-indicator" data-translate-key="live_indicator"><i class="fas fa-circle text-red-500 text-xs mr-1"></i> LIVE</span>
                    <span class="connection-status" data-translate-key="connected_status"><i class="fas fa-wifi mr-1"></i> Connected</span>
                    <video id="live-camera-feed" autoplay playsinline class="hidden"></video>
                    <i class="fas fa-video camera-icon"></i>
                    <p class="camera-feed-message text-gray-400 text-sm" data-translate-key="live_camera_feed">Live Camera Feed</p>
                    <p class="text-gray-500 text-xs" data-translate-key="sector_a_field_view">Sector A - Field View</p>
                    <span class="camera-overlay-text" data-translate-key="last_frame_na">Last Frame: N/A</span>
                </div>
                <!-- OUTSIDE the feed box -->
                <div id="camera-details-external" class="camera-details-external text-xs text-gray-300">
                    <span id="camera-resolution" data-translate-key="growth_stage_na">Growth Stage: N/A</span>
                    <span id="camera-fps" data-translate-key="advisory_na">Advisory: N/A</span>
                    <span id="camera-signal" data-translate-key="timestamp_na">Timestamp: N/A</span>
                    <span id="last-frame-time" data-translate-key="last_frame_time_na">Last Frame: N/A</span>
                </div>

                <div class="flex flex-col sm:flex-row justify-center space-y-2 sm:space-y-0 sm:space-x-2 mt-2">
                    <button id="capture-image-button" class="button-primary flex-1 text-xs" data-translate-key="capture_image">
                        <i class="fas fa-camera-retro mr-2"></i> Capture Image
                    </button>
                    <button id="view-history-button" class="button-secondary flex-1 text-xs" data-translate-key="view_history">
                        <i class="fas fa-images mr-2"></i> View History
                    </button>
                </div>
            </div>

            <!-- Recent Events (Bottom-Right, Normal) -->
            <div class="card">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="recent_events_title">
                    <i class="fas fa-history mr-2"></i> Recent Events
                </h2>
                <div id="recent-events" class="bg-gray-800 p-3 rounded-lg mb-4 min-h-[100px] border border-gray-700 text-xs">
                    <p class="text-gray-400" data-translate-key="loading_recent_events">Loading recent events...</p>
                </div>
                <!-- New: Quick Actions -->
                <h3 class="text-base font-medium text-gray-200 mb-2 border-t border-gray-700 pt-3" data-translate-key="quick_actions_title"><i class="fas fa-bolt mr-2"></i> Quick Actions</h3>
                <div class="grid grid-cols-1 gap-1.5">
                    <button class="button-primary w-full text-xs" data-translate-key="initiate_irrigation"><i class="fas fa-water mr-2"></i> Initiate Irrigation</button>
                    <button class="button-secondary w-full text-xs" data-translate-key="apply_nutrients"><i class="fas fa-seedling mr-2"></i> Apply Nutrients</button>
                    <button class="button-primary w-full text-xs" data-translate-key="send_alert"><i class="fas fa-bell mr-2"></i> Send Alert</button>
                </div>
            </div>

            <!-- Farm Health Index (Bottom-Left, Tall) -->
            <div class="card xl:row-span-2">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="farm_health_index_title">
                    <i class="fas fa-heartbeat mr-2"></i> Farm Health Index
                </h2>
                <div class="flex flex-col items-center mb-4">
                    <div class="relative w-24 h-24 flex items-center justify-center mb-2">
                        <svg class="w-full h-full" viewBox="0 0 100 100">
                            <circle cx="50" cy="50" r="45" fill="none" stroke="#4a5568" stroke-width="7"></circle>
                            <circle id="health-score-circle" cx="50" cy="50" r="45" fill="none" stroke="#48bb78" stroke-width="7"
                                stroke-dasharray="0, 282.7" transform="rotate(-90 50 50)"></circle>
                        </svg>
                        <span class="absolute text-2xl font-bold text-white" id="overall-health-score">85</span>
                    </div>
                    <p class="text-green-400 text-base font-semibold mb-3" id="overall-health-status" data-translate-key="health_status_good">Good</p>
                    <div class="w-full text-xs">
                        <h3 class="text-sm font-medium text-gray-200 mb-2" data-translate-key="health_factors_title">Health Factors:</h3>
                        <div class="space-y-1.5" id="health-factors-list">
                            <div class="flex justify-between items-center text-gray-300">
                                <span data-translate-key="soil_quality">Soil Quality</span>
                                <span class="font-semibold" id="soil-quality-percent">92%</span>
                            </div>
                            <div class="health-factor-progress">
                                <div class="health-factor-bar" id="soil-quality-bar" style="width: 92%;"></div>
                            </div>

                            <div class="flex justify-between items-center text-gray-300">
                                <span data-translate-key="plant_health">Plant Health</span>
                                <span class="font-semibold" id="plant-health-percent">88%</span>
                            </div>
                            <div class="health-factor-progress">
                                <div class="health-factor-bar" id="plant-health-bar" style="width: 88%;"></div>
                            </div>

                            <div class="flex justify-between items-center text-gray-300">
                                <span data-translate-key="water_management">Water Management</span>
                                <span class="font-semibold" id="water-management-percent">78%</span>
                            </div>
                            <div class="health-factor-progress">
                                <div class="health-factor-bar" id="water-management-bar" style="width: 78%;"></div>
                            </div>

                            <div class="flex justify-between items-center text-gray-300">
                                <span data-translate-key="pest_control">Pest Control</span>
                                <span class="font-semibold" id="pest-control-percent">82%</span>
                            </div>
                            <div class="health-factor-progress">
                                <div class="health-factor-bar" id="pest-control-bar" style="width: 82%;"></div>
                            </div>

                            <div class="flex justify-between items-center text-gray-300">
                                <span data-translate-key="environmental">Environmental</span>
                                <span class="font-semibold" id="environmental-percent">90%</span>
                            </div>
                            <div class="health-factor-progress">
                                <div class="health-factor-bar" id="environmental-bar" style="width: 90%;"></div>
                            </div>
                        </div>
                    </div>
                    <p class="text-green-400 text-xs font-semibold mt-2"><i class="fas fa-arrow-up mr-1"></i> <span id="health-change" data-translate-key="health_change_percent">+5%</span> <span data-translate-key="from_last_week">from last week</span></p>
                </div>

                <!-- New: Resource Consumption -->
                <h3 class="text-base font-medium text-gray-200 mb-2 border-t border-gray-700 pt-3" data-translate-key="resource_consumption_title"><i class="fas fa-chart-pie mr-2"></i> Resource Consumption (Daily)</h3>
                <div id="resource-consumption" class="space-y-1.5 text-xs">
                    <div class="flex justify-between items-center text-gray-300">
                        <span data-translate-key="water_used">Water Used:</span>
                        <span class="font-semibold text-blue-300">2500 Liters</span>
                    </div>
                    <div class="flex justify-between items-center text-gray-300">
                        <span data-translate-key="energy_used">Energy Used:</span>
                        <span class="font-semibold text-yellow-300">50 kWh</span>
                    </div>
                    <div class="flex justify-between items-center text-gray-300">
                        <span data-translate-key="nutrients_applied">Nutrients Applied:</span>
                        <span class="font-semibold text-green-300">5 kg</span>
                    </div>
                    <button class="button-secondary w-full mt-2 text-xs" data-translate-key="view_usage_history"><i class="fas fa-history mr-2"></i> View Usage History</button>
                </div>
            </div>

            <!-- Latest Sensor Readings (Raw Data) (Bottom-Middle, Wide) -->
            <div class="card xl:col-span-2 flex flex-col">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="latest_sensor_readings_title">
                    <i class="fas fa-table mr-2"></i> Latest Sensor Readings (Raw Data)
                </h2>
                <div id="raw-data-table" class="dataframe-container mb-4 flex-grow">
                    <p class="text-gray-400 p-4 text-center" data-translate-key="loading_raw_data">Loading raw data...</p>
                </div>
                <!-- New: Data Export -->
                <h3 class="text-base font-medium text-gray-200 mb-2 border-t border-gray-700 pt-3" data-translate-key="data_export_title"><i class="fas fa-download mr-2"></i> Data Export</h3>
                <div class="flex flex-col sm:flex-row gap-1.5">
                    <button id="export-csv-button" class="button-primary flex-1 text-xs" data-translate-key="export_csv"><i class="fas fa-file-csv mr-2"></i> Export CSV</button>
                    <button id="export-excel-button" class="button-secondary flex-1 text-xs" data-translate-key="export_excel"><i class="fas fa-file-excel mr-2"></i> Export Excel</button>
                </div>
            </div>

            <!-- Application Initialization Status (Full Width at bottom) -->
            <div class="card xl:col-span-full">
                <h2 class="text-lg font-semibold text-green-300 mb-2 cursor-pointer flex justify-between items-center" onclick="toggleExpander('init-status-content')">
                    <span data-translate-key="app_init_status_title"><i class="fas fa-info-circle mr-2"></i> Application Initialization Status</span>
                    <span id="expander-icon" class="float-right transform rotate-0 transition-transform duration-200 text-gray-400">
                        <i class="fas fa-chevron-down"></i>
                    </span>
                </h2>
                <div id="init-status-content" class="hidden">
                    <p class="text-gray-400 p-2 bg-gray-800 rounded-lg border border-gray-700 text-xs" data-translate-key="app_init_status_message">
                        Backend components (Firebase, AI models, scalers) are initialized during server startup. Check server logs for detailed status.
                    </p>
                </div>
            </div>
        </main>
    </div>

    <footer class="bg-gray-800 text-gray-400 text-center p-2.5 mt-auto rounded-t-xl text-xs">
        <p data-translate-key="footer_copyright">&copy; 2025 Smart AgriTech. All rights reserved.</p>
        <p class="mt-1" data-translate-key="footer_powered_by">Powered by Advanced AI & Sensor Technology</p>
    </footer>

    <!-- Google Translate Script -->
    <script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>

    <script type="text/javascript">
        // This function is called by the Google Translate script when it loads
        function googleTranslateElementInit() {
            new google.translate.TranslateElement({
                pageLanguage: 'en',
                includedLanguages: 'en,hi,bn,te,mr,ta,gu,kn,ml,pa,ur', // Added Urdu (ur)
                layout: google.translate.TranslateElement.InlineLayout.SIMPLE,
                autoDisplay: false // We handle display and persistence
            }, 'google_translate_element');
            
            // After initialization, start looking for the combo box to attach our logic
            //setupLanguageChangeListener();
        }

        function doGTranslate(lang) {
            // Check if the Google Translate widget is loaded
            if (typeof google === 'undefined' || !google.translate) {
                console.error('Google Translate API not loaded.');
                showMessageBox('Translation service not available. Please try again later.');
                return;
            }
            if (lang === 'en') {
                // Remove the translate cookie to revert to the original language
                document.cookie = 'googtrans=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/';
                window.location.reload();
            } else {
                // Set the translate cookie for the new language
                const googtrans = `/en/${lang}`;
                document.cookie = `googtrans=${googtrans}; path=/`;
                window.location.reload();
            }
        }

        // This function finds the Google Translate dropdown and adds our custom logic to it
        function setupLanguageChangeListener() {
            const maxAttempts = 20;
            let attempts = 0;
            const intervalId = setInterval(() => {
                const googTeCombo = document.querySelector('.goog-te-combo');
                if (googTeCombo) {
                    clearInterval(intervalId);
                    console.log("✅ Google Translate dropdown found. Attaching listener and checking for saved language.");

                    // Listen for changes to the dropdown
                    googTeCombo.addEventListener('change', function() {
                        currentLanguage = this.value || 'en';
                        console.log('Language changed to:', currentLanguage);
                        // Save the user's choice in localStorage for persistence
                        if (this.value) {
                            localStorage.setItem('preferredLang', this.value);
                        } else {
                            // If they select the default "Select Language", remove the preference
                            localStorage.removeItem('preferredLang');
                        }
                    });

                    // On page load, check if a language was previously saved
                    const preferredLang = localStorage.getItem('preferredLang');
                    if (preferredLang && googTeCombo.value !== preferredLang) {
                        googTeCombo.value = preferredLang;
                        // Dispatch a 'change' event to make Google Translate apply the language
                        googTeCombo.dispatchEvent(new Event('change'));
                    }
                    
                    // Set the initial language for our voice alerts
                    currentLanguage = googTeCombo.value || 'en';

                } else {
                    attempts++;
                    if (attempts >= maxAttempts) {
                        clearInterval(intervalId);
                        console.error("❌ Could not find Google Translate dropdown after multiple attempts.");
                    }
                }
            }, 500); // Check every 500ms
        }
    </script>
    
    <script>
        // --- Main Application Logic ---
        const API_BASE_URL = 'http://localhost:5000/';
        // IMPORTANT: Replace 'YOUR_OPENWEATHER_API_KEY' with your actual OpenWeather API key.
        const OPEN_WEATHER_API_KEY = '6e903b9cec47d3e4c90c1b982c2be09b'; // Placeholder, replace with actual key
        // Default location if geolocation fails or is denied
        const DEFAULT_WEATHER_LOCATION = 'New Delhi'; // Changed default to an Indian city

        let currentLanguage = 'en'; // Default language, will be updated by the translate widget
        let originalPlotData = [];
        let userLatitude = null;
        let userLongitude = null;
        let currentRawData = []; // To store raw data for export

        // For camera feed
        let mediaStream = null;

        // Function to get user's current location
        async function getUserLocation() {
            return new Promise((resolve, reject) => {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            resolve({
                                lat: position.coords.latitude,
                                lon: position.coords.longitude
                            });
                        },
                        (error) => {
                            console.error("Error getting user location:", error);
                            reject(new Error("Geolocation failed. Using default location."));
                        },
                        {
                            enableHighAccuracy: true, // Request high accuracy
                            timeout: 10000, // 10 seconds timeout
                            maximumAge: 0 // No cached position
                        }
                    );
                } else {
                    reject(new Error("Geolocation is not supported by this browser. Using default location."));
                }
            });
        }

        // Function to update a circular progress bar using SVG
        function updateCircularProgress(elementId, value, max_value, unit = '', colorHex = '#48bb78') {
            const container = document.querySelector(`.circular-progress.${elementId}`);
            if (!container) {
                console.warn(`Circular progress container for ${elementId} not found.`);
                return;
            }
            const valueSpan = container.querySelector('.progress-value');
            const progressCircle = container.querySelector('.progress-circle');
            const circumference = 2 * Math.PI * 45; // r=45 from SVG

            const percent = (value / max_value) * 100;
            const progressOffset = circumference - (percent / 100) * circumference;

            if (progressCircle) {
                progressCircle.style.strokeDasharray = `${circumference - progressOffset}, ${circumference}`;
                progressCircle.style.stroke = colorHex;
            }
            if (valueSpan) {
                valueSpan.textContent = `${value}${unit}`;
            }
            container.dataset.value = value;
        }

        // Function to render sensor trends chart
        function renderSensorTrendsChart(plotData, timeRange = 'all') {
            const chartDiv = document.getElementById('sensor-trends-chart');
            const statusDiv = document.getElementById('sensor-trends-status');

            if (!chartDiv || !statusDiv) {
                console.error("Chart or status div not found for sensor trends.");
                return;
            }

            if (!plotData || plotData.length === 0) {
                displayMessage(statusDiv, "⚠️ Not enough complete data available for plotting sensor trends. Check if sensors are reporting data for these features.", 'warning');
                Plotly.purge(chartDiv);
                return;
            }
            statusDiv.textContent = "";

            let filteredData = [...plotData];

            if (timeRange !== 'all') {
                const now = new Date();
                filteredData = filteredData.filter(d => {
                    const timestamp = new Date(d.timestamp);
                    if (timeRange === '24h') {
                        return (now - timestamp) < (24 * 60 * 60 * 1000);
                    } else if (timeRange === '7d') {
                        return (now - timestamp) < (7 * 24 * 60 * 60 * 1000);
                    } else if (timeRange === '30d') {
                        return (now - timestamp) < (30 * 24 * 60 * 60 * 1000);
                    }
                    return true;
                });
            }

            if (filteredData.length === 0) {
                displayMessage(statusDiv, `No data available for the selected time range (${timeRange}).`, 'warning');
                Plotly.purge(chartDiv);
                return;
            }


            const traces = [];
            const uniqueMetrics = [...new Set(filteredData.map(d => d['Sensor Metric']))];

            const colors = {
                'Soil Moisture': '#68D391',
                'Temperature': '#F6AD55',
                'Humidity': '#63B3ED',
                'pH': '#A78BFA',
                'Light Intensity': '#ECC94B',
                'N': '#FC8181',
                'P': '#81E6D9',
                'K': '#B794F4',
                'Rainfall': '#4299E1',
                'ds18b20_temperature': '#E53E3E',
                'Growth Factor': '#38A169'
            };

            uniqueMetrics.forEach((metric) => {
                const dataForMetric = filteredData.filter(d => d['Sensor Metric'] === metric);
                traces.push({
                    x: dataForMetric.map(d => d.timestamp),
                    y: dataForMetric.map(d => d.Reading),
                    mode: 'lines',
                    name: metric,
                    line: { color: colors[metric] || '#cbd5e0', width: 2 },
                    hovertemplate: `<b>%{fullData.name}</b><br>Time: %{x}<br>Reading: %{y:.2f}<extra></extra>`
                });
            });

            const layout = {
                title: {
                    text: "Historical Sensor Readings",
                    font: { color: "#e2e8f0", size: 16, family: 'Exo 2' }
                },
                xaxis: {
                    title: "Time",
                    color: "#cbd5e0",
                    gridcolor: 'rgba(74, 85, 104, 0.5)',
                    linecolor: '#4a5568',
                    tickfont: { color: "#cbd5e0", size: 10 },
                    type: 'date',
                    rangeselector: {
                        buttons: [
                            { count: 1, label: '1h', step: 'hour', stepmode: 'backward' },
                            { count: 6, label: '6h', step: 'hour', stepmode: 'backward' },
                            { count: 1, label: '1d', step: 'day', stepmode: 'backward' },
                            { count: 7, label: '7d', step: 'day', stepmode: 'backward' },
                            { count: 1, label: '1m', step: 'month', stepmode: 'backward' },
                            { step: 'all' }
                        ],
                        font: { color: "#e2e8f0", size: 10 },
                        bgcolor: 'rgba(45, 55, 72, 0.7)',
                        bordercolor: '#4a5568',
                        borderwidth: 1
                    },
                    rangeslider: { visible: true, thickness: 0.05, bgcolor: 'rgba(74, 85, 104, 0.3)' }
                },
                yaxis: {
                    title: "Sensor Reading",
                    color: "#cbd5e0",
                    gridcolor: 'rgba(74, 85, 104, 0.5)',
                    linecolor: '#4a5568',
                    tickfont: { color: "#cbd5e0", size: 10 }
                },
                legend: {
                    title: { text: "Metric", font: { color: "#e2e8f0", size: 12 } },
                    font: { color: "#e2e8f0", size: 10 },
                    bgcolor: 'rgba(45, 55, 72, 0.7)',
                    bordercolor: '#4a5568',
                    borderwidth: 1,
                    x: 1, y: 1, xanchor: 'right', yanchor: 'top'
                },
                hovermode: "x unified",
                font: { family: "Inter", size: 11, color: "#e2e8f0" },
                paper_bgcolor: "rgba(0,0,0,0)",
                plot_bgcolor: "rgba(0,0,0,0)",
                margin: { l: 40, r: 20, t: 60, b: 40 }
            };

            Plotly.newPlot(chartDiv, traces, layout, { responsive: true });
        }

        // Function to populate crop selectbox
        function populateCropSelect(cropLabels) {
            const selectElement = document.getElementById('crop-select');
            if (!selectElement) {
                console.error("Crop select element not found.");
                return;
            }
            selectElement.innerHTML = '';

            if (cropLabels && cropLabels.length > 0) {
                cropLabels.forEach(label => {
                    const option = document.createElement('option');
                    option.value = label;
                    option.textContent = label;
                    selectElement.appendChild(option);
                });
            } else {
                const option = document.createElement('option');
                option.value = "";
                option.textContent = "No crops found";
                selectElement.appendChild(option);
                selectElement.disabled = true;
            }
        }

        // Function to render raw data table
        function renderRawDataTable(rawData) {
            const tableContainer = document.getElementById('raw-data-table');
            if (!tableContainer) {
                console.error("Raw data table container not found.");
                return;
            }
            tableContainer.innerHTML = '';

            if (!rawData || rawData.length === 0) {
                tableContainer.innerHTML = `<p class="text-gray-400 p-4 text-center">No sensor data to display.</p>`;
                return;
            }

            const table = document.createElement('table');
            table.classList.add('min-w-full', 'table-auto');

            const thead = document.createElement('thead');
            const headerRow = document.createElement('tr');
            const headers = Object.keys(rawData[0]);
            headers.forEach(headerText => {
                const th = document.createElement('th');
                th.textContent = headerText.replace(/_/g, ' ').replace(/\b\w/g, char => char.toUpperCase());
                th.classList.add('px-2', 'py-1.5', 'text-left', 'text-gray-200', 'bg-gray-700', 'font-semibold');
                headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);
            table.appendChild(thead);

            const tbody = document.createElement('tbody');
            rawData.forEach(rowData => {
                const tr = document.createElement('tr');
                tr.classList.add('hover:bg-gray-700', 'transition-colors', 'duration-150');
                headers.forEach(headerText => {
                    const td = document.createElement('td');
                    let value = rowData[headerText];
                    if (value === null || value === undefined) {
                        value = '';
                    } else if (typeof value === 'number') {
                        value = value.toFixed(2);
                    }
                    td.textContent = value;
                    td.classList.add('px-2', 'py-1.5', 'border-b', 'border-gray-600', 'text-gray-300');
                    tr.appendChild(td);
                });
                tbody.appendChild(tr);
            });
            table.appendChild(tbody);
            tableContainer.appendChild(table);
        }

        // Function to toggle expander content
        function toggleExpander(contentId) {
            const content = document.getElementById(contentId);
            const icon = document.getElementById('expander-icon')?.querySelector('i');
            if (!content || !icon) {
                console.warn(`Expander content or icon not found for ${contentId}.`);
                return;
            }

            if (content.classList.contains('hidden')) {
                content.classList.remove('hidden');
                icon.classList.remove('fa-chevron-down');
                icon.classList.add('fa-chevron-up');
            } else {
                content.classList.add('hidden');
                icon.classList.remove('fa-chevron-up');
                icon.classList.add('fa-chevron-down');
            }
        }

        // Function to toggle collapsible sections
        function toggleCollapsible(contentId) {
            const content = document.getElementById(contentId);
            if (!content) {
                console.warn(`Collapsible content for ${contentId} not found.`);
                return;
            }
            const header = content.previousElementSibling;
            const icon = header?.querySelector('.fas.fa-chevron-right');

            if (!header || !icon) {
                console.warn(`Collapsible header or icon not found for ${contentId}.`);
                return;
            }

            if (content.classList.contains('active')) {
                content.classList.remove('active');
                icon.style.transform = 'rotate(0deg)';
            } else {
                content.classList.add('active');
                icon.style.transform = 'rotate(90deg)';
            }
        }

        // Function to display messages with icons
        async function displayMessage(elementId, messageText, type = 'info') {
            const element = typeof elementId === 'string' ? document.getElementById(elementId) : elementId;
            if (!element) {
                console.warn(`Element with ID or reference ${elementId} not found for displaying message.`);
                return;
            }

            let iconClass = '';
            let colorClass = 'text-gray-400';

            switch (type) {
                case 'success':
                    iconClass = 'fas fa-check-circle';
                    colorClass = 'text-green-400';
                    break;
                case 'warning':
                    iconClass = 'fas fa-exclamation-triangle';
                    colorClass = 'text-yellow-400';
                    break;
                case 'error':
                    iconClass = 'fas fa-times-circle';
                    colorClass = 'text-red-400';
                    break;
                case 'info':
                default:
                    iconClass = 'fas fa-info-circle';
                    colorClass = 'text-blue-400';
                    break;
            }
            element.innerHTML = `<p class="${colorClass}"><i class="${iconClass} mr-2"></i> ${messageText}</p>`;
        }

        // Function to render Markdown-like text to HTML
        function renderMarkdown(text) {
            let html = text.replace(/\*\*(.*?)\*\*/g, '<b>$1</b>');
            html = html.replace(/\{[a-zA-Z_]+(?::[^}]+)?\}/g, ''); // Remove variable placeholders
            return html;
        }

        // Function to get Font Awesome icon based on OpenWeather condition code
        function getWeatherIcon(iconCode) {
            // Mapping OpenWeather icons to Font Awesome icons
            // https://openweathermap.org/weather-conditions
            switch (iconCode) {
                case '01d': return 'fas fa-sun'; // clear sky day
                case '01n': return 'fas fa-moon'; // clear sky night
                case '02d': return 'fas fa-cloud-sun'; // few clouds day
                case '02n': return 'fas fa-cloud-moon'; // few clouds night
                case '03d':
                case '03n': return 'fas fa-cloud'; // scattered clouds
                case '04d':
                case '04n': return 'fas fa-cloud-meatball'; // broken clouds
                case '09d':
                case '09n': return 'fas fa-cloud-showers-heavy'; // shower rain
                case '10d': return 'fas fa-cloud-sun-rain'; // rain day
                case '10n': return 'fas fa-cloud-moon-rain'; // rain night
                case '11d':
                case '11n': return 'fas fa-bolt'; // thunderstorm
                case '13d':
                case '13n': return 'fas fa-snowflake'; // snow
                case '50d':
                case '50n': return 'fas fa-smog'; // mist
                default: return 'fas fa-cloud';
            }
        }

        // Render Weather Data using OpenWeather API
        async function renderWeatherData() {
            const weatherDataDiv = document.getElementById('weather-data');
            const advisoriesDiv = document.getElementById('weather-advisories');
            const currentLocationElement = document.getElementById('current-location');

            if (!weatherDataDiv || !advisoriesDiv || !currentLocationElement) {
                console.error("Weather data, advisories, or location div not found.");
                return;
            }
            advisoriesDiv.innerHTML = `<p><i class="fas fa-circle-info text-blue-400 text-sm mr-2"></i> Fetching weather data...</p>`;
            currentLocationElement.innerHTML = `<i class="fas fa-map-marker-alt mr-1"></i> Location: Fetching...`;

            const currentTempElement = document.getElementById('current-temp');
            const currentHumidityElement = document.getElementById('current-humidity');
            const windSpeedElement = document.getElementById('wind-speed');
            const weatherIconElement = document.getElementById('weather-icon');
            const todayHighElement = document.getElementById('today-high');
            const todayLowElement = document.getElementById('today-low');
            const tomorrowHighElement = document.getElementById('tomorrow-high');
            const tomorrowLowElement = document.getElementById('tomorrow-low');
            const tomorrowTextElement = document.querySelector('[data-translate-key="tomorrow"]');
            const dayAfterTomorrowElement = document.getElementById('day-after-tomorrow');
            const dayAfterTomorrowHighElement = document.getElementById('day-after-tomorrow-high');
            const dayAfterTomorrowLowElement = document.getElementById('day-after-tomorrow-low');
            const humidityTextElement = document.querySelector('[data-translate-key="humidity_text"]');


            let weatherApiUrlCurrent;
            let weatherApiUrlForecast;

            if (userLatitude !== null && userLongitude !== null) {
                weatherApiUrlCurrent = `https://api.openweathermap.org/data/2.5/weather?lat=${userLatitude}&lon=${userLongitude}&appid=${OPEN_WEATHER_API_KEY}&units=metric`;
                weatherApiUrlForecast = `https://api.openweathermap.org/data/2.5/forecast?lat=${userLatitude}&lon=${userLongitude}&appid=${OPEN_WEATHER_API_KEY}&units=metric`;
                console.log("Fetching weather for coordinates:", userLatitude, userLongitude);
            } else {
                weatherApiUrlCurrent = `https://api.openweathermap.org/data/2.5/weather?q=${DEFAULT_WEATHER_LOCATION}&appid=${OPEN_WEATHER_API_KEY}&units=metric`;
                weatherApiUrlForecast = `https://api.openweathermap.org/data/2.5/forecast?q=${DEFAULT_WEATHER_LOCATION}&appid=${OPEN_WEATHER_API_KEY}&units=metric`;
                console.log("Fetching weather for default location:", DEFAULT_WEATHER_LOCATION);
            }

            try {
                // Fetch current weather
                const currentWeatherResponse = await fetch(weatherApiUrlCurrent);
                if (!currentWeatherResponse.ok) {
                    throw new Error(`HTTP error! status: ${currentWeatherResponse.status}`);
                }
                const currentWeatherData = await currentWeatherResponse.json();

                // Update current location
                if (currentWeatherData.name) {
                    currentLocationElement.innerHTML = `<i class="fas fa-map-marker-alt mr-1"></i> Location: ${currentWeatherData.name}`;
                } else {
                    currentLocationElement.innerHTML = `<i class="fas fa-map-marker-alt mr-1"></i> Location: N/A`;
                }

                // Fetch 5-day forecast
                const forecastResponse = await fetch(weatherApiUrlForecast);
                if (!forecastResponse.ok) {
                    throw new Error(`HTTP error! status: ${forecastResponse.status}`);
                }
                const forecastData = await forecastResponse.json();

                // Update current weather
                if (currentTempElement && currentWeatherData.main) {
                    currentTempElement.textContent = `${Math.round(currentWeatherData.main.temp)}°C`;
                }
                if (currentHumidityElement && currentWeatherData.main && humidityTextElement) {
                    currentHumidityElement.innerHTML = `${humidityTextElement.textContent}: ${currentWeatherData.main.humidity}%`;
                }
                if (windSpeedElement && currentWeatherData.wind) {
                    windSpeedElement.textContent = `${(currentWeatherData.wind.speed * 3.6).toFixed(1)} km/h`; // Convert m/s to km/h
                }
                if (weatherIconElement && currentWeatherData.weather && currentWeatherData.weather[0]) {
                    weatherIconElement.className = getWeatherIcon(currentWeatherData.weather[0].icon) + ' text-3xl text-blue-300 mr-2';
                }

                // Process forecast data for the next 3 days
                const dailyForecasts = {};
                const today = new Date();
                today.setHours(0, 0, 0, 0); // Normalize to start of day

                if (forecastData.list) {
                    forecastData.list.forEach(item => {
                        const date = new Date(item.dt * 1000); // Convert timestamp to Date object
                        date.setHours(0, 0, 0, 0); // Normalize to start of day for grouping

                        // Only consider next 3 full days (including today if available in forecast)
                        if (((date.getTime() - today.getTime()) / (24 * 60 * 60 * 1000)) < 3) {
                            const dateString = date.toISOString().split('T')[0];
                            if (!dailyForecasts[dateString]) {
                                dailyForecasts[dateString] = { min: item.main.temp, max: item.main.temp };
                            } else {
                                dailyForecasts[dateString].min = Math.min(dailyForecasts[dateString].min, item.main.temp);
                                dailyForecasts[dateString].max = Math.max(dailyForecasts[dateString].max, item.main.temp);
                            }
                        }
                    });
                }


                const sortedDates = Object.keys(dailyForecasts).sort();

                // Update forecast for Today, Tomorrow, Day After Tomorrow
                const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

                // Today
                if (sortedDates[0] && todayHighElement && todayLowElement) {
                    const todayForecast = dailyForecasts[sortedDates[0]];
                    todayHighElement.textContent = `${Math.round(todayForecast.max)}°`;
                    todayLowElement.textContent = `${Math.round(todayForecast.min)}°`;
                } else if (todayHighElement && todayLowElement) {
                    todayHighElement.textContent = `--°`;
                    todayLowElement.textContent = `--°`;
                }

                // Tomorrow
                if (sortedDates[1] && tomorrowHighElement && tomorrowLowElement && tomorrowTextElement) {
                    const tomorrowForecast = dailyForecasts[sortedDates[1]];
                    tomorrowHighElement.textContent = `${Math.round(tomorrowForecast.max)}°`;
                    tomorrowLowElement.textContent = `${Math.round(tomorrowForecast.min)}°`;
                    tomorrowTextElement.textContent = 'Tomorrow'; // Ensure this uses data-translate-key
                } else if (tomorrowHighElement && tomorrowLowElement) {
                    tomorrowHighElement.textContent = `--°`;
                    tomorrowLowElement.textContent = `--°`;
                }

                // Day After Tomorrow (e.g., Wednesday)
                if (sortedDates[2] && dayAfterTomorrowHighElement && dayAfterTomorrowLowElement && dayAfterTomorrowElement) {
                    const dayAfterTomorrowForecast = dailyForecasts[sortedDates[2]];
                    dayAfterTomorrowHighElement.textContent = `${Math.round(dayAfterTomorrowForecast.max)}°`;
                    dayAfterTomorrowLowElement.textContent = `${Math.round(dayAfterTomorrowForecast.min)}°`;
                    const dayAfterTomorrowDate = new Date(sortedDates[2]);
                    dayAfterTomorrowElement.textContent = dayNames[dayAfterTomorrowDate.getDay()];
                } else if (dayAfterTomorrowHighElement && dayAfterTomorrowLowElement && dayAfterTomorrowElement) {
                    dayAfterTomorrowHighElement.textContent = `--°`;
                    dayAfterTomorrowLowElement.textContent = `--°`;
                    dayAfterTomorrowElement.textContent = `N/A`;
                }


                // Weather Advisories (simplified based on OpenWeather data)
                advisoriesDiv.innerHTML = ''; // Clear previous advisories
                let hasAdvisory = false;

                if (currentWeatherData.weather && currentWeatherData.weather[0]) {
                    const weatherDescription = currentWeatherData.weather[0].description.toLowerCase();
                    const mainWeather = currentWeatherData.weather[0].main.toLowerCase();

                    if (mainWeather.includes('rain') || mainWeather.includes('thunderstorm') || mainWeather.includes('drizzle')) {
                        advisoriesDiv.innerHTML += `<p class="text-yellow-400"><i class="fas fa-cloud-showers-heavy text-xs mr-2"></i> Expect ${weatherDescription} conditions. Be prepared for wet weather.</p>`;
                        hasAdvisory = true;
                    }
                }

                if (currentWeatherData.wind && currentWeatherData.wind.speed && (currentWeatherData.wind.speed * 3.6 > 30)) { // Wind speed over 30 km/h
                    advisoriesDiv.innerHTML += `<p class="text-yellow-400"><i class="fas fa-wind text-xs mr-2"></i> High wind speeds detected (${(currentWeatherData.wind.speed * 3.6).toFixed(1)} km/h). Secure loose objects.</p>`;
                    hasAdvisory = true;
                    }
                if (currentWeatherData.main && currentWeatherData.main.temp) {
                    if (currentWeatherData.main.temp > 35) { // Temperature over 35°C
                        advisoriesDiv.innerHTML += `<p class="text-red-400"><i class="fas fa-temperature-high text-xs mr-2"></i> High temperature advisory. Ensure adequate irrigation.</p>`;
                        hasAdvisory = true;
                    }
                    if (currentWeatherData.main.temp < 0) { // Temperature below 0°C
                        advisoriesDiv.innerHTML += `<p class="text-blue-400"><i class="fas fa-snowflake text-xs mr-2"></i> Freezing temperature advisory. Protect sensitive crops from frost.</p>`;
                        hasAdvisory = true;
                    }
                }


                if (!hasAdvisory) {
                    advisoriesDiv.innerHTML = `<p><i class="fas fa-circle-info text-blue-400 text-xs mr-2"></i> No active advisories.</p>`;
                }

            } catch (error) {
                console.error("Error fetching weather data:", error);
                advisoriesDiv.innerHTML = `<p class="text-red-400"><i class="fas fa-times-circle text-xs mr-2"></i> Failed to load weather data. Check API key and network.</p>`;
                currentLocationElement.innerHTML = `<i class="fas fa-map-marker-alt mr-1"></i> Location: N/A`;
                if (currentTempElement) currentTempElement.textContent = `--°C`;
                if (currentHumidityElement && humidityTextElement) currentHumidityElement.innerHTML = `${humidityTextElement.textContent}: --%`;
                if (windSpeedElement) windSpeedElement.textContent = `-- km/h`;
                if (weatherIconElement) weatherIconElement.className = 'fas fa-cloud-sun text-3xl text-blue-300 mr-2'; // Default icon on error
                if (todayHighElement) todayHighElement.textContent = `--°`;
                if (todayLowElement) todayLowElement.textContent = `--°`;
                if (tomorrowHighElement) tomorrowHighElement.textContent = `--°`;
                if (tomorrowLowElement) tomorrowLowElement.textContent = `--°`;
                if (dayAfterTomorrowHighElement) dayAfterTomorrowHighElement.textContent = `--°`;
                if (dayAfterTomorrowLowElement) dayAfterTomorrowLowElement.textContent = `--°`;
                if (dayAfterTomorrowElement) dayAfterTomorrowElement.textContent = `N/A`;
            }
        }

        // Simulated Recent Events Data
        function getSimulatedRecentEvents() {
            const events = [
                { text: "Water detected in sector B", time: "10:27 AM" },
                { text: "Irrigation cycle completed", time: "09:45 AM" },
                { text: "Optimal light conditions detected", time: "09:10 AM" },
                { text: "Nutrient levels adjusted in field 1", time: "Yesterday" },
                { text: "Pest activity observed in north plot", time: "2 days ago" }
            ];
            return events;
        }

        // Render Recent Events
        async function renderRecentEvents() {
            const events = getSimulatedRecentEvents();
            const eventsDiv = document.getElementById('recent-events');
            if (!eventsDiv) {
                console.error("Recent events div not found.");
                return;
            }
            eventsDiv.innerHTML = '';
            if (events.length === 0) {
                displayMessage(eventsDiv, 'Loading recent events...', 'info');
                return;
            }
            for (const event of events) {
                eventsDiv.innerHTML += `
                    <div class="flex justify-between items-center py-1 border-b border-gray-700 last:border-b-0">
                        <p class="text-gray-300">${event.text}</p>
                        <span class="text-gray-500 text-xs">${event.time}</span>
                    </div>
                `;
            }
        }

        // Simulated Farm Health Index Data
        function getSimulatedFarmHealthData() {
            const overallScore = Math.floor(Math.random() * (95 - 70 + 1)) + 70;
            let status = "Good";
            if (overallScore < 75) status = "Fair";
            if (overallScore < 60) status = "Poor";

            const healthFactors = {
                'soil-quality': Math.floor(Math.random() * (98 - 80 + 1)) + 80,
                'plant-health': Math.floor(Math.random() * (95 - 75 + 1)) + 75,
                'water-management': Math.floor(Math.random() * (90 - 70 + 1)) + 70,
                'pest-control': Math.floor(Math.random() * (90 - 70 + 1)) + 70,
                'environmental': Math.floor(Math.random() * (98 - 85 + 1)) + 85
            };

            const healthChange = (Math.random() * 10 - 5).toFixed(0);
            const changeIcon = healthChange >= 0 ? 'fa-arrow-up' : 'fa-arrow-down';
            const changeColor = healthChange >= 0 ? 'text-green-400' : 'text-red-400';

            return {
                overallScore,
                status,
                healthFactors,
                healthChange,
                changeIcon,
                changeColor
            };
        }

        // Render Farm Health Index
        async function renderFarmHealthIndex() {
            const healthData = getSimulatedFarmHealthData();

            const overallHealthScoreElement = document.getElementById('overall-health-score');
            const overallHealthStatusElement = document.getElementById('overall-health-status');
            const healthScoreCircleElement = document.getElementById('health-score-circle');
            const healthChangeElement = document.getElementById('health-change');

            if (overallHealthScoreElement) overallHealthScoreElement.textContent = healthData.overallScore;
            if (overallHealthStatusElement) overallHealthStatusElement.textContent = healthData.status;

            if (healthScoreCircleElement) {
                const circumference = 2 * Math.PI * 45;
                const progress = (healthData.overallScore / 100) * circumference;
                healthScoreCircleElement.style.strokeDasharray = `${progress}, ${circumference}`;
                healthScoreCircleElement.style.stroke = healthData.overallScore >= 75 ? '#48bb78' : (healthData.overallScore >= 60 ? '#F6AD55' : '#E53E3E');
            }


            for (const factor in healthData.healthFactors) {
                const percent = healthData.healthFactors[factor];
                const percentElement = document.getElementById(`${factor}-percent`);
                const barElement = document.getElementById(`${factor}-bar`);
                if (percentElement) percentElement.textContent = `${percent}%`;
                if (barElement) barElement.style.width = `${percent}%`;
            }

            if (healthChangeElement) {
                healthChangeElement.innerHTML = `<i class="fas ${healthData.changeIcon} mr-1"></i> ${healthData.healthChange >= 0 ? '+' : ''}${healthData.healthChange}% <span data-translate-key="from_last_week">from last week</span>`;
                healthChangeElement.className = `${healthData.changeColor} text-xs font-semibold mt-2`;
            }
        }

        // Simulated Device Connectivity Data
        function getSimulatedDeviceConnectivity() {
            const statuses = ['Online', 'Offline', 'Active', 'Inactive', 'Connected', 'Disconnected'];
            const getRandomStatus = () => statuses[Math.floor(Math.random() * statuses.length)];

            return {
                gateway: Math.random() < 0.9 ? 'Online' : 'Offline',
                irrigation: Math.random() < 0.8 ? 'Active' : 'Inactive',
                camera: `${Math.floor(Math.random() * 4)}/3 Connected`,
                soil: Math.random() < 0.95 ? 'All Online' : 'Some Offline'
            };
        }

        // Render Device Connectivity
        async function renderDeviceConnectivity() {
            const connectivity = getSimulatedDeviceConnectivity();

            const updateStatus = async (id, statusText) => {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = statusText;
                    element.className = 'font-semibold ' + (statusText.includes('Online') || statusText.includes('Active') || statusText.includes('Connected') ? 'text-green-400' : 'text-red-400');
                    element.innerHTML = `<i class="fas fa-circle text-xs mr-1"></i> ${statusText}`;
                }
            };

            updateStatus('gateway-status', connectivity.gateway);
            updateStatus('irrigation-status', connectivity.irrigation);
            updateStatus('camera-status', connectivity.camera);
            updateStatus('soil-sensor-status', connectivity.soil);
        }

        // Simulated Pest Scan Data
        function getSimulatedPestScanResults() {
            const results = [
                { status: 'No threats detected. Your crops are healthy!', type: 'success' },
                { status: 'Minor pest activity detected in Sector C. Recommend localized treatment.', type: 'warning', details: ['Aphids (low concentration)'] },
                { status: 'Disease detected in Field 2. Immediate action required.', type: 'error', details: ['Fungal blight (moderate)'] }
            ];
            return results[Math.floor(Math.random() * results.length)];
        }

        // Simulate a pest scan
        async function runPestScan() {
            const scanButton = document.getElementById('run-pest-scan-button');
            const scanStatus = document.getElementById('pest-scan-status');
            const scanResultsDiv = document.getElementById('pest-scan-results');

            if (!scanButton || !scanStatus || !scanResultsDiv) {
                console.error("Pest scan elements not found.");
                return;
            }

            scanButton.disabled = true;
            scanButton.innerHTML = `<span class="loading-spinner"></span> Scanning in progress...`;
            scanStatus.textContent = `Scanning in progress...`;
            scanResultsDiv.innerHTML = '';

            await new Promise(resolve => setTimeout(resolve, 2000));

            const result = getSimulatedPestScanResults();
            scanStatus.textContent = `Last scan: ${new Date().toLocaleTimeString()}`;

            let resultHtml = `<p class="mb-2"><i class="fas ${result.type === 'success' ? 'fa-check-circle text-green-400' : result.type === 'warning' ? 'fa-exclamation-triangle text-yellow-400' : 'fa-times-circle text-red-400'} mr-2"></i> ${result.status}</p>`;

            if (result.details && result.details.length > 0) {
                resultHtml += `<p class="font-semibold mt-2">Details:</p><ul class="list-disc list-inside ml-3">`;
                for (const detail of result.details) {
                    resultHtml += `<li>${detail}</li>`;
                }
                resultHtml += '</ul>';
            }
            scanResultsDiv.innerHTML = resultHtml;

            scanButton.disabled = false;
            scanButton.innerHTML = `<i class="fas fa-search mr-2"></i> Run New Scan`;
        }

        // Function to start the camera feed
        async function startCameraFeed() {
            const videoElement = document.getElementById('live-camera-feed');
            const cameraIcon = document.querySelector('.camera-feed-container .camera-icon');
            const cameraMessage = document.querySelector('.camera-feed-container .camera-feed-message');
            const cameraOverlayText = document.querySelector('.camera-feed-container .camera-overlay-text');
            const connectionStatusSpan = document.querySelector('.camera-feed-container .connection-status');

            if (!videoElement || !cameraIcon || !cameraMessage || !cameraOverlayText || !connectionStatusSpan) {
                console.error("Camera feed elements not found.");
                return;
            }

            try {
                // Request camera access
                mediaStream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } }); // Prefer rear camera
                videoElement.srcObject = mediaStream;
                videoElement.classList.remove('hidden'); // Show video element
                cameraIcon.style.display = 'none'; // Hide placeholder icon
                cameraMessage.style.display = 'none'; // Hide placeholder message
                cameraOverlayText.style.display = 'none'; // Hide overlay text

                connectionStatusSpan.innerHTML = `<i class="fas fa-wifi mr-1"></i> Connected`;
                connectionStatusSpan.style.backgroundColor = '#48bb78';

                videoElement.onloadedmetadata = () => {
                    videoElement.play();
                };

            } catch (err) {
                console.error("Error accessing camera: ", err);
                videoElement.classList.add('hidden'); // Hide video element
                cameraIcon.style.display = 'block'; // Show placeholder icon
                cameraMessage.style.display = 'block'; // Show placeholder message
                cameraMessage.textContent = 'Camera access denied or not available.';
                cameraOverlayText.style.display = 'block'; // Show overlay text
                cameraOverlayText.textContent = 'Camera Offline';

                connectionStatusSpan.innerHTML = `<i class="fas fa-wifi-slash mr-1"></i> Disconnected`;
                connectionStatusSpan.style.backgroundColor = '#e53e3e';
            }
        }

        // Function to stop the camera feed
        function stopCameraFeed() {
            if (mediaStream) {
                mediaStream.getTracks().forEach(track => track.stop());
                mediaStream = null;
                const videoElement = document.getElementById('live-camera-feed');
                if (videoElement) {
                    videoElement.srcObject = null;
                    videoElement.classList.add('hidden');
                }
                const cameraIcon = document.querySelector('.camera-feed-container .camera-icon');
                const cameraMessage = document.querySelector('.camera-feed-container .camera-feed-message');
                const cameraOverlayText = document.querySelector('.camera-feed-container .camera-overlay-text');
                if (cameraIcon) cameraIcon.style.display = 'block';
                if (cameraMessage) cameraMessage.style.display = 'block';
                if (cameraOverlayText) cameraOverlayText.style.display = 'block';
            }
        }

        // Function to capture an image from the video feed
        function captureImage() {
            const videoElement = document.getElementById('live-camera-feed');
            if (videoElement && mediaStream) {
                const canvas = document.createElement('canvas');
                canvas.width = videoElement.videoWidth;
                canvas.height = videoElement.videoHeight;
                const context = canvas.getContext('2d');
                context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);

                canvas.toBlob((blob) => {
                    const imageUrl = URL.createObjectURL(blob);
                    // For demonstration, open in a new tab. In a real app, you might upload it or display it.
                    window.open(imageUrl, '_blank');
                    // Clean up URL object after use
                    URL.revokeObjectURL(imageUrl);
                }, 'image/png');
            } else {
                displayMessage(document.getElementById('camera-details-external'), 'Camera is not active to capture image.', 'warning');
            }
        }

        // Function to export raw data to CSV
        function exportToCSV() {
            if (currentRawData.length === 0) {
                displayMessage(document.getElementById('raw-data-table').nextElementSibling.nextElementSibling, 'No data to export.', 'warning');
                return;
            }

            const headers = Object.keys(currentRawData[0]);
            const csvRows = [];

            // Add headers
            csvRows.push(headers.map(header => `"${header.replace(/"/g, '""')}"`).join(','));

            // Add data rows
            currentRawData.forEach(row => {
                const values = headers.map(header => {
                    let value = row[header];
                    if (value === null || value === undefined) {
                        value = '';
                    } else if (typeof value === 'string') {
                        value = value.replace(/"/g, '""'); // Escape double quotes
                    }
                    return `"${value}"`;
                });
                csvRows.push(values.join(','));
            });

            const csvString = csvRows.join('\n');
            const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'sensor_data.csv';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            displayMessage(document.getElementById('raw-data-table').nextElementSibling.nextElementSibling, 'CSV export successful!', 'success');
        }

        // Function to export raw data to Excel (as a tab-separated file with .xls extension for basic compatibility)
        function exportToExcel() {
            if (currentRawData.length === 0) {
                displayMessage(document.getElementById('raw-data-table').nextElementSibling.nextElementSibling, 'No data to export.', 'warning');
                return;
            }

            const headers = Object.keys(currentRawData[0]);
            const excelRows = [];

            // Add headers (tab-separated)
            excelRows.push(headers.map(header => `${header.replace(/"/g, '""')}`).join('\t'));

            // Add data rows (tab-separated)
            currentRawData.forEach(row => {
                const values = headers.map(header => {
                    let value = row[header];
                    if (value === null || value === undefined) {
                        value = '';
                    } else if (typeof value === 'string') {
                        value = value.replace(/"/g, '""'); // Escape double quotes
                    }
                    return `${value}`;
                });
                excelRows.push(values.join('\t'));
            });

            const excelString = excelRows.join('\n');
            const blob = new Blob([excelString], { type: 'application/vnd.ms-excel;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'sensor_data.xls'; // Use .xls for basic Excel opening
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            displayMessage(document.getElementById('raw-data-table').nextElementSibling.nextElementSibling, 'Excel export successful!', 'success');
        }


        // Main data fetching and rendering function
        async function fetchDataAndRender() {
            const refreshButton = document.getElementById('refresh-button');
            if (refreshButton) {
                refreshButton.disabled = true;
                refreshButton.innerHTML = `<span class="loading-spinner"></span> Loading...`;
            }


            try {
                const response = await fetch(`${API_BASE_URL}/api/data`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();

                if (data.status === 'no_data') {
                    updateCircularProgress('soil-moisture', 0, 100, '%', '#68D391');
                    const soilMoistureUpdate = document.getElementById('soil-moisture-update');
                    if(soilMoistureUpdate) soilMoistureUpdate.textContent = `Updated: N/A`;
                    updateCircularProgress('temperature', 0, 40, '°C', '#F6AD55');
                    const temperatureUpdate = document.getElementById('temperature-update');
                    if(temperatureUpdate) temperatureUpdate.textContent = `Updated: N/A`;
                    updateCircularProgress('humidity', 0, 100, '%', '#63B3ED');
                    const humidityUpdate = document.getElementById('humidity-update');
                    if(humidityUpdate) humidityUpdate.textContent = `Updated: N/A`;
                    updateCircularProgress('ph', 0, 14, '', '#A78BFA');
                    const phUpdate = document.getElementById('ph-update');
                    if(phUpdate) phUpdate.textContent = `Updated: N/A`;
                    updateCircularProgress('light-intensity', 0, 1000, ' lux', '#ECC94B');
                    const lightIntensityUpdate = document.getElementById('light-intensity-update');
                    if(lightIntensityUpdate) lightIntensityUpdate.textContent = `Updated: N/A`;
                    updateCircularProgress('rainfall', 0, 250, ' mm', '#4299E1');
                    const rainfallUpdate = document.getElementById('rainfall-update');
                    if(rainfallUpdate) rainfallUpdate.textContent = `Updated: N/A`;

                    displayMessage('sensor-trends-status', 'Not enough complete data available for plotting sensor trends. Check if sensors are reporting data for these features.', 'warning');
                    Plotly.purge('sensor-trends-chart');
                    renderRawDataTable([]);
                    displayMessage('care-tips', 'Select a crop to get recommendations.', 'info');
                    displayMessage('growth-prediction', 'Select a crop to view growth predictions.', 'info');
                    displayMessage('market-price-forecast', 'Select a crop to view market price forecast.', 'info');
                    displayMessage('crop-suggestion', 'Predicted soil moisture data is unusual or unavailable for crop suggestion.', 'info');
                    populateCropSelect(data.crop_labels);
                    currentRawData = []; // Clear raw data on no data status
                    return;
                }

                const latestData = data.latest_data;
                originalPlotData = data.plot_data;
                const cameraData = data.camera_data;
                currentRawData = data.raw_data; // Store raw data for export
                const cropLabels = data.crop_labels;

                const formattedTimestamp = new Date(latestData.timestamp).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });

                const soilMoistureUpdate = document.getElementById('soil-moisture-update');
                const temperatureUpdate = document.getElementById('temperature-update');
                const humidityUpdate = document.getElementById('humidity-update');
                const phUpdate = document.getElementById('ph-update');
                const lightIntensityUpdate = document.getElementById('light-intensity-update');
                const rainfallUpdate = document.getElementById('rainfall-update');

                updateCircularProgress('soil-moisture', latestData.soil_moisture || 0, 100, '%', '#68D391');
                if(soilMoistureUpdate) soilMoistureUpdate.textContent = `Updated: ${formattedTimestamp}`;
                updateCircularProgress('temperature', latestData.temperature || 0, 40, '°C', '#F6AD55');
                if(temperatureUpdate) temperatureUpdate.textContent = `Updated: ${formattedTimestamp}`;
                updateCircularProgress('humidity', latestData.humidity || 0, 100, '%', '#63B3ED');
                if(humidityUpdate) humidityUpdate.textContent = `Updated: ${formattedTimestamp}`;
                updateCircularProgress('ph', latestData.ph || 0, 14, '', '#A78BFA');
                if(phUpdate) phUpdate.textContent = `Updated: ${formattedTimestamp}`;
                updateCircularProgress('light-intensity', latestData.light_intensity || 0, 1000, ' lux', '#ECC94B');
                if(lightIntensityUpdate) lightIntensityUpdate.textContent = `Updated: ${formattedTimestamp}`;
                updateCircularProgress('rainfall', latestData.rainfall || 0, 250, ' mm', '#4299E1');
                if(rainfallUpdate) rainfallUpdate.textContent = `Updated: ${formattedTimestamp}`;


                const currentFilter = document.getElementById('chart-filter')?.value;
                renderSensorTrendsChart(originalPlotData, currentFilter);

                populateCropSelect(cropLabels);
                const cropSelect = document.getElementById('crop-select');
                if (cropSelect && cropSelect.value) {
                    cropSelect.dispatchEvent(new Event('change'));
                } else {
                    displayMessage('care-tips', 'Select a crop to get recommendations.', 'info');
                    displayMessage('growth-prediction', 'Select a crop to view growth predictions.', 'info');
                    displayMessage('market-price-forecast', 'Select a crop to view market price forecast.', 'info');
                    displayMessage('crop-suggestion', 'Predicted soil moisture data is unusual or unavailable for crop suggestion.', 'info');
                }

                const cameraFeedContainer = document.getElementById('camera-feed-container');
                const cameraDetailsExternal = document.getElementById('camera-details-external');

                if (cameraFeedContainer && cameraDetailsExternal && cameraData) {
                    const connectionStatusSpan = cameraFeedContainer.querySelector('.connection-status');
                    if (connectionStatusSpan) {
                        connectionStatusSpan.innerHTML = `<i class="fas fa-wifi mr-1"></i> ${cameraData.alert?.includes('No Camera Data') ? 'Disconnected' : 'Connected'}`;
                        connectionStatusSpan.style.backgroundColor = cameraData.alert?.includes('No Camera Data') ? '#e53e3e' : '#48bb78';
                    }

                    // For the actual camera feed, we handle its state via startCameraFeed/stopCameraFeed
                    // The cameraData from backend might be for simulated info, not actual stream status
                    // So, we'll primarily rely on `mediaStream` for connection status.
                    if (mediaStream) { // If camera is active, hide placeholder elements
                        cameraFeedContainer.querySelector('.camera-icon').style.display = 'none';
                        cameraFeedContainer.querySelector('.camera-feed-message').style.display = 'none';
                        cameraFeedContainer.querySelector('.camera-overlay-text').style.display = 'none';
                    } else { // If camera is not active, show placeholder elements
                         cameraFeedContainer.querySelector('.camera-icon').style.display = 'block';
                         cameraFeedContainer.querySelector('.camera-feed-message').style.display = 'block';
                         cameraFeedContainer.querySelector('.camera-overlay-text').style.display = 'block';
                         cameraFeedContainer.querySelector('.camera-feed-message').textContent = 'Live Camera Feed';
                         cameraFeedContainer.querySelector('.camera-overlay-text').textContent = 'Last Frame: N/A';
                    }


                    const cameraResolution = cameraDetailsExternal.querySelector('#camera-resolution');
                    const cameraFps = cameraDetailsExternal.querySelector('#camera-fps');
                    const cameraSignal = cameraDetailsExternal.querySelector('#camera-signal');
                    const lastFrameTime = cameraDetailsExternal.querySelector('#last-frame-time');

                    if (cameraResolution) cameraResolution.textContent = `Growth Stage: ${cameraData.stage || 'N/A'}`;
                    if (cameraFps) cameraFps.textContent = `Advisory: ${cameraData.alert || 'N/A'}`;
                    if (cameraSignal) cameraSignal.textContent = `Timestamp: ${new Date(cameraData.timestamp).toLocaleTimeString() || 'N/A'}`;
                    if (lastFrameTime) lastFrameTime.textContent = `Last Frame: ${new Date(cameraData.timestamp).toLocaleTimeString() || 'N/A'}`;

                } else if (cameraFeedContainer && cameraDetailsExternal) {
                    const connectionStatusSpan = cameraFeedContainer.querySelector('.connection-status');
                    if (connectionStatusSpan) {
                        connectionStatusSpan.innerHTML = `<i class="fas fa-wifi-slash mr-1"></i> Disconnected`;
                        connectionStatusSpan.style.backgroundColor = '#e53e3e';
                    }

                    const cameraResolution = cameraDetailsExternal.querySelector('#camera-resolution');
                    const cameraFps = cameraDetailsExternal.querySelector('#camera-fps');
                    const cameraSignal = cameraDetailsExternal.querySelector('#camera-signal');
                    const lastFrameTime = cameraDetailsExternal.querySelector('#last-frame-time');

                    if (cameraResolution) cameraResolution.textContent = `Growth Stage: N/A`;
                    if (cameraFps) cameraFps.textContent = `Advisory: N/A`;
                    if (cameraSignal) cameraSignal.textContent = `Timestamp: N/A`;
                    if (lastFrameTime) lastFrameTime.textContent = `Last Frame: N/A`;

                    // Ensure placeholder elements are visible if no camera data or stream
                    cameraFeedContainer.querySelector('.camera-icon').style.display = 'block';
                    cameraFeedContainer.querySelector('.camera-feed-message').style.display = 'block';
                    cameraFeedContainer.querySelector('.camera-overlay-text').style.display = 'block';
                    cameraFeedContainer.querySelector('.camera-feed-message').textContent = 'Live Camera Feed';
                    cameraFeedContainer.querySelector('.camera-overlay-text').textContent = 'Last Frame: N/A';
                }

                renderRawDataTable(currentRawData);
                renderWeatherData(); // Call the updated OpenWeather function
                renderRecentEvents();
                renderFarmHealthIndex();
                renderDeviceConnectivity();

            } catch (error) {
                console.error("Error fetching dashboard data:", error);
                displayMessage('soil-moisture-update', 'Error loading data.', 'error');
                displayMessage('temperature-update', 'Error loading data.', 'error');
                displayMessage('humidity-update', 'Error loading data.', 'error');
                displayMessage('ph-update', 'Error loading data.', 'error');
                displayMessage('light-intensity-update', 'Error loading data.', 'error');
                displayMessage('rainfall-update', 'Error loading data.', 'error');
                displayMessage('sensor-trends-status', 'Error loading trends.', 'error');
                Plotly.purge('sensor-trends-chart'); // Ensure chart is purged on error
                renderRawDataTable([]); // Clear table on error
                displayMessage('raw-data-table', 'Error loading raw data.', 'error');
                displayMessage('care-tips', 'Error loading recommendations.', 'error');
                displayMessage('growth-prediction', 'Error loading predictions.', 'error');
                displayMessage('market-price-forecast', 'Error loading forecast.', 'error');
                displayMessage('crop-suggestion', 'Error loading suggestions.', 'error');
            } finally {
                if (refreshButton) {
                    refreshButton.disabled = false;
                    refreshButton.innerHTML = `<i class="fas fa-sync-alt mr-2"></i> Refresh Data`;
                }
            }
        }

        // Function to update predictions and advice based on selected crop
        async function updateCropSpecificData() {
            const selectedCropType = document.getElementById('crop-select')?.value;

            if (!selectedCropType) {
                displayMessage('care-tips', 'Select a crop to get recommendations.', 'info');
                displayMessage('growth-prediction', 'Select a crop to view growth predictions.', 'info');
                displayMessage('market-price-forecast', 'Select a crop to view market price forecast.', 'info');
                displayMessage('crop-suggestion', 'Predicted soil moisture data is unusual or unavailable for crop suggestion.', 'info');
                return;
            }

            try {
                const response = await fetch(`${API_BASE_URL}/api/care_advice`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ selected_crop_type: selectedCropType })
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                const careTipsDiv = document.getElementById('care-tips');
                if (careTipsDiv) {
                    if (data.advice && data.advice.length > 0) {
                        careTipsDiv.innerHTML = data.advice.map(tip => `<p class="mb-1.5 last:mb-0">${renderMarkdown(tip)}</p>`).join('');
                    } else {
                        displayMessage('care-tips', 'No specific care recommendations available.', 'info');
                    }
                }
            } catch (error) {
                console.error("Error fetching crop care advice:", error);
                displayMessage('care-tips', 'Error loading recommendations.', 'error');
            }

            let predictedSoilMoisture = null;

            try {
                const response = await fetch(`${API_BASE_URL}/api/predict_growth`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ selected_crop_type: selectedCropType })
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                const growthPredictionDiv = document.getElementById('growth-prediction');
                if (growthPredictionDiv) {
                    if (data.error) {
                        displayMessage('growth-prediction', `Error: ${data.error}`, 'error');
                    } else {
                        predictedSoilMoisture = data.soil_moisture_pred;
                        let soilMoistureMsg = `Predicted Soil Moisture: <b>${data.soil_moisture_pred.toFixed(2)}%</b>`;
                        if (!(0 <= data.soil_moisture_pred && data.soil_moisture_pred <= 100)) {
                            soilMoistureMsg += ` (Unusual value, may indicate data anomaly)`;
                            growthPredictionDiv.innerHTML = `<p class="text-yellow-400"><i class="fas fa-exclamation-triangle mr-2"></i> ${soilMoistureMsg}</p>`;
                        } else {
                            growthPredictionDiv.innerHTML = `<p class="text-green-400"><i class="fas fa-check-circle mr-2"></i> ${soilMoistureMsg}</p>`;
                        }
                        growthPredictionDiv.innerHTML += `<p class="text-blue-400 mt-1.5"><i class="fas fa-sun mr-2"></i> Predicted Light Intensity: <b>${data.light_intensity_pred.toFixed(2)} lux</b></p>`;
                        growthPredictionDiv.innerHTML += `<p class="text-green-400 mt-1.5"><i class="fas fa-flask mr-2"></i> Predicted Nutrient Sum: <b>${data.nutrient_sum_pred.toFixed(2)}</b></p>`;
                    }
                }
            } catch (error) {
                console.error("Error fetching growth prediction:", error);
                displayMessage('growth-prediction', 'Error loading predictions.', 'error');
            }

            try {
                const response = await fetch(`${API_BASE_URL}/api/market_price`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ selected_crop_type: selectedCropType })
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                const marketPriceDiv = document.getElementById('market-price-forecast');
                if (marketPriceDiv) {
                    if (data.error) {
                        displayMessage('market-price-forecast', `Error: ${data.error}`, 'error');
                    } else {
                        marketPriceDiv.innerHTML = `<p class="text-green-400"><i class="fas fa-money-bill-wave mr-2"></i> Estimated Market Price for ${selectedCropType}: <b>$${data.predicted_price.toFixed(2)}</b></p>`;
                    }
                }
            } catch (error) {
                console.error("Error fetching market price forecast:", error);
                displayMessage('market-price-forecast', 'Error loading forecast.', 'error');
            }

            try {
                const response = await fetch(`${API_BASE_URL}/api/seed_recommendations`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ soil_moisture_pred: predictedSoilMoisture })
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                const cropSuggestionDiv = document.getElementById('crop-suggestion');
                if (cropSuggestionDiv) {
                    if (data.error) {
                        displayMessage('crop-suggestion', `Error: ${data.error}`, 'error');
                    } else {
                        cropSuggestionDiv.innerHTML = `<p class="text-gray-300">${renderMarkdown(data.recommendation)}</p>`;
                    }
                }
            } catch (error) {
                console.error("Error fetching crop suggestion:", error);
                displayMessage('crop-suggestion', 'Error loading suggestions.', 'error');
            }
        }

        // Event Listeners
        document.getElementById('refresh-button')?.addEventListener('click', fetchDataAndRender);
        document.getElementById('crop-select')?.addEventListener('change', updateCropSpecificData);
        document.getElementById('run-pest-scan-button')?.addEventListener('click', runPestScan);
        document.getElementById('chart-filter')?.addEventListener('change', (event) => {
            renderSensorTrendsChart(originalPlotData, event.target.value);
        });
        document.getElementById('export-csv-button')?.addEventListener('click', exportToCSV);
        document.getElementById('export-excel-button')?.addEventListener('click', exportToExcel);
        document.getElementById('capture-image-button')?.addEventListener('click', captureImage);
        // Event listener for the custom language selector
        document.getElementById('customLanguageSelect')?.addEventListener('change', (event) => {
            const selectedLang = event.target.value;
            if (selectedLang) {
                doGTranslate(selectedLang);
            }
        });
        document.getElementById('play-alerts-button')?.addEventListener('click', async () => {
            const careTipsDiv = document.getElementById('care-tips');
            const audioStatusDiv = document.getElementById('audio-status');

            if (!careTipsDiv || !audioStatusDiv) {
                console.error("Care tips or audio status div not found.");
                return;
            }

            const tips = Array.from(careTipsDiv.querySelectorAll('p')).map(p => p.textContent);

            const noAlertsText = 'No alerts to play.';
            const loadingRecText = 'Loading recommendations...';
            const noSpecificRecText = 'No specific care recommendations available.';

            if (tips.length === 0 || tips[0].includes(noSpecificRecText) || tips[0].includes(loadingRecText)) {
                audioStatusDiv.textContent = noAlertsText;
                return;
            }

            audioStatusDiv.textContent = 'Playing alerts...';
            const topAlerts = tips.slice(0, 2);

            for (let i = 0; i < topAlerts.length; i++) {
                let tip = topAlerts[i];
                const cleanTip = tip.replace(/\*\*/g, '').replace(/[🌱🌡️💨�☀️🌧️✅⚠️❌ℹ️]/g, '').trim();
                if (cleanTip) {
                    try {
                        const response = await fetch(`${API_BASE_URL}/api/voice_alert`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ text: cleanTip, lang: currentLanguage })
                        });

                        if (!response.ok) {
                            const errorText = await response.text();
                            throw new Error(`Server error: ${response.status} ${response.statusText} - ${errorText}`);
                        }

                        const audioBlob = await response.blob();
                        const audio = new Audio(URL.createObjectURL(audioBlob));
                        audio.play().catch(e => console.error("Error playing audio:", e));

                        audioStatusDiv.textContent = `🔊 Playing alert ${i + 1}: "${cleanTip}"`;
                        await new Promise(resolve => setTimeout(resolve, cleanTip.length * 50 + 1000));
                    } catch (error) {
                        console.error("Error playing voice alert:", error);
                        audioStatusDiv.textContent = `Error playing alert ${i + 1}: ${error.message}`;
                        break;
                    }
                }
            }
            audioStatusDiv.textContent = 'Alerts finished.';
        });

        // Function to set the simulation mode via API
        async function setSimulationMode(isSimulation) {
            const mode = isSimulation ? 'simulation' : 'real-time';
            try {
                const response = await fetch(`${API_BASE_URL}/api/set_mode`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ mode: mode })
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                if (data.status === 'success') {
                    console.log(`Backend mode set to: ${data.mode}`);
                    fetchDataAndRender();
                } else {
                    console.error("Failed to set backend mode:", data.message);
                }
            } catch (error) {
                console.error("Error setting simulation mode:", error);
            }
        }

        // Function to get the current simulation mode from API and update toggle
        async function getAndSetInitialMode() {
            try {
                const response = await fetch(`${API_BASE_URL}/api/get_mode`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                const toggle = document.getElementById('simulation-mode-toggle');
                if (toggle) {
                    if (data.mode === 'simulation') {
                        toggle.checked = true;
                    } else {
                        toggle.checked = false;
                    }
                }
                console.log(`Initial backend mode: ${data.mode}`);
            } catch (error) {
                console.error("Error fetching initial simulation mode:", error);
            }
        }

        // Initial data load when the page is ready
        document.addEventListener('DOMContentLoaded', async () => {
            // Attempt to get user location first
            try {
                const coords = await getUserLocation();
                userLatitude = coords.lat;
                userLongitude = coords.lon;
                console.log("User location obtained:", userLatitude, userLongitude);
            } catch (error) {
                console.warn(error.message);
                // userLatitude and userLongitude remain null, so renderWeatherData will use default city
            }

            getAndSetInitialMode();
            fetchDataAndRender(); // Fetch initial data
            setInterval(fetchDataAndRender, 30000); // Refresh data every 30 seconds

            document.getElementById('simulation-mode-toggle')?.addEventListener('change', (event) => {
                setSimulationMode(event.target.checked);
            });

            // Start camera feed when the page loads
            startCameraFeed();
        });

        // Ensure camera feed is stopped when navigating away
        window.addEventListener('beforeunload', stopCameraFeed);
    </script>
</body>
</html>

----------------------------------------------------------------------------------------------------------

import os
import sys
import json
import time
import random
import base64
import tempfile
import threading
import io
from datetime import datetime, timedelta

# Django specific imports
from django.conf import settings
from django.core.wsgi import get_wsgi_application
from django.http import JsonResponse, HttpResponse, FileResponse
from django.urls import path
from django.views.decorators.csrf import csrf_exempt

# Firebase, ML, gTTS imports (these remain the same as in the original Flask app)
import firebase_admin
from firebase_admin import credentials, db
import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
from sklearn.linear_model import LinearRegression
import joblib
from gtts import gTTS

# --- Django Settings Configuration (minimal for a single-file app) ---
# This block configures Django's settings if they haven't been already.
# This is crucial for running Django as a standalone script.
if not settings.configured:
    # Determine DEBUG mode based on environment variable (e.g., for production)
    IS_PROD = os.environ.get('RENDER', 'False') == 'True' # Render sets RENDER=True
    DEBUG_MODE = not IS_PROD # Set DEBUG to False in production

    # Get allowed hosts from environment variable, or use defaults
    # For Render, you'll need to add your Render service's URL here.
    # For example, in Render, you can set an environment variable ALLOWED_HOSTS
    # with the value 'smart-agritech-streamlit-dashbard.onrender.com'
    allowed_hosts_str = os.environ.get('ALLOWED_HOSTS', '127.0.0.1,localhost')
    ALLOWED_HOSTS_LIST = [host.strip() for host in allowed_hosts_str.split(',')]

    # Add the Render domain explicitly if it's not already there and running on Render
    if IS_PROD and 'smart-agritech-streamlit-dashbard.onrender.com' not in ALLOWED_HOSTS_LIST:
        ALLOWED_HOSTS_LIST.append('smart-agritech-streamlit-dashbard.onrender.com')

    settings.configure(
        DEBUG=DEBUG_MODE,
        SECRET_KEY=os.environ.get('DJANGO_SECRET_KEY', 'a-very-secret-key-that-should-be-randomly-generated-in-production'),
        ROOT_URLCONF=__name__,  # This file itself serves as the root URLconf
        INSTALLED_APPS=[
            # No specific Django apps are strictly needed for this simple API structure,
            # but in a full Django project, you'd list 'django.contrib.admin', etc.
        ],
        MIDDLEWARE=[
            # Common Django middleware
            'django.middleware.common.CommonMiddleware',
            # CSRF middleware is included, but we'll use @csrf_exempt on views for API calls
            # to mimic Flask's default behavior for simplicity in this single-file setup.
            '__main__.SimpleCorsMiddleware', # Referencing the middleware defined below
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
        ],
        ALLOWED_HOSTS=ALLOWED_HOSTS_LIST, # Add this line
        # Custom setting to allow all origins, mirroring Flask's CORS setup
        CORS_ALLOW_ALL_ORIGINS=True,
    )

# --- Global Variables from the original Flask App ---
firebase_app = None
model = None  # For growth prediction
input_scaler = None  # For growth prediction model input
output_scaler = None  # For growth prediction model output
crop_encoder = None  # For encoding crop types for growth prediction
market_price_model = None
market_crop_encoder = None  # For encoding crop types for market price prediction
market_price_features = None  # List of features expected by the market price model
all_crop_labels = []  # List of all known crop labels from training data
firebase_db_ref = None  # Global reference for Firebase DB (sensor data)
firebase_camera_ref = None  # Global reference for Firebase camera feed

# --- New Global Variable for Simulation Mode ---
# False means "Real-Time Testing" (expecting some real data, generating dummies for others)
# True means "Simulation" (generating all dummy data)
simulation_mode = False

# Multilingual Advice Messages
ADVICE_MESSAGES = {
    'en': {
        'no_data': "No sensor data available to provide advice.",
        'npk_low': "🌱 **{nutrient} is low ({value:.1f})**: {message}",
        'npk_high': "🌱 **{nutrient} is high ({value:.1f})**: {message}",
        'soil_moisture_low': "💧 **Soil Moisture is low ({sm:.1f}%)**: {message}",
        'soil_moisture_high': "💧 **Soil Moisture is high ({sm:.1f}%)**: {message}",
        'temp_low': "🌡️ **Temperature is low ({temp:.1f}°C)**: {message}",
        'temp_high': "🌡️ **Temperature is high ({temp:.1f}°C)**: {message}",
        'humidity_low': "💨 **Humidity is low ({hum:.1f}%)**: {message}",
        'humidity_high': "💨 **Humidity is high ({hum:.1f}%)**: {message}",
        'ph_low': "🧪 **pH is low ({ph_val:.1f})**: {message}",
        'ph_high': "🧪 **pH is high ({ph_val:.1f})**: {message}",
        'ph_off': "🧪 **pH is off ({ph_val:.1f})**: {message}",
        'light_low': "☀️ **Light Intensity is low ({light:.1f} lux)**: {message}",
        'light_high': "☀️ **Light Intensity is high ({light:.1f} lux)**: {message}",
        'rainfall_low_msg': "🌧️ **Rainfall is low ({rain:.1f} mm)**: {message}",
        'rainfall_high_msg': "🌧️ **Rainfall is high ({rain:.1f} mm)**: {message}",
        'all_good': "✅ All major parameters look good! Keep monitoring regularly for optimal growth.",
        'npk_n_low': "Consider applying nitrogen-rich fertilizer.",
        'npk_n_high': "Excess nitrogen can promote leafy growth over fruit/flower development.",
        'npk_p_low': "Consider applying phosphorus fertilizer for root development.",
        'npk_p_high': "High phosphorus can lock up other nutrients.",
        'npk_k_low': "Consider applying potassium fertilizer for overall plant health and fruit quality.",
        'npk_k_high': "Excess potassium can interfere with calcium and magnesium uptake.",
        'wheat_sm_low': "Irrigate lightly – wheat needs 35–50% soil moisture.",
        'rice_sm_low': "Rice needs high moisture. Ensure proper irrigation.",
        'maize_sm_low': "Maize needs moderate soil moisture levels.",
        'banana_sm_low': "Keep soil consistently moist for banana.",
        'mango_sm_high': "Avoid waterlogging. Mango needs well-drained soil.",
        'grapes_sm_high': "Grapes prefer drier soil – avoid overwatering.",
        'cotton_sm_low': "Cotton requires moderate moisture during flowering.",
        'millet_sorghum_sm_low': "These are drought-resistant crops but still need minimal moisture.",
        'jute_sm_low': "Jute requires ample moisture during growth.",
        'pomegranate_sm_high': "Avoid overwatering pomegranate.",
        'melon_sm_low': "Melons need consistent watering, especially during fruiting.",
        'coconut_sm_low': "Coconut palms need high moisture levels.",
        'mothbeans_sm_low': "Mothbeans are drought-tolerant but need minimal irrigation during flowering.",
        'mungbean_sm_low': "Ensure regular irrigation during flowering and pod formation.",
        'blackgram_sm_low': "Maintain moderate moisture especially during flowering.",
        'lentil_sm_low': "Lentils need low to moderate moisture.",
        'general_sm_low': "General advice: Consider irrigation to prevent drought stress.",
        'general_sm_high': "General advice: Ensure good drainage to prevent waterlogging.",
        'wheat_temp_high': "Provide shade or irrigate in evening – temp is too high for wheat.",
        'rice_temp_high': "Too hot for rice. Consider evening irrigation or shade.",
        'maize_temp_low': "Maize prefers warm weather (20–30°C).",
        'banana_temp_low': "Banana is sensitive to cold – ensure warm conditions.",
        'mango_temp_low': "Mango requires warmer temperatures (>20°C).",
        'cotton_temp_low': "Cotton thrives in warm temperatures.",
        'millet_sorghum_temp_low': "Warm climate is ideal for millet/sorghum.",
        'coffee_temp_low': "Coffee thrives in 18–24°C range.",
        'jute_temp_low': "Jute grows well in 25–30°C.",
        'papaya_temp_low': "Papaya prefers 21–33°C range.",
        'pomegranate_temp_low': "Ideal temperature is above 20°C.",
        'melon_temp_low': "Ensure temperature is warm (>25°C).",
        'coconut_temp_low': "Ideal temperature for coconut is above 25°C.",
        'mothbeans_temp_low': "Temperature should be above 22°C.",
        'mungbean_temp_low': "Mungbean requires warm conditions for optimal growth.",
        'blackgram_temp_low': "Ideal temperature range is 25–35°C.",
        'lentil_temp_low': "Lentils grow well in 18–30°C.",
        'general_temp_low': "General advice: Cold temperatures can stunt growth. Consider protective measures.",
        'general_temp_high': "General advice: High temperatures can cause heat stress. Ensure adequate water and shade.",
        'wheat_hum_high': "Watch out for fungal infections – ensure airflow.",
        'rice_hum_low': "Increase ambient humidity or use mulch.",
        'banana_hum_low': "Banana requires high humidity. Consider misting or mulching.",
        'grapes_hum_high': "High humidity may lead to fungal infections.",
        'coffee_hum_low': "Coffee prefers high humidity.",
        'orange_hum_high': "Prune trees to improve airflow and prevent fungal issues.",
        'general_hum_low': "General advice: Low humidity can cause wilting. Consider misting or increasing soil moisture.",
        'general_hum_high': "General advice: High humidity increases risk of fungal diseases. Ensure good ventilation.",
        'wheat_ph_low': "Slightly acidic – consider applying lime to raise pH.",
        'rice_ph_off': "Maintain slightly acidic soil for rice (pH 5.5–6.5).",
        'maize_ph_off': "Maintain soil pH between 5.8–7.0.",
        'papaya_ph_low': "Slightly acidic to neutral soil is best for papaya.",
        'orange_ph_off': "Ideal soil pH for orange is 6.0–7.5.",
        'general_ph_very_low': "General advice: Soil is too acidic. Apply lime to increase pH and improve nutrient availability.",
        'general_ph_very_high': "General advice: Soil is too alkaline. Apply sulfur or organic matter to decrease pH.",
        'general_ph_off': "General advice: Optimal pH range for most crops is 5.5-7.5. Adjust as needed.",
        'wheat_light_low': "Ensure the crop gets enough sunlight.",
        'rice_light_low': "Ensure rice gets full sun exposure.",
        'general_light_low': "General advice: Insufficient light can hinder photosynthesis. Consider supplemental lighting or pruning.",
        'general_light_high': "General advice: Excessive light can cause scorching. Consider shading during peak hours."
    },
    'hi': {
        'no_data': "सलाह देने के लिए कोई सेंसर डेटा उपलब्ध नहीं है।",
        'npk_low': "🌱 **{nutrient} कम है ({value:.1f})**: {message}",
        'npk_high': "🌱 **{nutrient} अधिक है ({value:.1f})**: {message}",
        'soil_moisture_low': "💧 **मिट्टी की नमी कम है ({sm:.1f}%)**: {message}",
        'soil_moisture_high': "💧 **मिट्टी की नमी अधिक है ({sm:.1f}%)**: {message}",
        'temp_low': "🌡️ **तापमान कम है ({temp:.1f}°C)**: {message}",
        'temp_high': "🌡️ **तापमान अधिक है ({temp:.1f}°C)**: {message}",
        'humidity_low': "💨 **आर्द्रता कम है ({hum:.1f}%)**: {message}",
        'humidity_high': "💨 **आर्द्रता अधिक है ({hum:.1f}%)**: {message}",
        'ph_low': "🧪 **पीएच कम है ({ph_val:.1f})**: {message}",
        'ph_high': "🧪 **पीएच अधिक है ({ph_val:.1f})**: {message}",
        'ph_off': "🧪 **पीएच सही नहीं है ({ph_val:.1f})**: {message}",
        'light_low': "☀️ **प्रकाश की तीव्रता कम है ({light:.1f} लक्स)**: {message}",
        'light_high': "☀️ **प्रकाश की तीव्रता अधिक है ({light:.1f} लक्स)**: {message}",
        'rainfall_low_msg': "🌧️ **वर्षा कम है ({rain:.1f} मिमी)**: {message}",
        'rainfall_high_msg': "🌧️ **वर्षा अधिक है ({rain:.1f} मिमी)**: {message}",
        'all_good': "✅ सभी मुख्य पैरामीटर ठीक दिख रहे हैं! इष्टतम विकास के लिए नियमित रूप से निगरानी करते रहें।",
        'npk_n_low': "नाइट्रोजन युक्त उर्वरक डालने पर विचार करें।",
        'npk_n_high': "अतिरिक्त नाइट्रोजन फल/फूल के विकास के बजाय पत्तों के विकास को बढ़ावा दे सकता है।",
        'npk_p_low': "जड़ के विकास के लिए फास्फोरस उर्वरक डालने पर विचार करें।",
        'npk_p_high': "उच्च फास्फोरस अन्य पोषक तत्वों को अवरुद्ध कर सकता है।",
        'npk_k_low': "पौधे के समग्र स्वास्थ्य और फल की गुणवत्ता के लिए पोटेशियम उर्वरक डालने पर विचार करें।",
        'npk_k_high': "अतिरिक्त पोटेशियम कैल्शियम और मैग्नीशियम के अवशोषण में हस्तक्षेप कर सकता है।",
        'wheat_sm_low': "हल्की सिंचाई करें – गेहूं को 35-50% मिट्टी की नमी की आवश्यकता होती है।",
        'rice_sm_low': "चावल को अधिक नमी की आवश्यकता होती है। उचित सिंचाई सुनिश्चित करें।",
        'maize_sm_low': "मक्का को मध्यम मिट्टी की नमी के स्तर की आवश्यकता होती है।",
        'banana_sm_low': "केले के लिए मिट्टी को लगातार नम रखें।",
        'mango_sm_high': "जलभराव से बचें। आम को अच्छी जल निकासी वाली मिट्टी की आवश्यकता होती है।",
        'grapes_sm_high': "अंगूर सूखी मिट्टी पसंद करते हैं – अधिक पानी देने से बचें।",
        'cotton_sm_low': "कपास को फूल आने के दौरान मध्यम नमी की आवश्यकता होती है।",
        'millet_sorghum_sm_low': "ये सूखे प्रतिरोधी फसलें हैं लेकिन फिर भी न्यूनतम नमी की आवश्यकता होती है।",
        'jute_sm_low': "जूट को विकास के दौरान पर्याप्त नमी की आवश्यकता होती है।",
        'pomegranate_sm_high': "अनार को अधिक पानी देने से बचें।",
        'melon_sm_low': "तरबूज को लगातार पानी की आवश्यकता होती है, खासकर फल लगने के दौरान।",
        'coconut_sm_low': "नारियल के पेड़ों को उच्च नमी के स्तर की आवश्यकता होती है।",
        'mothbeans_sm_low': "मोठबीन सूखे को सहन करने वाली फसलें हैं लेकिन फूल आने के दौरान न्यूनतम सिंचाई की आवश्यकता होती है।",
        'mungbean_sm_low': "फूल आने और फली बनने के दौरान नियमित सिंचाई सुनिश्चित करें।",
        'blackgram_sm_low': "विशेष रूप से फूल आने के दौरान मध्यम नमी बनाए रखें।",
        'lentil_sm_low': "मसूर को कम से मध्यम नमी की आवश्यकता होती है।",
        'general_sm_low': "सामान्य सलाह: सूखे के तनाव को रोकने के लिए सिंचाई पर विचार करें।",
        'general_sm_high': "सामान्य सलाह: जलभराव को रोकने के लिए अच्छी जल निकासी सुनिश्चित करें।",
        'wheat_temp_high': "शाम को छाया प्रदान करें या सिंचाई करें – गेहूं के लिए तापमान बहुत अधिक है।",
        'rice_temp_high': "चावल के लिए बहुत गर्म है। शाम को सिंचाई या छाया पर विचार करें।",
        'maize_temp_low': "मक्का गर्म मौसम (20-30°C) पसंद करता है।",
        'banana_temp_low': "केला ठंड के प्रति संवेदनशील है – गर्म स्थिति सुनिश्चित करें।",
        'mango_temp_low': "आम को गर्म तापमान (>20°C) की आवश्यकता होती है।",
        'cotton_temp_low': "कपास गर्म तापमान में पनपती है।",
        'millet_sorghum_temp_low': "बाजरा/ज्वार के लिए गर्म जलवायु आदर्श है।",
        'coffee_temp_low': "कॉफी 18-24°C रेंज में पनपती है।",
        'jute_temp_low': "जूट 25-30°C में अच्छी तरह उगता है।",
        'papaya_temp_low': "पपीता 21-33°C रेंज पसंद करता है।",
        'pomegranate_temp_low': "आदर्श तापमान 20°C से ऊपर है।",
        'melon_temp_low': "सुनिश्चित करें कि तापमान गर्म (>25°C) हो।",
        'coconut_temp_low': "नारियल के लिए आदर्श तापमान 25°C से ऊपर है।",
        'mothbeans_temp_low': "तापमान 22°C से ऊपर होना चाहिए।",
        'mungbean_temp_low': "मूंग को इष्टतम विकास के लिए गर्म परिस्थितियों की आवश्यकता होती है।",
        'blackgram_temp_low': "आदर्श तापमान सीमा 25-35°C है।",
        'lentil_temp_low': "मसूर 18-30°C में अच्छी तरह उगती है।",
        'general_temp_low': "सामान्य सलाह: ठंडा तापमान विकास को रोक सकता है। सुरक्षात्मक उपायों पर विचार करें।",
        'general_temp_high': "सामान्य सलाह: उच्च तापमान से गर्मी का तनाव हो सकता है। पर्याप्त पानी और छाया सुनिश्चित करें।",
        'wheat_hum_high': "कवक संक्रमण से सावधान रहें – वायु प्रवाह सुनिश्चित करें।",
        'rice_hum_low': "आसपास की आर्द्रता बढ़ाएँ या पलवार का उपयोग करें।",
        'banana_hum_low': "केले को उच्च आर्द्रता की आवश्यकता होती है। धुंध या पलवार पर विचार करें।",
        'grapes_hum_high': "उच्च आर्द्रता से कवक संक्रमण हो सकता है।",
        'coffee_hum_low': "कॉफी उच्च आर्द्रता पसंद करती है।",
        'orange_hum_high': "वायु प्रवाह में सुधार और कवक संबंधी समस्याओं को रोकने के लिए पेड़ों की छंटाई करें।",
        'general_hum_low': "सामान्य सलाह: कम आर्द्रता से मुरझाना हो सकता है। धुंध या मिट्टी की नमी बढ़ाने पर विचार करें।",
        'general_hum_high': "सामान्य सलाह: उच्च आर्द्रता से कवक रोगों का खतरा बढ़ जाता है। अच्छा वेंटिलेशन सुनिश्चित करें।",
        'wheat_ph_low': "थोड़ा अम्लीय – पीएच बढ़ाने के लिए चूना डालने पर विचार करें।",
        'rice_ph_off': "चावल के लिए थोड़ी अम्लीय मिट्टी बनाए रखें (पीएच 5.5-6.5)।",
        'maize_ph_off': "मिट्टी का पीएच 5.8-7.0 के बीच बनाए रखें।",
        'papaya_ph_low': "पपीते के लिए थोड़ी अम्लीय से तटस्थ मिट्टी सबसे अच्छी होती है।",
        'orange_ph_off': "संतरे के लिए आदर्श मिट्टी का पीएच 6.0-7.5 है।",
        'general_ph_very_low': "सामान्य सलाह: मिट्टी बहुत अम्लीय है। पीएच बढ़ाने और पोषक तत्वों की उपलब्धता में सुधार के लिए चूना डालें।",
        'general_ph_very_high': "सामान्य सलाह: मिट्टी बहुत क्षारीय है। पीएच कम करने के लिए सल्फर या जैविक पदार्थ डालें।",
        'general_ph_off': "सामान्य सलाह: अधिकांश फसलों के लिए इष्टतम पीएच रेंज 5.5-7.5 है। आवश्यकतानुसार समायोजित करें।",
        'wheat_light_low': "सुनिश्चित करें कि फसल को पर्याप्त धूप मिले।",
        'rice_light_low': "सुनिश्चित करें कि चावल को पूरी धूप मिले।",
        'general_light_low': "सामान्य सलाह: अपर्याप्त प्रकाश प्रकाश संश्लेषण में बाधा डाल सकता है। पूरक प्रकाश या छंटाई पर विचार करें।",
        'general_light_high': "सामान्य सलाह: अत्यधिक प्रकाश से गर्मी का तनाव हो सकता है। पर्याप्त पानी और छाया सुनिश्चित करें।"
    },
    'es': {  # Spanish
        'no_data': "No hay datos del sensor disponibles para proporcionar asesoramiento.",
        'npk_low': "🌱 **{nutrient} bajo ({value:.1f})**: {message}",
        'npk_high': "🌱 **{nutrient} alto ({value:.1f})**: {message}",
        'soil_moisture_low': "💧 **Humedad del suelo baja ({sm:.1f}%)**: {message}",
        'soil_moisture_high': "💧 **Humedad del suelo alta ({sm:.1f}%)**: {message}",
        'temp_low': "🌡️ **Temperatura baja ({temp:.1f}°C)**: {message}",
        'temp_high': "🌡️ **Temperatura alta ({temp:.1f}°C)**: {message}",
        'humidity_low': "💨 **Humedad baja ({hum:.1f}%)**: {message}",
        'humidity_high': "💨 **Humedad alta ({hum:.1f}%)**: {message}",
        'ph_low': "🧪 **pH bajo ({ph_val:.1f})**: {message}",
        'ph_high': "🧪 **pH alto ({ph_val:.1f})**: {message}",
        'ph_off': "🧪 **pH incorrecto ({ph_val:.1f})**: {message}",
        'light_low': "☀️ **Intensidad de luz baja ({light:.1f} lux)**: {message}",
        'light_high': "☀️ **Intensidad de luz alta ({light:.1f} lux)**: {message}",
        'rainfall_low_msg': "🌧️ **Precipitación baja ({rain:.1f} mm)**: {message}",
        'rainfall_high_msg': "🌧️ **Precipitación alta ({rain:.1f} mm)**: {message}",
        'all_good': "✅ ¡Todos los parámetros principales se ven bien! Siga monitoreando regularmente para un crecimiento óptimo.",
        'npk_n_low': "Considere aplicar fertilizante rico en nitrógeno.",
        'npk_n_high': "El exceso de nitrógeno puede promover el crecimiento foliar sobre el desarrollo de frutos/flores.",
        'npk_p_low': "Considere aplicar fertilizante de fósforo para el desarrollo de la raíz.",
        'npk_p_high': "El fósforo alto puede bloquear otros nutrientes.",
        'npk_k_low': "Considere aplicar fertilizante de potasio para la salud general de la planta y la calidad de la fruta.",
        'npk_k_high': "El exceso de potasio puede interferir con la absorción de calcio y magnesio.",
        'wheat_sm_low': "Riegue ligeramente – el trigo necesita 35–50% de humedad del suelo.",
        'rice_sm_low': "El arroz necesita mucha humedad. Asegure un riego adecuado.",
        'maize_sm_low': "El maíz necesita niveles moderados de humedad del suelo.",
        'banana_sm_low': "Mantenga el suelo constantemente húmedo para el plátano.",
        'mango_sm_high': "Evite el encharcamiento. El mango necesita un suelo bien drenado.",
        'grapes_sm_high': "Las uvas prefieren un suelo más seco – evite el riego excesivo.",
        'cotton_sm_low': "El algodón requiere humedad moderada durante la floración.",
        'millet_sorghum_sm_low': "Estos son cultivos resistentes a la sequía pero aún necesitan humedad mínima.",
        'jute_sm_low': "El yute requiere mucha humedad durante el crecimiento.",
        'pomegranate_sm_high': "Evite el riego excesivo de la granada.",
        'melon_sm_low': "Los melones necesitan riego constante, especialmente durante la fructificación.",
        'coconut_sm_low': "Las palmas de coco necesitan altos niveles de humedad.",
        'mothbeans_sm_low': "Las judías polilla son tolerantes a la sequía pero necesitan riego mínimo durante la floración.",
        'mungbean_sm_low': "Asegure un riego regular durante la floración y la formación de vainas.",
        'blackgram_sm_low': "Mantenga una humedad moderada especialmente durante la floración.",
        'lentil_sm_low': "Las lentejas necesitan humedad baja a moderada.",
        'general_sm_low': "Consejo general: Considere el riego para prevenir el estrés por sequía.",
        'general_sm_high': "Consejo general: Asegure un buen drenaje para prevenir el encharcamiento.",
        'wheat_temp_high': "Proporcione sombra o riegue por la noche – la temperatura es demasiado alta para el trigo.",
        'rice_temp_high': "Demasiado calor para el arroz. Considere el riego nocturno o la sombra.",
        'maize_temp_low': "El maíz prefiere el clima cálido (20–30°C).",
        'banana_temp_low': "El plátano es sensible al frío – asegure condiciones cálidas.",
        'mango_temp_low': "El mango requiere temperaturas más cálidas (>20°C).",
        'cotton_temp_low': "El algodón prospera en temperaturas cálidas.",
        'millet_sorghum_temp_low': "El clima cálido es ideal para el mijo/sorgo.",
        'coffee_temp_low': "El café prospera en el rango de 18–24°C.",
        'jute_temp_low': "El yute crece bien a 25–30°C.",
        'papaya_temp_low': "La papaya prefiere el rango de 21–33°C.",
        'pomegranate_temp_low': "La temperatura ideal es superior a 20°C.",
        'melon_temp_low': "Asegure que la temperatura sea cálida (>25°C).",
        'coconut_temp_low': "La temperatura ideal para el coco es superior a 25°C.",
        'mothbeans_temp_low': "La temperatura debe ser superior a 22°C.",
        'mungbean_temp_low': "La judía mungo requiere condiciones cálidas para un crecimiento óptimo.",
        'blackgram_temp_low': "El rango de temperatura ideal es de 25–35°C.",
        'lentil_temp_low': "Las lentejas crecen bien a 18–30°C.",
        'general_temp_low': "Consejo general: Las bajas temperaturas pueden atrofiar el crecimiento. Considere medidas de protección.",
        'general_temp_high': "Consejo general: Las altas temperaturas pueden causar estrés por calor. Asegure agua y sombra adecuadas.",
        'wheat_hum_high': "Tenga cuidado con las infecciones fúngicas – asegure el flujo de aire.",
        'rice_hum_low': "Aumente la humedad ambiental o use mantillo.",
        'banana_hum_low': "El plátano requiere alta humedad. Considere la nebulización o el acolchado.",
        'grapes_hum_high': "La alta humedad puede provocar infecciones fúngicas.",
        'coffee_hum_low': "El café prefiere alta humedad.",
        'orange_hum_high': "Pode los árboles para mejorar el flujo de aire y prevenir problemas fúngicos.",
        'general_hum_low': "Consejo general: La baja humedad puede causar marchitamiento. Considere la nebulización o el aumento de la humedad del suelo.",
        'general_hum_high': "Consejo general: La alta humedad aumenta el riesgo de enfermedades fúngicas. Asegure una buena ventilación.",
        'wheat_ph_low': "Ligeramente ácido – considere aplicar cal para aumentar el pH.",
        'rice_ph_off': "Mantenga el suelo ligeramente ácido para el arroz (pH 5.5–6.5).",
        'maize_ph_off': "Mantenga el pH del suelo entre 5.8–7.0.",
        'papaya_ph_low': "El suelo ligeramente ácido a neutro es el mejor para la papaya.",
        'orange_ph_off': "El pH ideal del suelo para la naranja es 6.0–7.5.",
        'general_ph_very_low': "Consejo general: El suelo es demasiado ácido. Aplique cal para aumentar el pH y mejorar la disponibilidad de nutrientes.",
        'general_ph_very_high': "Consejo general: El suelo es demasiado alcalino. Aplique azufre o materia orgánica para disminuir el pH.",
        'general_ph_off': "Consejo general: El rango de pH óptimo para la mayoría de los cultivos es 5.5-7.5. Ajuste según sea necesario.",
        'wheat_light_low': "Asegure que el cultivo reciba suficiente luz solar.",
        'rice_light_low': "Asegure que el arroz reciba plena exposición al sol.",
        'general_light_low': "Consejo general: La luz insuficiente puede dificultar la fotosíntesis. Considere la iluminación suplementaria o la poda.",
        'general_light_high': "Consejo general: La luz excesiva puede causar quemaduras. Considere la sombra durante las horas pico."
    },
    'fr': {  # French
        'no_data': "Aucune donnée de capteur disponible pour fournir des conseils.",
        'npk_low': "🌱 **{nutrient} est faible ({value:.1f})**: {message}",
        'npk_high': "🌱 **{nutrient} est élevé ({value:.1f})**: {message}",
        'soil_moisture_low': "💧 **Humidité du sol faible ({sm:.1f}%)**: {message}",
        'soil_moisture_high': "💧 **Humidité du sol élevée ({sm:.1f}%)**: {message}",
        'temp_low': "🌡️ **Température basse ({temp:.1f}°C)**: {message}",
        'temp_high': "🌡️ **Température élevée ({temp:.1f}°C)**: {message}",
        'humidity_low': "💨 **Humidité faible ({hum:.1f}%)**: {message}",
        'humidity_high': "💨 **Humidité élevée ({hum:.1f}%)**: {message}",
        'ph_low': "🧪 **pH faible ({ph_val:.1f})**: {message}",
        'ph_high': "🧪 **pH élevé ({ph_val:.1f})**: {message}",
        'ph_off': "🧪 **pH incorrect ({ph_val:.1f})**: {message}",
        'light_low': "☀️ **Intensité lumineuse faible ({light:.1f} lux)**: {message}",
        'light_high': "☀️ **Intensité lumineuse élevée ({light:.1f} lux)**: {message}",
        'rainfall_low_msg': "🌧️ **Précipitations faibles ({rain:.1f} mm)**: {message}",
        'rainfall_high_msg': "🌧️ **Précipitations élevées ({rain:.1f} mm)**: {message}",
        'all_good': "✅ Tous les paramètres majeurs semblent bons ! Continuez à surveiller régulièrement pour une croissance optimale.",
        'npk_n_low': "Envisagez d'appliquer un engrais riche en azote.",
        'npk_n_high': "L'excès d'azote peut favoriser la croissance des feuilles au détriment du développement des fruits/fleurs.",
        'npk_p_low': "Envisagez d'appliquer un engrais phosphoré pour le développement des racines.",
        'npk_p_high': "Un niveau élevé de phosphore peut bloquer d'autres nutriments.",
        'npk_k_low': "Envisagez d'appliquer un engrais potassique pour la santé générale des plantes et la qualité des fruits.",
        'npk_k_high': "L'excès de potassium peut interférer avec l'absorption du calcium et du magnésium.",
        'wheat_sm_low': "Arrosez légèrement – le blé a besoin de 35 à 50% d'humidité du sol.",
        'rice_sm_low': "Le riz a besoin de beaucoup d'humidité. Assurez une irrigation adéquate.",
        'maize_sm_low': "Le maïs a besoin de niveaux d'humidité du sol modérés.",
        'banana_sm_low': "Gardez le sol constamment humide pour la banane.",
        'mango_sm_high': "Évitez l'engorgement. La mangue a besoin d'un sol bien drainé.",
        'grapes_sm_high': "Les raisins préfèrent un sol plus sec – évitez le sur-arrosage.",
        'cotton_sm_low': "Le coton nécessite une humidité modérée pendant la floraison.",
        'millet_sorghum_sm_low': "Ce sont des cultures résistantes à la sécheresse mais nécessitent tout de même une humidité minimale.",
        'jute_sm_low': "Le jute nécessite une humidité abondante pendant la croissance.",
        'pomegranate_sm_high': "Évitez de trop arroser la grenade.",
        'melon_sm_low': "Les melons ont besoin d'un arrosage constant, surtout pendant la fructification.",
        'coconut_sm_low': "Les cocotiers ont besoin de niveaux d'humidité élevés.",
        'mothbeans_sm_low': "Les haricots papillons sont tolérants à la sécheresse mais nécessitent une irrigation minimale pendant la floraison.",
        'mungbean_sm_low': "Assurez un arrosage régulier pendant la floraison et la formation des gousses.",
        'blackgram_sm_low': "Maintenez une humidité modérée, surtout pendant la floraison.",
        'lentil_sm_low': "Les lentilles ont besoin d'une humidité faible à modérée.",
        'general_sm_low': "Conseil général : Envisagez l'irrigation pour prévenir le stress hydrique.",
        'general_sm_high': "Conseil général : Assurez un bon drainage pour prévenir l'engorgement.",
        'wheat_temp_high': "Fournissez de l'ombre ou arrosez le soir – la température est trop élevée pour le blé.",
        'rice_temp_high': "Trop chaud pour le riz. Envisagez l'irrigation nocturne ou l'ombre.",
        'maize_temp_low': "Le maïs préfère le temps chaud (20–30°C).",
        'banana_temp_low': "La banane est sensible au froid – assurez des conditions chaudes.",
        'mango_temp_low': "La mangue nécessite des températures plus chaudes (>20°C).",
        'cotton_temp_low': "Le coton prospère sous des températures chaudes.",
        'millet_sorghum_temp_low': "Le climat chaud est idéal pour le millet/sorgho.",
        'coffee_temp_low': "Le café prospère dans la plage de 18–24°C.",
        'jute_temp_low': "Le jute pousse bien entre 25 et 30°C.",
        'papaya_temp_low': "La papaye préfère la plage de 21–33°C.",
        'pomegranate_temp_low': "La température idéale est supérieure à 20°C.",
        'melon_temp_low': "Assurez-vous que la température est chaude (>25°C).",
        'coconut_temp_low': "La température idéale pour la noix de coco est supérieure à 25°C.",
        'mothbeans_temp_low': "La température doit être supérieure à 22°C.",
        'mungbean_temp_low': "Le haricot mungo nécessite des conditions chaudes pour une croissance optimale.",
        'blackgram_temp_low': "La plage de température idéale est de 25–35°C.",
        'lentil_temp_low': "Les lentilles poussent bien entre 18 et 30°C.",
        'general_temp_low': "Conseil général : Les basses températures peuvent retarder la croissance. Envisagez des mesures de protection.",
        'general_temp_high': "Conseil général : Les températures élevées peuvent provoquer un stress thermique. Assurez un apport suffisant en eau et en ombre.",
        'wheat_hum_high': "Attention aux infections fongiques – assurez une bonne circulation de l'air.",
        'rice_hum_low': "Augmentez l'humidité ambiante ou utilisez du paillis.",
        'banana_hum_low': "La banane nécessite une humidité élevée. Envisagez la brumisation ou le paillage.",
        'grapes_hum_high': "Une humidité élevée peut entraîner des infections fongiques.",
        'coffee_hum_low': "Le café préfère une humidité élevée.",
        'orange_hum_high': "Taillez les arbres pour améliorer la circulation de l'air et prévenir les problèmes fongiques.",
        'general_hum_low': "Conseil général : Une faible humidité peut provoquer le flétrissement. Envisagez la brumisation ou l'augmentation de l'humidité du sol.",
        'general_hum_high': "Conseil général : Une humidité élevée augmente le risque de maladies fongiques. Assurez une bonne ventilation.",
        'wheat_ph_low': "Légèrement acide – envisagez d'appliquer de la chaux pour augmenter le pH.",
        'rice_ph_off': "Maintenez un sol légèrement acide pour le riz (pH 5.5–6.5).",
        'maize_ph_off': "Maintenez le pH du sol entre 5.8 et 7.0.",
        'papaya_ph_low': "Un sol légèrement acide à neutre est le meilleur pour la papaye.",
        'orange_ph_off': "Le pH idéal du sol pour l'orange est de 6.0 à 7.5.",
        'general_ph_very_low': "Conseil général : Le sol est trop acide. Appliquez de la chaux pour augmenter le pH et améliorer la disponibilité des nutriments.",
        'general_ph_very_high': "Conseil général : Le sol est trop alcalin. Appliquez du soufre ou de la matière organique pour diminuer le pH.",
        'general_ph_off': "Conseil général : La plage de pH optimale pour la plupart des cultures est de 5.5 à 7.5. Ajustez si nécessaire.",
        'wheat_light_low': "Assurez-vous que la culture reçoit suffisamment de lumière du soleil.",
        'rice_light_low': "Assurez-vous que le riz reçoit une exposition complète au soleil.",
        'general_light_low': "Conseil général : Une lumière insuffisante peut entraver la photosynthèse. Envisagez un éclairage supplémentaire ou une taille.",
        'general_light_high': "Conseil général : Une lumière excessive peut provoquer des brûlures. Envisagez l'ombrage pendant les heures de pointe."
    },
    'de': {  # German
        'no_data': "Keine Sensordaten verfügbar, um Ratschläge zu geben.",
        'npk_low': "🌱 **{nutrient} ist niedrig ({value:.1f})**: {message}",
        'npk_high': "🌱 **{nutrient} ist hoch ({value:.1f})**: {message}",
        'soil_moisture_low': "💧 **Bodenfeuchtigkeit niedrig ({sm:.1f}%)**: {message}",
        'soil_moisture_high': "💧 **Bodenfeuchtigkeit hoch ({sm:.1f}%)**: {message}",
        'temp_low': "🌡️ **Temperatur niedrig ({temp:.1f}°C)**: {message}",
        'temp_high': "🌡️ **Temperatur hoch ({temp:.1f}°C)**: {message}",
        'humidity_low': "💨 **Luftfeuchtigkeit niedrig ({hum:.1f}%)**: {message}",
        'humidity_high': "💨 **Luftfeuchtigkeit hoch ({hum:.1f}%)**: {message}",
        'ph_low': "🧪 **pH-Wert niedrig ({ph_val:.1f})**: {message}",
        'ph_high': "🧪 **pH-Wert hoch ({ph_val:.1f})**: {message}",
        'ph_off': "🧪 **pH-Wert nicht optimal ({ph_val:.1f})**: {message}",
        'light_low': "☀️ **Lichtintensität niedrig ({light:.1f} Lux)**: {message}",
        'light_high': "☀️ **Lichtintensität hoch ({light:.1f} Lux)**: {message}",
        'rainfall_low_msg': "🌧️ **Niederschlag niedrig ({rain:.1f} mm)**: {message}",
        'rainfall_high_msg': "🌧️ **Niederschlag hoch ({rain:.1f} mm)**: {message}",
        'all_good': "✅ Alle wichtigen Parameter sehen gut aus! Überwachen Sie regelmäßig für optimales Wachstum.",
        'npk_n_low': "Erwägen Sie die Anwendung von stickstoffreichem Dünger.",
        'npk_n_high': "Überschüssiger Stickstoff kann das Blattwachstum gegenüber der Frucht-/Blütenentwicklung fördern.",
        'npk_p_low': "Erwägen Sie die Anwendung von Phosphordünger für die Wurzelentwicklung.",
        'npk_p_high': "Hoher Phosphor kann andere Nährstoffe blockieren.",
        'npk_k_low': "Erwägen Sie die Anwendung von Kaliumdünger für die allgemeine Pflanzengesundheit und Fruchtqualität.",
        'npk_k_high': "Überschüssiges Kalium kann die Aufnahme von Kalzium und Magnesium beeinträchtigen.",
        'wheat_sm_low': "Leicht bewässern – Weizen benötigt 35–50% Bodenfeuchtigkeit.",
        'rice_sm_low': "Reis benötigt hohe Feuchtigkeit. Sorgen Sie für eine ordnungsgemäße Bewässerung.",
        'maize_sm_low': "Mais benötigt moderate Bodenfeuchtigkeitswerte.",
        'banana_sm_low': "Halten Sie den Boden für Bananen stets feucht.",
        'mango_sm_high': "Vermeiden Sie Staunässe. Mangos benötigen gut durchlässigen Boden.",
        'grapes_sm_high': "Trauben bevorzugen trockeneren Boden – vermeiden Sie Überwässerung.",
        'cotton_sm_low': "Baumwolle benötigt während der Blütezeit moderate Feuchtigkeit.",
        'millet_sorghum_sm_low': "Dies sind trockenheitstolerante Kulturen, benötigen aber dennoch minimale Feuchtigkeit.",
        'jute_sm_low': "Jute benötigt während des Wachstums reichlich Feuchtigkeit.",
        'pomegranate_sm_high': "Vermeiden Sie Überwässerung bei Granatäpfeln.",
        'melon_sm_low': "Melonen benötigen konstante Bewässerung, besonders während der Fruchtbildung.",
        'coconut_sm_low': "Kokospalmen benötigen hohe Feuchtigkeitswerte.",
        'mothbeans_sm_low': "Mothbohnen sind trockenheitstolerant, benötigen aber während der Blütezeit minimale Bewässerung.",
        'mungbean_sm_low': "Sorgen Sie für regelmäßige Bewässerung während der Blüte und Hülsenbildung.",
        'blackgram_sm_low': "Halten Sie die Feuchtigkeit besonders während der Blüte moderat.",
        'lentil_sm_low': "Linsen benötigen geringe bis moderate Feuchtigkeit.",
        'general_sm_low': "Allgemeiner Ratschlag: Erwägen Sie Bewässerung, um Trockenstress vorzubeugen.",
        'general_sm_high': "Allgemeiner Ratschlag: Sorgen Sie für eine gute Drainage, um Staunässe zu vermeiden.",
        'wheat_temp_high': "Schatten spenden oder abends bewässern – Temperatur ist zu hoch für Weizen.",
        'rice_temp_high': "Zu heiß für Reis. Erwägen Sie abendliche Bewässerung oder Schatten.",
        'maize_temp_low': "Mais bevorzugt warmes Wetter (20–30°C).",
        'banana_temp_low': "Banane ist kälteempfindlich – sorgen Sie für warme Bedingungen.",
        'mango_temp_low': "Mango benötigt wärmere Temperaturen (>20°C).",
        'cotton_temp_low': "Baumwolle gedeiht bei warmen Temperaturen.",
        'millet_sorghum_temp_low': "Warmes Klima ist ideal für Hirse/Sorghum.",
        'coffee_temp_low': "Kaffee gedeiht im Bereich von 18–24°C.",
        'jute_temp_low': "Jute wächst gut bei 25–30°C.",
        'papaya_temp_low': "Papaya bevorzugt den Bereich von 21–33°C.",
        'pomegranate_temp_low': "Ideale Temperatur liegt über 20°C.",
        'melon_temp_low': "Stellen Sie sicher, dass die Temperatur warm ist (>25°C).",
        'coconut_temp_low': "Ideale Temperatur für Kokosnuss liegt über 25°C.",
        'mothbeans_temp_low': "Die Temperatur sollte über 22°C liegen.",
        'mungbean_temp_low': "Mungbohnen benötigen warme Bedingungen für optimales Wachstum.",
        'blackgram_temp_low': "Der ideale Temperaturbereich liegt bei 25–35°C.",
        'lentil_temp_low': "Linsen wachsen gut bei 18–30°C.",
        'general_temp_low': "Allgemeiner Ratschlag: Kalte Temperaturen können das Wachstum hemmen. Erwägen Sie Schutzmaßnahmen.",
        'general_temp_high': "Allgemeiner Ratschlag: Hohe Temperaturen können Hitzestress verursachen. Sorgen Sie für ausreichend Wasser und Schatten.",
        'wheat_hum_high': "Achten Sie auf Pilzinfektionen – sorgen Sie für Luftzirkulation.",
        'rice_hum_low': "Erhöhen Sie die Umgebungsfeuchtigkeit oder verwenden Sie Mulch.",
        'banana_hum_low': "Banane benötigt hohe Luftfeuchtigkeit. Erwägen Sie Besprühen oder Mulchen.",
        'grapes_hum_high': "Hohe Luftfeuchtigkeit kann zu Pilzinfektionen führen.",
        'coffee_hum_low': "Kaffee bevorzugt hohe Luftfeuchtigkeit.",
        'orange_hum_high': "Beschneiden Sie Bäume, um die Luftzirkulation zu verbessern und Pilzprobleme zu vermeiden.",
        'general_hum_low': "Allgemeiner Ratschlag: Geringe Luftfeuchtigkeit kann Welken verursachen. Erwägen Sie Besprühen oder Erhöhung der Bodenfeuchtigkeit.",
        'general_hum_high': "Allgemeiner Ratschlag: Hohe Luftfeuchtigkeit erhöht das Risiko von Pilzkrankheiten. Sorgen Sie für gute Belüftung.",
        'wheat_ph_low': "Leicht sauer – erwägen Sie die Anwendung von Kalk, um den pH-Wert zu erhöhen.",
        'rice_ph_off': "Halten Sie den Boden für Reis leicht sauer (pH 5.5–6.5).",
        'maize_ph_off': "Halten Sie den Boden-pH-Wert zwischen 5.8–7.0.",
        'papaya_ph_low': "Leicht saurer bis neutraler Boden ist am besten für Papaya.",
        'orange_ph_off': "Der ideale Boden-pH-Wert für Orangen liegt bei 6.0–7.5.",
        'general_ph_very_low': "Allgemeiner Ratschlag: Der Boden ist zu sauer. Wenden Sie Kalk an, um den pH-Wert zu erhöhen und die Nährstoffverfügbarkeit zu verbessern.",
        'general_ph_very_high': "Allgemeiner Ratschlag: Der Boden ist zu alkalisch. Wenden Sie Schwefel oder organische Substanz an, um den pH-Wert zu senken.",
        'general_ph_off': "Allgemeiner Ratschlag: Der optimale pH-Bereich für die meisten Kulturen liegt bei 5.5-7.5. Passen Sie ihn bei Bedarf an.",
        'wheat_light_low': "Stellen Sie sicher, dass die Ernte ausreichend Sonnenlicht erhält.",
        'rice_light_low': "Stellen Sie sicher, dass Reis volle Sonneneinstrahlung erhält.",
        'general_light_low': "Allgemeiner Ratschlag: Unzureichendes Licht kann die Photosynthese behindern. Erwägen Sie zusätzliche Beleuchtung oder Beschneidung.",
        'general_light_high': "Allgemeiner Ratschlag: Übermäßiges Licht kann Verbrennungen verursachen. Erwägen Sie Beschattung während der Spitzenzeiten."
    },
    'ar': {  # Arabic (Example, requires more detailed translation)
        'no_data': "لا توجد بيانات مستشعر متاحة لتقديم المشورة.",
        'npk_low': "🌱 **{nutrient} منخفض ({value:.1f})**: {message}",
        'npk_high': "🌱 **{nutrient} مرتفع ({value:.1f})**: {message}",
        'soil_moisture_low': "💧 **رطوبة التربة منخفضة ({sm:.1f}%)**: {message}",
        'soil_moisture_high': "💧 **رطوبة التربة مرتفعة ({sm:.1f}%)**: {message}",
        'temp_low': "🌡️ **درجة الحرارة منخفضة ({temp:.1f}°C)**: {message}",
        'temp_high': "🌡️ **درجة الحرارة مرتفعة ({temp:.1f}°C)**: {message}",
        'humidity_low': "💨 **الرطوبة منخفضة ({hum:.1f}%)**: {message}",
        'humidity_high': "💨 **الرطوبة مرتفعة ({hum:.1f}%)**: {message}",
        'ph_low': "🧪 **الرقم الهيدروجيني منخفض ({ph_val:.1f})**: {message}",
        'ph_high': "🧪 **الرقم الهيدروجيني مرتفع ({ph_val:.1f})**: {message}",
        'ph_off': "🧪 **الرقم الهيدروجيني غير صحيح ({ph_val:.1f})**: {message}",
        'light_low': "☀️ **شدة الإضاءة منخفضة ({light:.1f} لوكس)**: {message}",
        'light_high': "☀️ **شدة الإضاءة مرتفعة ({light:.1f} لوكس)**: {message}",
        'rainfall_low_msg': "🌧️ **هطول الأمطار منخفض ({rain:.1f} مم)**: {message}",
        'rainfall_high_msg': "🌧️ **هطول الأمطار مرتفع ({rain:.1f} مم)**: {message}",
        'all_good': "✅ جميع المعلمات الرئيسية تبدو جيدة! استمر في المراقبة بانتظام للنمو الأمثل.",
        'npk_n_low': "فكر في استخدام سماد غني بالنيتروجين.",
        'npk_n_high': "النيتروجين الزائد يمكن أن يعزز نمو الأوراق على حساب نمو الفاكهة/الزهور.",
        'npk_p_low': "فكر في استخدام سماد الفوسفور لتنمية الجذور.",
        'npk_p_high': "الفوسفور العالي يمكن أن يمنع امتصاص العناصر الغذائية الأخرى.",
        'npk_k_low': "فكر في استخدام سماد البوتاسيوم لصحة النبات بشكل عام وجودة الفاكهة.",
        'npk_k_high': "البوتاسيوم الزائد يمكن أن يتداخل مع امتصاص الكالسيوم والمغنيسيوم.",
        'wheat_sm_low': "الري الخفيف – القمح يحتاج إلى 35-50% رطوبة التربة.",
        'rice_sm_low': "الأرز يحتاج إلى رطوبة عالية. تأكد من الري المناسب.",
        'maize_sm_low': "الذرة تحتاج إلى مستويات رطوبة تربة معتدلة.",
        'banana_sm_low': "حافظ على رطوبة التربة باستمرار للموز.",
        'mango_sm_high': "تجنب تشبع التربة بالماء. المانجو يحتاج إلى تربة جيدة التصريف.",
        'grapes_sm_high': "العنب يفضل التربة الأكثر جفافاً – تجنب الإفراط في الري.",
        'cotton_sm_low': "القطن يتطلب رطوبة معتدلة أثناء الإزهار.",
        'millet_sorghum_sm_low': "هذه محاصيل مقاومة للجفاف ولكنها لا تزال بحاجة إلى الحد الأدنى من الرطوبة.",
        'jute_sm_low': "الجوت يتطلب رطوبة وفيرة أثناء النمو.",
        'pomegranate_sm_high': "تجنب الإفراط في ري الرمان.",
        'melon_sm_low': "البطيخ يحتاج إلى ري مستمر، خاصة أثناء الإثمار.",
        'coconut_sm_low': "أشجار النخيل تحتاج إلى مستويات رطوبة عالية.",
        'mothbeans_sm_low': "المحاصيل البقولية مقاومة للجفاف ولكنها تحتاج إلى الحد الأدنى من الري أثناء الإزهار.",
        'mungbean_sm_low': "تأكد من الري المنتظم أثناء الإزهار وتكوين القرون.",
        'blackgram_sm_low': "حافظ على رطوبة معتدلة خاصة أثناء الإزهار.",
        'lentil_sm_low': "العدس ينمو جيدًا في 18-30 درجة مئوية.",
        'general_sm_low': "نصيحة عامة: فكر في الري لمنع إجهاد الجفاف.",
        'general_sm_high': "نصيحة عامة: تأكد من التصريف الجيد لمنع تشبع التربة بالماء.",
        'wheat_temp_high': "وفر الظل أو الري في المساء – درجة الحرارة مرتفعة جدًا للقمح.",
        'rice_temp_high': "ساخن جدًا للأرز. فكر في الري المسائي أو الظل.",
        'maize_temp_low': "الذرة تفضل الطقس الدافئ (20-30 درجة مئوية).",
        'banana_temp_low': "الموز حساس للبرد – تأكد من توفر ظروف دافئة.",
        'mango_temp_low': "المانجو يتطلب درجات حرارة أكثر دفئًا (>20 درجة مئوية).",
        'cotton_temp_low': "القطن يزدهر في درجات الحرارة الدافئة.",
        'millet_sorghum_temp_low': "المناخ الدافئ مثالي للدخن/الذرة الرفيعة.",
        'coffee_temp_low': "القهوة تزدهر في نطاق 18-24 درجة مئوية.",
        'jute_temp_low': "الجوت ينمو جيدًا في 25-30 درجة مئوية.",
        'papaya_temp_low': "البابايا تفضل نطاق 21-33 درجة مئوية.",
        'pomegranate_temp_low': "درجة الحرارة المثالية أعلى من 20 درجة مئوية.",
        'melon_temp_low': "تأكد من أن درجة الحرارة دافئة (>25 درجة مئوية).",
        'coconut_temp_low': "درجة الحرارة المثالية لجوز الهند أعلى من 25 درجة مئوية.",
        'mothbeans_temp_low': "يجب أن تكون درجة الحرارة أعلى من 22 درجة مئوية.",
        'mungbean_temp_low': "المحاصيل البقولية تحتاج إلى ظروف دافئة للنمو الأمثل.",
        'blackgram_temp_low': "نطاق درجة الحرارة المثالي هو 25-35 درجة مئوية.",
        'lentil_temp_low': "العدس ينمو جيدًا في 18-30 درجة مئوية.",
        'general_temp_low': "نصيحة عامة: درجات الحرارة المنخفضة يمكن أن تعيق النمو. فكر في تدابير وقائية.",
        'general_temp_high': "نصيحة عامة: درجات الحرارة المرتفعة يمكن أن تسبب إجهادًا حراريًا. تأكد من توفر الماء والظل الكافيين.",
        'wheat_hum_high': "احذر من الالتهابات الفطرية – تأكد من تدفق الهواء.",
        'rice_hum_low': "زيادة الرطوبة المحيطة أو استخدام النشارة.",
        'banana_hum_low': "الموز يتطلب رطوبة عالية. فكر في الرش أو التغطية بالنشارة.",
        'grapes_hum_high': "الرطوبة العالية قد تؤدي إلى التهابات فطرية.",
        'coffee_hum_low': "القهوة تفضل الرطوبة العالية.",
        'orange_hum_high': "تقليم الأشجار لتحسين تدفق الهواء ومنع مشاكل الفطريات.",
        'general_hum_low': "نصيحة عامة: الرطوبة المنخفضة يمكن أن تسبب الذبول. فكر في الرش أو زيادة رطوبة التربة.",
        'general_hum_high': "نصيحة عامة: الرطوبة العالية تزيد من خطر الأمراض الفطرية. تأكد من التهوية الجيدة.",
        'wheat_ph_low': "حمضي قليلاً – فكر في استخدام الجير لرفع الرقم الهيدروجيني.",
        'rice_ph_off': "حافظ على تربة حمضية قليلاً للأرز (الرقم الهيدروجيني 5.5-6.5).",
        'maize_ph_off': "حافظ على الرقم الهيدروجيني للتربة بين 5.8-7.0.",
        'papaya_ph_low': "التربة الحمضية قليلاً إلى المحايدة هي الأفضل للبابايا.",
        'orange_ph_off': "الرقم الهيدروجيني المثالي للتربة للبرتقال هو 6.0-7.5.",
        'general_ph_very_low': "نصيحة عامة: التربة شديدة الحموضة. استخدم الجير لزيادة الرقم الهيدروجيني وتحسين توافر المغذيات.",
        'general_ph_very_high': "نصيحة عامة: التربة شديدة القلوية. استخدم الكبريت أو المواد العضوية لتقليل الرقم الهيدروجيني.",
        'general_ph_off': "نصيحة عامة: نطاق الرقم الهيدروجيني الأمثل لمعظم المحاصيل هو 5.5-7.5. اضبط حسب الحاجة."
    },
    'ja': {  # Japanese (Example)
        'no_data': "アドバイスを提供するためのセンサーデータがありません。",
        'npk_low': "🌱 **{nutrient}が低い ({value:.1f})**: {message}",
        'npk_high': "🌱 **{nutrient}が高い ({value:.1f})**: {message}",
        'soil_moisture_low': "💧 **土壌水分が低い ({sm:.1f}%)**: {message}",
        'soil_moisture_high': "💧 **土壌水分が高い ({sm:.1f}%)**: {message}",
        'temp_low': "🌡️ **温度が低い ({temp:.1f}°C)**: {message}",
        'temp_high': "🌡️ **温度が高い ({temp:.1f}°C)**: {message}",
        'humidity_low': "💨 **湿度が低い ({hum:.1f}%)**: {message}",
        'humidity_high': "💨 **湿度が高い ({hum:.1f}%)**: {message}",
        'ph_low': "🧪 **pHが低い ({ph_val:.1f})**: {message}",
        'ph_high': "🧪 **pHが高い ({ph_val:.1f})**: {message}",
        'ph_off': "🧪 **pHが適切ではありません ({ph_val:.1f})**: {message}",
        'light_low': "☀️ **光強度が低い ({light:.1f} ルクス)**: {message}",
        'light_high': "☀️ **光強度が高い ({light:.1f} ルクス)**: {message}",
        'rainfall_low_msg': "🌧️ **降水量が少ない ({rain:.1f} mm)**: {message}",
        'rainfall_high_msg': "🌧️ **降水量が多い ({rain:.1f} mm)**: {message}",
        'all_good': "✅ すべての主要なパラメーターは良好です！最適な成長のために定期的に監視を続けてください。",
        'npk_n_low': "窒素が豊富な肥料の施用を検討してください。",
        'npk_n_high': "過剰な窒素は、果実/花の成長よりも葉の成長を促進する可能性があります。",
        'npk_p_low': "根の発育のためにリン酸肥料の施用を検討してください。",
        'npk_p_high': "リン酸が高いと他の栄養素が吸収されにくくなることがあります。",
        'npk_k_low': "植物全体の健康と果実の品質のためにカリウム肥料の施用を検討してください。",
        'npk_k_high': "過剰なカリウムは、カルシウムとマグネシウムの吸収を妨げる可能性があります。",
        'wheat_sm_low': "軽く灌漑してください – 小麦は35-50%の土壌水分が必要です。",
        'rice_sm_low': "イネは高い水分が必要です。適切な灌漑を確保してください。",
        'maize_sm_low': "トウモロコシは中程度の土壌水分レベルが必要です。",
        'banana_sm_low': "バナナには土壌を常に湿らせておいてください。",
        'mango_sm_high': "水浸しを避けてください。マンゴーは水はけの良い土壌が必要です。",
        'grapes_sm_high': "ブドウは乾燥した土壌を好みます – 水のやりすぎを避けてください。",
        'cotton_sm_low': "綿は開花中に中程度の水分が必要です。",
        'millet_sorghum_sm_low': "これらは干ばつに強い作物ですが、それでも最小限の水分が必要です。",
        'jute_sm_low': "ジュートは成長中に十分な水分が必要です。",
        'pomegranate_sm_high': "ザクロの水のやりすぎを避けてください。",
        'melon_sm_low': "メロンは、特に結実中に継続的な水やりが必要です。",
        'coconut_sm_low': "ココヤシは高い水分レベルが必要です。",
        'mothbeans_sm_low': "モース豆は干ばつに強いですが、開花中に最小限の灌漑が必要です。",
        'mungbean_sm_low': "開花および莢形成中に定期的な灌漑を確保してください。",
        'blackgram_sm_low': "特に開花中に中程度の水分を維持してください。",
        'lentil_sm_low': "レンズ豆は低から中程度の水分が必要です。",
        'general_sm_low': "一般的なアドバイス：干ばつストレスを防ぐために灌漑を検討してください。",
        'general_sm_high': "一般的なアドバイス：水浸しを防ぐために良好な排水を確保してください。",
        'wheat_temp_high': "日陰を提供するか、夕方に灌漑してください – 小麦には温度が高すぎます。",
        'rice_temp_high': "イネには暑すぎます。夕方の灌漑または日陰を検討してください。",
        'maize_temp_low': "トウモロコシは暖かい気候（20-30°C）を好みます。",
        'banana_temp_low': "バナナは寒さに敏感です – 暖かい条件を確保してください。",
        'mango_temp_low': "マンゴーはより暖かい温度（>20°C）が必要です。",
        'cotton_temp_low': "綿は暖かい温度で生育します。",
        'millet_sorghum_temp_low': "暖かい気候はキビ/ソルガムに理想的です。",
        'coffee_temp_low': "コーヒーは18-24°Cの範囲で生育します。",
        'jute_temp_low': "ジュートは25-30°Cでよく育ちます。",
        'papaya_temp_low': "パパイヤは21-33°Cの範囲を好みます。",
        'pomegranate_temp_low': "理想的な温度は20°C以上です。",
        'melon_temp_low': "温度が暖かい（>25°C）ことを確認してください。",
        'coconut_temp_low': "ココナッツの理想的な温度は25°C以上です。",
        'mothbeans_temp_low': "温度は22°C以上である必要があります。",
        'mungbean_temp_low': "緑豆は最適な成長のために暖かい条件が必要です。",
        'blackgram_temp_low': "理想的な温度範囲は25-35°Cです。",
        'lentil_temp_low': "レンズ豆は18-30°Cでよく育ちます。",
        'general_temp_low': "一般的なアドバイス：低温は成長を妨げる可能性があります。保護対策を検討してください。",
        'general_temp_high': "一般的なアドバイス：高温は熱ストレスを引き起こす可能性があります。十分な水と日陰を確保してください。",
        'wheat_hum_high': "真菌感染症に注意してください – 空気循環を確保してください。",
        'rice_hum_low': "周囲の湿度を上げるか、マルチを使用してください。",
        'banana_hum_low': "バナナは高い湿度が必要です。ミストまたはマルチングを検討してください。",
        'grapes_hum_high': "高湿度は真菌感染症につながる可能性があります。",
        'coffee_hum_low': "コーヒーは高い湿度を好みます。",
        'orange_hum_high': "空気循環を改善し、真菌の問題を防ぐために木を剪定してください。",
        'general_hum_low': "一般的なアドバイス：低湿度はしおれを引き起こす可能性があります。ミストまたは土壌水分の増加を検討してください。",
        'general_hum_high': "一般的なアドバイス：高湿度は真菌性疾患のリスクを高めます。換気を良くしてください。",
        'wheat_ph_low': "わずかに酸性 – pHを上げるために石灰の施用を検討してください。",
        'rice_ph_off': "イネにはわずかに酸性の土壌を維持してください（pH 5.5-6.5）。",
        'maize_ph_off': "土壌pHを5.8-7.0の間に維持してください。",
        'papaya_ph_low': "パパイヤにはわずかに酸性から中性の土壌が最適です。",
        'orange_ph_off': "オレンジの理想的な土壌pHは6.0-7.5です。",
        'general_ph_very_low': "一般的なアドバイス：土壌が酸性すぎます。pHを上げ、栄養素の利用可能性を改善するために石灰を施用してください。",
        'general_ph_very_high': "一般的なアドバイス：土壌がアルカリ性すぎます。pHを下げるために硫黄または有機物を施用してください。",
        'general_ph_off': "一般的なアドバイス：ほとんどの作物にとって最適なpH範囲は5.5-7.5です。必要に応じて調整してください。"
    },
    'bn': {  # Bengali
        'no_data': "কোনো সেন্সর ডেটা উপলব্ধ নেই।",
        'npk_low': "🌱 **{nutrient} কম আছে ({value:.1f})**: {message}",
        'npk_high': "🌱 **{nutrient} বেশি আছে ({value:.1f})**: {message}",
        'soil_moisture_low': "💧 **মাটির আর্দ্রতা কম ({sm:.1f}%)**: {message}",
        'soil_moisture_high': "💧 **মাটির আর্দ্রতা বেশি ({sm:.1f}%)**: {message}",
        'temp_low': "🌡️ **তাপমাত্রা কম ({temp:.1f}°C)**: {message}",
        'temp_high': "🌡️ **তাপমাত্রা বেশি ({temp:.1f}°C)**: {message}",
        'humidity_low': "💨 **আর্দ্রতা কম ({hum:.1f}%)**: {message}",
        'humidity_high': "💨 **আর্দ্রতা বেশি ({hum:.1f}%)**: {message}",
        'ph_low': "🧪 **pH কম ({ph_val:.1f})**: {message}",
        'ph_high': "🧪 **pH বেশি ({ph_val:.1f})**: {message}",
        'ph_off': "🧪 **pH সঠিক নয় ({ph_val:.1f})**: {message}",
        'light_low': "☀️ **আলোর তীব্রতা কম ({light:.1f} lux)**: {message}",
        'light_high': "☀️ **আলোর তীব্রতা বেশি ({light:.1f} lux)**: {message}",
        'rainfall_low_msg': "🌧️ **বৃষ্টিপাত কম ({rain:.1f} মিমি)**: {message}",
        'rainfall_high_msg': "🌧️ **বৃষ্টিপাত বেশি ({rain:.1f} মিমি)**: {message}",
        'all_good': "✅ সমস্ত প্রধান পরামিতি ভালো দেখাচ্ছে! সর্বোত্তম বৃদ্ধির জন্য নিয়মিত পর্যবেক্ষণ চালিয়ে যান।",
        'npk_n_low': "নাইট্রোজেন সমৃদ্ধ সার প্রয়োগের কথা বিবেচনা করুন।",
        'npk_n_high': "অতিরিক্ত নাইট্রোজেন ফল/ফুলের বিকাশের চেয়ে পাতার বৃদ্ধিকে উৎসাহিত করতে পারে।",
        'npk_p_low': "মূল বিকাশের জন্য ফসফরাস সার প্রয়োগের কথা বিবেচনা করুন।",
        'npk_p_high': "উচ্চ ফসফরাস অন্যান্য পুষ্টি উপাদানকে আবদ্ধ করতে পারে।",
        'npk_k_low': "সামগ্রিক গাছের স্বাস্থ্য এবং ফলের গুণমানের জন্য পটাশিয়াম সার প্রয়োগের কথা বিবেচনা করুন।",
        'npk_k_high': "অতিরিক্ত পটাশিয়াম ক্যালসিয়াম এবং ম্যাগনেসিয়ামের শোষণে হস্তক্ষেপ করতে পারে।",
        'wheat_sm_low': "হালকা সেচ দিন – গমের জন্য ৩৫-৫০% মাটির আর্দ্রতা প্রয়োজন।",
        'rice_sm_low': "ধানের জন্য উচ্চ আর্দ্রতা প্রয়োজন। সঠিক সেচ নিশ্চিত করুন।",
        'maize_sm_low': "ভূট্টার জন্য মাঝারি মাটির আর্দ্রতা স্তর প্রয়োজন।",
        'banana_sm_low': "কলার জন্য মাটি consistently moist রাখুন।",
        'mango_sm_high': "জল জমে যাওয়া এড়িয়ে চলুন। আমের জন্য ভালো নিষ্কাশনযুক্ত মাটি প্রয়োজন।",
        'grapes_sm_high': "আঙ্গুর শুষ্ক মাটি পছন্দ করে – অতিরিক্ত জল দেওয়া এড়িয়ে চলুন।",
        'cotton_sm_low': "তুলা ফুল ফোটার সময় মাঝারি আর্দ্রতা প্রয়োজন।",
        'millet_sorghum_sm_low': "এগুলি খরা-প্রতিরোধী ফসল তবে ন্যূনতম আর্দ্রতা প্রয়োজন।",
        'jute_sm_low': "পাটের বৃদ্ধির সময় প্রচুর আর্দ্রতা প্রয়োজন।",
        'pomegranate_sm_high': "ডালিমের অতিরিক্ত জল দেওয়া এড়িয়ে চলুন।",
        'melon_sm_low': "তরমুজের জন্য নিয়মিত জল দেওয়া প্রয়োজন, বিশেষ করে ফল ধরার সময়।",
        'coconut_sm_low': "নারকেল গাছের জন্য উচ্চ আর্দ্রতা স্তর প্রয়োজন।",
        'mothbeans_sm_low': "মোথবীন খরা-সহনশীল তবে ফুল ফোটার সময় ন্যূনতম সেচ প্রয়োজন।",
        'mungbean_sm_low': "ফুল ফোটা এবং শুঁটি গঠনের সময় নিয়মিত সেচ নিশ্চিত করুন।",
        'blackgram_sm_low': "বিশেষ করে ফুল ফোটার সময় মাঝারি আর্দ্রতা বজায় রাখুন।",
        'lentil_sm_low': "মসুরের জন্য কম থেকে মাঝারি আর্দ্রতা প্রয়োজন।",
        'general_sm_low': "সাধারণ পরামর্শ: খরা চাপ প্রতিরোধের জন্য সেচ বিবেচনা করুন।",
        'general_sm_high': "সাধারণ পরামর্শ: জল জমে যাওয়া প্রতিরোধের জন্য ভালো নিষ্কাশন নিশ্চিত করুন।",
        'wheat_temp_high': "ছায়া প্রদান করুন বা সন্ধ্যায় সেচ দিন – গমের জন্য তাপমাত্রা খুব বেশি।",
        'rice_temp_high': "ধানের জন্য খুব গরম। সন্ধ্যায় সেচ বা ছায়া বিবেচনা করুন।",
        'maize_temp_low': "ভূট্টা উষ্ণ আবহাওয়া (২০-৩০°C) পছন্দ করে।",
        'banana_temp_low': "কলা ঠান্ডার প্রতি সংবেদনশীল – উষ্ণ অবস্থা নিশ্চিত করুন।",
        'mango_temp_low': "আমের জন্য উষ্ণ তাপমাত্রা (>২০°C) প্রয়োজন।",
        'cotton_temp_low': "তুলা উষ্ণ তাপমাত্রায় ভালো জন্মায়।",
        'millet_sorghum_temp_low': "উষ্ণ জলবায়ু বাজরা/জোয়ারের জন্য আদর্শ।",
        'coffee_temp_low': "কফি ১৮-২৪°C পরিসরে ভালো জন্মায়।",
        'jute_temp_low': "পাট ২৫-৩০°C এ ভালো জন্মায়।",
        'papaya_temp_low': "পেঁপে ২১-৩৩°C পরিসর পছন্দ করে।",
        'pomegranate_temp_low': "আদর্শ তাপমাত্রা ২০°C এর উপরে।",
        'melon_temp_low': "তাপমাত্রা উষ্ণ (>২৫°C) নিশ্চিত করুন।",
        'coconut_temp_low': "নারকেলের জন্য আদর্শ তাপমাত্রা ২৫°C এর উপরে।",
        'mothbeans_temp_low': "মোথবীন খরা-সহনশীল তবে ফুল ফোটার সময় ন্যূনতম সেচ প্রয়োজন।",
        'mungbean_temp_low': "মুগ ডালের সর্বোত্তম বৃদ্ধির জন্য উষ্ণ অবস্থার প্রয়োজন।",
        'blackgram_temp_low': "আদর্শ তাপমাত্রা পরিসর ২৫-৩৫°C।",
        'lentil_temp_low': "মসুর ১৮-৩০°C এ ভালো জন্মায়।",
        'general_temp_low': "সাধারণ পরামর্শ: ঠান্ডা তাপমাত্রা বৃদ্ধি ব্যাহত করতে পারে। সুরক্ষামূলক ব্যবস্থা বিবেচনা করুন।",
        'general_temp_high': "সাধারণ পরামর্শ: উচ্চ তাপমাত্রা তাপ চাপ সৃষ্টি করতে পারে। পর্যাপ্ত জল এবং ছায়া নিশ্চিত করুন।",
        'wheat_hum_high': "ছত্রাক সংক্রমণ থেকে সাবধান – বায়ু চলাচল নিশ্চিত করুন।",
        'rice_hum_low': "পরিবেষ্টিত আর্দ্রতা বাড়ান বা মালচ ব্যবহার করুন।",
        'banana_hum_low': "কলা উচ্চ আর্দ্রতা প্রয়োজন। কুয়াশা বা মালচিং বিবেচনা করুন।",
        'grapes_hum_high': "উচ্চ আর্দ্রতা ছত্রাক সংক্রমণের কারণ হতে পারে।",
        'coffee_hum_low': "কফি উচ্চ আর্দ্রতা পছন্দ করে।",
        'orange_hum_high': "বায়ু চলাচল উন্নত করতে এবং ছত্রাকজনিত সমস্যা প্রতিরোধের জন্য গাছ ছাঁটাই করুন।",
        'general_hum_low': "সাধারণ পরামর্শ: কম আর্দ্রতা শুকিয়ে যেতে পারে। কুয়াশা বা মাটির আর্দ্রতা বাড়ানোর কথা বিবেচনা করুন।",
        'general_hum_high': "সাধারণ পরামর্শ: উচ্চ আর্দ্রতা ছত্রাক রোগের ঝুঁকি বাড়ায়। ভালো বায়ুচলাচল নিশ্চিত করুন।",
        'wheat_ph_low': "সামান্য অম্লীয় – pH বাড়ানোর জন্য চুন প্রয়োগের কথা বিবেচনা করুন।",
        'rice_ph_off': "ধানের জন্য সামান্য অম্লীয় মাটি বজায় রাখুন (pH ৫.৫-৬.৫)।",
        'maize_ph_off': "মাটির pH ৫.৮-৭.০ এর মধ্যে বজায় রাখুন।",
        'papaya_ph_low': "পেঁপের জন্য সামান্য অম্লীয় থেকে নিরপেক্ষ মাটি সবচেয়ে ভালো।",
        'orange_ph_off': "কমলার জন্য আদর্শ মাটির pH ৬.০-৭.৫।",
        'general_ph_very_low': "সাধারণ পরামর্শ: মাটি খুব অম্লীয়। pH বাড়াতে এবং পুষ্টির প্রাপ্যতা উন্নত করতে চুন প্রয়োগ করুন।",
        'general_ph_very_high': "সাধারণ পরামর্শ: মাটি খুব ক্ষারীয়। pH কমাতে সালফার বা জৈব পদার্থ প্রয়োগ করুন।",
        'general_ph_off': "সাধারণ পরামর্শ: বেশিরভাগ ফসলের জন্য সর্বোত্তম pH পরিসর ৫.৫-৭.৫। প্রয়োজন অনুযায়ী সামঞ্জস্য করুন।"
    }
}

# Multilingual Seed Recommendation Messages
SEED_RECOMMENDATIONS_MESSAGES = {
    'en': {
        'intro': "Based on current conditions, you might consider: ",
        'outro': ". Please consult local agricultural experts for precise recommendations.",
        'acid_tolerant': "acid-tolerant crops like blueberries, potatoes, or specific rice varieties",
        'alkaline_tolerant': "alkaline-tolerant crops such as asparagus, spinach, or specific varieties of alfalfa",
        'neutral_ph': "a wide range of crops thrive in neutral to slightly acidic pH (5.5-7.5), including wheat, maize, and most vegetables",
        'heat_tolerant': "heat-tolerant crops like millet, sorghum, cotton, or some varieties of beans",
        'cold_hardy': "cold-hardy crops such as wheat (winter varieties), barley, oats, or peas",
        'warm_season': "warm-season crops like maize, rice (tropical), most vegetables, and fruits",
        'drought_resistant': "drought-resistant crops like millet, sorghum, chickpeas, or certain types of beans (e.g., mothbeans)",
        'water_loving': "water-loving crops such as rice, sugarcane, jute, or crops that tolerate temporary waterlogging",
        'moderate_rainfall': "crops suitable for moderate rainfall, including wheat, maize, and many vegetables",
        'very_dry': "very drought-tolerant crops (e.g., desert-adapted melons or some herbs)",
        'very_wet': "semi-aquatic crops or those highly tolerant to waterlogging (e.g., taro, some rice varieties if poorly drained)",
        'no_specific': "No specific recommendations, as current conditions are unusual or general."
    },
    'hi': {
        'intro': "वर्तमान परिस्थितियों के आधार पर, आप विचार कर सकते हैं: ",
        'outro': ". सटीक सिफारिशों के लिए कृपया स्थानीय कृषि विशेषज्ञों से सलाह लें।",
        'acid_tolerant': "अम्ल-सहिष्णु फसलें जैसे ब्लूबेरी, आलू, या चावल की विशिष्ट किस्में",
        'alkaline_tolerant': "क्षार-सहिष्णु फसलें जैसे शतावरी, पालक, या अल्फाल्फा की विशिष्ट किस्में",
        'neutral_ph': "गेहूं, मक्का, और अधिकांश सब्जियों सहित तटस्थ से थोड़े अम्लीय पीएच (5.5-7.5) में फसलों की एक विस्तृत श्रृंखला पनपती है",
        'heat_tolerant': "गर्मी-सहिष्णु फसलें जैसे बाजरा, ज्वार, कपास, या कुछ प्रकार की फलियां",
        'cold_hardy': "ठंड-सहिष्णु फसलें जैसे गेहूं (शीतकालीन किस्में), जौ, जई, या मटर",
        'warm_season': "गर्मियों की फसलें जैसे मक्का, चावल (उष्णकटिबंधीय), अधिकांश सब्जियां, और फल",
        'drought_resistant': "सूखे प्रतिरोधी फसलें जैसे बाजरा, ज्वार, चना, या कुछ प्रकार की फलियां (जैसे मोठबीन)",
        'water_loving': "पानी पसंद करने वाली फसलें जैसे चावल, गन्ना, जूट, या वे फसलें जो अस्थायी जलभराव को सहन करती हैं",
        'moderate_rainfall': "मध्यम वर्षा के लिए उपयुक्त फसलें, जिनमें गेहूं, मक्का, और कई सब्जियां शामिल हैं",
        'very_dry': "बहुत सूखा-सहिष्णु फसलें (जैसे रेगिस्तान-अनुकूलित तरबूज या कुछ जड़ी-बूटियाँ)",
        'very_wet': "अर्ध-जलीय फसलें या वे जो जलभराव के प्रति अत्यधिक सहिष्णु हैं (जैसे तारो, चावल की कुछ किस्में यदि खराब जल निकासी हो)",
        'no_specific': "कोई विशिष्ट सिफारिश नहीं, क्योंकि वर्तमान परिस्थितियाँ असामान्य या सामान्य हैं।"
    },
    'es': {  # Spanish
        'intro': "Basado en las condiciones actuales, podría considerar: ",
        'outro': ". Consulte a expertos agrícolas locales para recomendaciones precisas.",
        'acid_tolerant': "cultivos tolerantes a la acidez como arándanos, patatas o variedades específicas de arroz",
        'alkaline_tolerant': "cultivos tolerantes a la alcalinidad como espárragos, espinacas o variedades específicas de alfalfa",
        'neutral_ph': "una amplia gama de cultivos prosperan en pH neutro a ligeramente ácido (5.5-7.5), incluyendo trigo, maíz y la mayoría de las verduras",
        'heat_tolerant': "cultivos tolerantes al calor como mijo, sorgo, algodón o algunas variedades de frijoles",
        'cold_hardy': "cultivos resistentes al frío como trigo (variedades de invierno), cebada, avena o guisantes",
        'warm_season': "cultivos de estación cálida como maíz, arroz (tropical), la mayoría de las verduras y frutas",
        'drought_resistant': "cultivos resistentes a la sequía como mijo, sorgo, garbanzos o ciertos tipos de frijoles (por ejemplo, frijoles polilla)",
        'water_loving': "cultivos amantes del agua como arroz, caña de azúcar, yute o cultivos que toleran el encharcamiento temporal",
        'moderate_rainfall': "cultivos adecuados para precipitaciones moderadas, incluyendo trigo, maíz y muchas verduras",
        'very_dry': "cultivos muy tolerantes a la sequía (por ejemplo, melones adaptados al desierto o algunas hierbas)",
        'very_wet': "cultivos semiacuáticos o aquellos altamente tolerantes al encharcamiento (por ejemplo, taro, algunas variedades de arroz si están mal drenadas)",
        'no_specific': "No hay recomendaciones específicas, ya que las condiciones actuales son inusuales o generales."
    },
    'fr': {  # French
        'intro': "En fonction des conditions actuelles, vous pourriez envisager : ",
        'outro': ". Veuillez consulter des experts agricoles locaux pour des recommandations précises.",
        'acid_tolerant': "cultures tolérantes à l'acidité comme les myrtilles, les pommes de terre ou des variétés spécifiques de riz",
        'alkaline_tolerant': "cultures tolérantes à l'alcalinité telles que les asperges, les épinards ou des variétés spécifiques de luzerne",
        'neutral_ph': "une large gamme de cultures prospèrent dans un pH neutre à légèrement acide (5.5-7.5), y compris le blé, le maïs et la plupart des légumes",
        'heat_tolerant': "cultures tolérantes à la chaleur comme le millet, le sorgho, le coton ou certaines variétés de haricots",
        'cold_hardy': "cultures résistantes au froid comme le blé (variétés d'hiver), l'orge, l'avoine ou les pois",
        'warm_season': "cultures de saison chaude comme le maïs, le riz (tropica), la plupart des légumes et des fruits",
        'drought_resistant': "cultures résistantes à la sécheresse comme le millet, le sorgho, les pois chiches ou certains types de haricots (par exemple, les haricots papillons)",
        'water_loving': "cultures aimant l'eau comme le riz, la canne à sucre, le jute ou les cultures qui tolèrent l'engorgement temporaire",
        'moderate_rainfall': "cultures adaptées aux précipitations modérées, y compris le blé, le maïs et de nombreux légumes",
        'very_dry': "cultures très tolérantes à la sécheresse (par exemple, les melons adaptés au désert ou certaines herbes)",
        'very_wet': "cultures semi-aquatiques ou celles très tolérantes à l'engorgement (par exemple, le taro, certaines variétés de riz si mal drainées)",
        'no_specific': "Aucune recommandation spécifique, car les conditions actuelles sont inhabituelles ou générales."
    },
    'de': {  # German
        'intro': "Basierend auf den aktuellen Bedingungen könnten Sie Folgendes in Betracht ziehen: ",
        'outro': ". Bitte konsultieren Sie lokale Landwirtschaftsexperten für präzise Empfehlungen.",
        'acid_tolerant': "säuretolerante Kulturen wie Heidelbeeren, Kartoffeln oder spezifische Reissorten",
        'alkalitolerante': "alkalitolerante Kulturen wie Spargel, Spinat oder spezifische Luzernesorten",
        'neutral_ph': "eine breite Palette von Kulturen gedeiht in neutralem bis leicht saurem pH-Wert (5.5-7.5), einschließlich Weizen, Mais und den meisten Gemüsesorten",
        'heat_tolerant': "hitzetolerante Kulturen wie Hirse, Sorghum, Baumwolle oder einige Bohnensorten",
        'cold_hardy': "kälteresistente Kulturen wie Weizen (Winter сорта), Gerste, Hafer oder Erbsen",
        'warm_season': "Warmwetterkulturen wie Mais, Reis (tropisch), die meisten Gemüsesorten und Früchte",
        'drought_resistant': "trockenheitsresistente Kulturen wie Hirse, Sorghum, Kichererbsen oder bestimmte Bohnensorten (z.B. Mothbohnen)",
        'water_loving': "wasserliebende Kulturen wie Reis, Zuckerrohr, Jute oder Kulturen, die vorübergehende Staunässe vertragen",
        'moderate_rainfall': "Kulturen, die für moderate Niederschläge geeignet sind, einschließlich Weizen, Mais und viele Gemüsesorten",
        'very_dry': "sehr trockenheitstolerante Kulturen (z.B. wüstenangepasste Melonen oder einige Kräuter)",
        'very_wet': "semi-aquatische Kulturen oder solche, die sehr tolerant gegenüber Staunässe sind (z.B. Taro, einige Reissorten bei schlechter Drainage)",
        'no_specific': "Keine spezifischen Empfehlungen, da die aktuellen Bedingungen ungewöhnlich oder allgemein sind."
    },
    'ar': {  # Arabic (Example, requires more detailed translation)
        'no_data': "لا توجد بيانات مستشعر متاحة لتقديم المشورة.",
        'npk_low': "🌱 **{nutrient} منخفض ({value:.1f})**: {message}",
        'npk_high': "🌱 **{nutrient} مرتفع ({value:.1f})**: {message}",
        'soil_moisture_low': "💧 **رطوبة التربة منخفضة ({sm:.1f}%)**: {message}",
        'soil_moisture_high': "💧 **رطوبة التربة مرتفعة ({sm:.1f}%)**: {message}",
        'temp_low': "🌡️ **درجة الحرارة منخفضة ({temp:.1f}°C)**: {message}",
        'temp_high': "🌡️ **درجة الحرارة مرتفعة ({temp:.1f}°C)**: {message}",
        'humidity_low': "💨 **الرطوبة منخفضة ({hum:.1f}%)**: {message}",
        'humidity_high': "💨 **الرطوبة مرتفعة ({hum:.1f}%)**: {message}",
        'ph_low': "🧪 **الرقم الهيدروجيني منخفض ({ph_val:.1f})**: {message}",
        'ph_high': "🧪 **الرقم الهيدروجيني مرتفع ({ph_val:.1f})**: {message}",
        'ph_off': "🧪 **الرقم الهيدروجيني غير صحيح ({ph_val:.1f})**: {message}",
        'light_low': "☀️ **شدة الإضاءة منخفضة ({light:.1f} لوكس)**: {message}",
        'light_high': "☀️ **شدة الإضاءة مرتفعة ({light:.1f} لوكس)**: {message}",
        'rainfall_low_msg': "🌧️ **هطول الأمطار منخفض ({rain:.1f} مم)**: {message}",
        'rainfall_high_msg': "🌧️ **هطول الأمطار مرتفع ({rain:.1f} مم)**: {message}",
        'all_good': "✅ جميع المعلمات الرئيسية تبدو جيدة! استمر في المراقبة بانتظام للنمو الأمثل.",
        'npk_n_low': "فكر في استخدام سماد غني بالنيتروجين.",
        'npk_n_high': "النيتروجين الزائد يمكن أن يعزز نمو الأوراق على حساب نمو الفاكهة/الزهور.",
        'npk_p_low': "فكر في استخدام سماد الفوسفور لتنمية الجذور.",
        'npk_p_high': "الفوسفور العالي يمكن أن يمنع امتصاص العناصر الغذائية الأخرى.",
        'npk_k_low': "فكر في استخدام سماد البوتاسيوم لصحة النبات بشكل عام وجودة الفاكهة.",
        'npk_k_high': "البوتاسيوم الزائد يمكن أن يتداخل مع امتصاص الكالسيوم والمغنيسيوم.",
        'wheat_sm_low': "الري الخفيف – القمح يحتاج إلى 35-50% رطوبة التربة.",
        'rice_sm_low': "الأرز يحتاج إلى رطوبة عالية. تأكد من الري المناسب.",
        'maize_sm_low': "الذرة تحتاج إلى مستويات رطوبة تربة معتدلة.",
        'banana_sm_low': "حافظ على رطوبة التربة باستمرار للموز.",
        'mango_sm_high': "تجنب تشبع التربة بالماء. المانجو يحتاج إلى تربة جيدة التصريف.",
        'grapes_sm_high': "العنب يفضل التربة الأكثر جفافاً – تجنب الإفراط في الري.",
        'cotton_sm_low': "القطن يتطلب رطوبة معتدلة أثناء الإزهار.",
        'millet_sorghum_sm_low': "هذه محاصيل مقاومة للجفاف ولكنها لا تزال بحاجة إلى الحد الأدنى من الرطوبة.",
        'jute_sm_low': "الجوت يتطلب رطوبة وفيرة أثناء النمو.",
        'pomegranate_sm_high': "تجنب الإفراط في ري الرمان.",
        'melon_sm_low': "البطيخ يحتاج إلى ري مستمر، خاصة أثناء الإثمار.",
        'coconut_sm_low': "أشجار النخيل تحتاج إلى مستويات رطوبة عالية.",
        'mothbeans_sm_low': "المحاصيل البقولية مقاومة للجفاف ولكنها تحتاج إلى الحد الأدنى من الري أثناء الإزهار.",
        'mungbean_sm_low': "تأكد من الري المنتظم أثناء الإزهار وتكوين القرون.",
        'blackgram_sm_low': "حافظ على رطوبة معتدلة خاصة أثناء الإزهار.",
        'lentil_sm_low': "العدس ينمو جيدًا في 18-30 درجة مئوية.",
        'general_sm_low': "نصيحة عامة: فكر في الري لمنع إجهاد الجفاف.",
        'general_sm_high': "نصيحة عامة: تأكد من التصريف الجيد لمنع تشبع التربة بالماء.",
        'wheat_temp_high': "وفر الظل أو الري في المساء – درجة الحرارة مرتفعة جدًا للقمح.",
        'rice_temp_high': "ساخن جدًا للأرز. فكر في الري المسائي أو الظل.",
        'maize_temp_low': "الذرة تفضل الطقس الدافئ (20-30 درجة مئوية).",
        'banana_temp_low': "الموز حساس للبرد – تأكد من توفر ظروف دافئة.",
        'mango_temp_low': "المانجو يتطلب درجات حرارة أكثر دفئًا (>20 درجة مئوية).",
        'cotton_temp_low': "القطن يزدهر في درجات الحرارة الدافئة.",
        'millet_sorghum_temp_low': "المناخ الدافئ مثالي للدخن/الذرة الرفيعة.",
        'coffee_temp_low': "القهوة تزدهر في نطاق 18-24 درجة مئوية.",
        'jute_temp_low': "الجوت ينمو جيدًا في 25-30 درجة مئوية.",
        'papaya_temp_low': "البابايا تفضل نطاق 21-33 درجة مئوية.",
        'pomegranate_temp_low': "درجة الحرارة المثالية أعلى من 20 درجة مئوية.",
        'melon_temp_low': "تأكد من أن درجة الحرارة دافئة (>25 درجة مئوية).",
        'coconut_temp_low': "درجة الحرارة المثالية لجوز الهند أعلى من 25 درجة مئوية.",
        'mothbeans_temp_low': "يجب أن تكون درجة الحرارة أعلى من 22 درجة مئوية.",
        'mungbean_temp_low': "المحاصيل البقولية تحتاج إلى ظروف دافئة للنمو الأمثل.",
        'blackgram_temp_low': "نطاق درجة الحرارة المثالي هو 25-35 درجة مئوية.",
        'lentil_temp_low': "العدس ينمو جيدًا في 18-30 درجة مئوية.",
        'general_temp_low': "نصيحة عامة: درجات الحرارة المنخفضة يمكن أن تعيق النمو. فكر في تدابير وقائية.",
        'general_temp_high': "نصيحة عامة: درجات الحرارة المرتفعة يمكن أن تسبب إجهادًا حراريًا. تأكد من توفر الماء والظل الكافيين.",
        'wheat_hum_high': "احذر من الالتهابات الفطرية – تأكد من تدفق الهواء.",
        'rice_hum_low': "زيادة الرطوبة المحيطة أو استخدام النشارة.",
        'banana_hum_low': "الموز يتطلب رطوبة عالية. فكر في الرش أو التغطية بالنشارة.",
        'grapes_hum_high': "الرطوبة العالية قد تؤدي إلى التهابات فطرية.",
        'coffee_hum_low': "القهوة تفضل الرطوبة العالية.",
        'orange_hum_high': "تقليم الأشجار لتحسين تدفق الهواء ومنع مشاكل الفطريات.",
        'general_hum_low': "نصيحة عامة: الرطوبة المنخفضة يمكن أن تسبب الذبول. فكر في الرش أو زيادة رطوبة التربة.",
        'general_hum_high': "نصيحة عامة: الرطوبة العالية تزيد من خطر الأمراض الفطرية. تأكد من التهوية الجيدة.",
        'wheat_ph_low': "حمضي قليلاً – فكر في استخدام الجير لرفع الرقم الهيدروجيني.",
        'rice_ph_off': "حافظ على تربة حمضية قليلاً للأرز (الرقم الهيدروجيني 5.5-6.5).",
        'maize_ph_off': "حافظ على الرقم الهيدروجيني للتربة بين 5.8-7.0.",
        'papaya_ph_low': "التربة الحمضية قليلاً إلى المحايدة هي الأفضل للبابايا.",
        'orange_ph_off': "الرقم الهيدروجيني المثالي للتربة للبرتقال هو 6.0-7.5.",
        'general_ph_very_low': "نصيحة عامة: التربة شديدة الحموضة. استخدم الجير لزيادة الرقم الهيدروجيني وتحسين توافر المغذيات.",
        'general_ph_very_high': "نصيحة عامة: التربة شديدة القلوية. استخدم الكبريت أو المواد العضوية لتقليل الرقم الهيدروجيني.",
        'general_ph_off': "نصيحة عامة: نطاق الرقم الهيدروجيني الأمثل لمعظم المحاصيل هو 5.5-7.5. اضبط حسب الحاجة."
    }
}

# Simulated growth stages and crop stages
growth_stages = ["Germination", "Vegetative", "Flowering", "Maturity", "Wilting", "Yellowing"]
CROP_STAGES = ['seed', 'sprout', 'vegetative', 'flowering', 'mature']

# --- Initialization Functions ---
def initialize_firebase():
    """Initializes Firebase Admin SDK."""
    global firebase_app, firebase_db_ref, firebase_camera_ref
    if firebase_admin._apps:  # Prevent double initialization
        firebase_app = firebase_admin.get_app()
        print("Firebase already initialized.")
        return

    firebase_key_b64 = os.getenv("FIREBASE_KEY_B64")
    firebase_cred_path = None
    try:
        if firebase_key_b64:
            decoded_json = base64.b64decode(firebase_key_b64).decode('utf-8')
            with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.json') as f:
                f.write(decoded_json)
            firebase_cred_path = f.name
            cred = credentials.Certificate(firebase_cred_path)
            print("Firebase credentials loaded from environment variable.")
        else:
            # Fallback for local development if environment variable is not set
            # IMPORTANT: For production, always use FIREBASE_KEY_B64
            # Make sure 'agriastrax-website-firebase-adminsdk-fbsvc-36cdff39c2.json' is in your project root
            # You might need to adjust this path if your service account key is elsewhere
            cred = credentials.Certificate("agriastrax-website-firebase-adminsdk-fbsvc-36cdff39c2.json")
            print("Firebase credentials loaded from local file (development fallback).")

        firebase_app = firebase_admin.initialize_app(cred, {
            'databaseURL': 'https://agriastrax-website-default-rtdb.firebaseio.com/'  # Replace with your actual Firebase DB URL
        })
        firebase_db_ref = db.reference('sensors/farm1')  # Path for sensor data
        firebase_camera_ref = db.reference('camera_feed/farm1')  # Path for camera feed
        print("Firebase initialized successfully and references obtained.")

    except Exception as e:
        print(f"❌ Firebase initialization failed: {e}")
        firebase_app = None
        firebase_db_ref = None
        firebase_camera_ref = None
    finally:
        if firebase_key_b64 and firebase_cred_path and os.path.exists(firebase_cred_path):
            try:
                os.remove(firebase_cred_path)
                print(f"Cleaned up temporary Firebase cred file: {firebase_cred_path}")
            except Exception as e_clean:
                print(f"Warning: Could not delete temporary Firebase cred file {firebase_cred_path}: {e_clean}")

def load_models_and_scalers():
    """Loads AI models, scalers, and crop encoders."""
    global model, input_scaler, output_scaler, crop_encoder, \
        market_price_model, market_crop_encoder, market_price_features, all_crop_labels

    # Load Crop Labels from CSV (for encoder fitting)
    try:
        # Assuming 'cleaned_sensor_data.csv' is available in the same directory as app.py
        crop_df_for_labels = pd.read_csv("cleaned_sensor_data.csv")
        all_crop_labels = sorted(crop_df_for_labels['label'].unique().tolist())
        crop_encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)
        crop_encoder.fit(np.array(all_crop_labels).reshape(-1, 1))
        market_crop_encoder = crop_encoder  # Use the same encoder for market price
        print(f"Crop labels loaded: {len(all_crop_labels)} unique crops found.")
    except FileNotFoundError:
        print("❌ 'cleaned_sensor_data.csv' not found. Crop labels and encoder will be limited or empty.")
        all_crop_labels = ["Wheat", "Rice", "Maize", "Banana", "Mango", "Grapes", "Cotton", "Millet", "Sorghum", "Coffee", "Jute", "Pomegranate", "Melon", "Coconut", "Mothbeans", "Mungbean", "Blackgram", "Lentil"]  # Default dummy crops
        crop_encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)
        # Fit with dummy labels if CSV not found, so encoder is usable
        if all_crop_labels:
            crop_encoder.fit(np.array(all_crop_labels).reshape(-1, 1))
        market_crop_encoder = crop_encoder
    except Exception as e:
        print(f"❌ Error loading 'cleaned_sensor_data.csv': {e}")
        all_crop_labels = ["Wheat", "Rice", "Maize", "Banana", "Mango", "Grapes", "Cotton", "Millet", "Sorghum", "Coffee", "Jute", "Pomegranate", "Melon", "Coconut", "Mothbeans", "Mungbean", "Blackgram", "Lentil"]  # Default dummy crops
        crop_encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)
        if all_crop_labels:
            crop_encoder.fit(np.array(all_crop_labels).reshape(-1, 1))
        market_crop_encoder = crop_encoder

    # Load AI Model
    try:
        model = tf.keras.models.load_model("tdann_pnsm_model.keras")  # Or 'models/growth_prediction_model.h5'
        print("AI model loaded successfully.")
    except Exception as e:
        print(f"❌ Error loading AI model: {e}")
        model = None

    # Load Scalers
    try:
        input_scaler = joblib.load('tdann_input_scaler.joblib')  # Or 'models/input_scaler.pkl'
        output_scaler = joblib.load('tdann_output_scaler.joblib')  # Or 'models/output_scaler.pkl'
        print("Input and Output scalers loaded successfully.")
    except FileNotFoundError:
        print("❌ Scaler files not found. Using newly initialized scalers. Predictions may be inaccurate.")
        input_scaler = MinMaxScaler()
        output_scaler = MinMaxScaler()
    except Exception as e:
        print(f"❌ Error loading scalers: {e}")
        input_scaler = MinMaxScaler()
        output_scaler = MinMaxScaler()

    # Market Price Predictor Setup (Simulated Training if no pre-trained model)
    try:
        # Attempt to load pre-trained market price model
        market_price_model = joblib.load('market_price_model.joblib')  # Or 'models/market_price_model.pkl'
        print("Market price prediction model loaded successfully.")
    except Exception as e:
        print(f"❌ Error loading market price model: {e}. Training a dummy model.")
        def generate_market_price_data(num_samples=1000):
            data = []
            crops = all_crop_labels if all_crop_labels else ['wheat', 'rice', 'maize']
            for _ in range(num_samples):
                crop_type = random.choice(crops)
                N = random.uniform(50, 150)
                P = random.uniform(20, 60)
                K = random.uniform(50, 200)
                temperature = random.uniform(20, 35)
                humidity = random.uniform(30, 80)
                soil_moisture = random.uniform(30, 70)
                light_intensity = random.uniform(300, 800)
                rainfall = random.uniform(0, 100)
                ph = random.uniform(5.5, 7.5)
                ds18b20_temperature = random.uniform(15, 40)  # New sensor data

                base_price = 100
                if crop_type == 'wheat':
                    price = base_price * 1.2
                elif crop_type == 'rice':
                    price = base_price * 1.5
                elif crop_type == 'maize':
                    price = base_price * 1.1
                else:
                    price = base_price * 1.0
                price += (N / 10) + (P / 5) + (K / 10)
                price += (temperature - 25) * 2
                price += (humidity - 50) * 1.5
                price += (soil_moisture - 50) * 0.5
                price += (light_intensity - 500) * 0.1
                price += (rainfall - 50) * 0.2
                price += (ph - 6.5) * 5
                price += (ds18b20_temperature - 25) * 1.0  # Factor in new temperature sensor
                price += random.uniform(-10, 10)
                price = max(50, price)
                data.append([N, P, K, temperature, humidity, soil_moisture, light_intensity, rainfall, ph, ds18b20_temperature, crop_type, price])
            df_prices = pd.DataFrame(data, columns=['N', 'P', 'K', 'temperature', 'humidity', 'soil_moisture', 'light_intensity', 'rainfall', 'ph', 'ds18b20_temperature', 'crop_type', 'price'])
            return df_prices

        df_prices = generate_market_price_data(num_samples=2000)
        # Add 'ds18b20_temperature' to the market_price_features
        market_price_features = ['N', 'P', 'K', 'temperature', 'humidity', 'soil_moisture', 'light_intensity', 'rainfall', 'ph', 'ds18b20_temperature']

        X_numerical = df_prices[market_price_features]
        # Ensure market_crop_encoder is fitted with all possible crop types
        if market_crop_encoder and not market_crop_encoder.categories_[0].tolist():
            market_crop_encoder.fit(np.array(df_prices['crop_type'].unique()).reshape(-1, 1))

        X_categorical = market_crop_encoder.transform(df_prices[['crop_type']])
        X_categorical_df = pd.DataFrame(X_categorical, columns=market_crop_encoder.get_feature_names_out(['crop_type']))

        X_train_market = pd.concat([X_numerical, X_categorical_df], axis=1)
        y_train_market = df_prices['price']

        market_price_model = LinearRegression()
        market_price_model.fit(X_train_market, y_train_market)
        print("Market price prediction model trained (simulated data).")


# --- Dummy Data Generation (for unavailable sensors and initial simulation) ---
def generate_dummy_sensor_data_values():
    """Generates dummy data for pH, NPK, Rainfall, DS18B20 Temperature, and other fields if not provided by ESP32."""
    return {
        "ph": round(random.uniform(5.5, 7.5), 2),
        "N": round(random.uniform(20, 100), 2),
        "P": round(random.uniform(10, 50), 2),
        "K": round(random.uniform(30, 120), 2),
        "rainfall": round(random.uniform(0, 10), 2),
        "ds18b20_temperature": round(random.uniform(15, 40), 2),  # New DS18B20 temperature sensor
        "crop_stage": random.choice(CROP_STAGES),
        "growth_factor": round(random.uniform(0.5, 1.5), 2)
    }

def generate_dummy_camera_data():
    """Generates dummy camera data for demonstration."""
    advisories = ["Healthy Growth", "Low Leaf Color Index", "Possible Disease Detected", "Needs Fertilizer", "Check Irrigation"]
    return {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "stage": random.choice(growth_stages),
        "alert": random.choice(advisories),
        "image_url": "https://placehold.co/150x150/E0E0E0/333333?text=Camera+Feed"  # Placeholder image
    }

def generate_dummy_weather_data():
    """Generates simulated weather data."""
    now = datetime.now()
    current_temp = round(random.uniform(20, 30), 1)
    current_humidity = random.randint(50, 80)
    wind_speed = random.randint(5, 20)

    forecast = []
    for i in range(3):  # Today, Tomorrow, Day after tomorrow
        day_offset = i
        day_name = (now + timedelta(days=day_offset)).strftime("%a")
        high_temp = round(random.uniform(current_temp + 2, current_temp + 8), 1)
        low_temp = round(random.uniform(current_temp - 8, current_temp - 2), 1)
        forecast.append({
            "day": "Today" if i == 0 else ("Tomorrow" if i == 1 else day_name),
            "high": high_temp,
            "low": low_temp
        })

    advisories = []
    if random.random() < 0.3:
        warnings = ["Heavy Rainfall expected tonight.", "High Wind Advisory issued.", "Frost warning for early morning.", "Heatwave alert."]
        advisories.append({"type": "warning", "message": random.choice(warnings)})
    if not advisories:
        advisories.append({"type": "info", "message": "No active advisories."})

    return {
        "current": {
            "temp": current_temp,
            "humidity": current_humidity,
            "wind": wind_speed,
            "timestamp": now.strftime("%H:%M")
        },
        "forecast": forecast,
        "advisories": advisories
    }

def generate_dummy_recent_events():
    """Generates simulated recent events."""
    events = [
        {"text": "Water detected in sector B", "time": "10:27 AM"},
        {"text": "Irrigation cycle completed", "time": "09:45 AM"},
        {"text": "Optimal light conditions detected", "time": "09:10 AM"},
        {"text": "Nutrient levels adjusted in field 1", "time": "Yesterday"},
        {"text": "Pest activity observed in north plot", "time": "2 days ago"},
        {"text": "Temperature spike recorded in greenhouse", "time": "3 days ago"},
    ]
    random.shuffle(events)  # Shuffle to make it seem dynamic
    return events[:random.randint(3, 6)]  # Return 3 to 6 random events

def generate_dummy_farm_health_data():
    """Generates simulated farm health index data."""
    overall_score = random.randint(60, 95)
    status = "Good"
    if overall_score < 75:
        status = "Fair"
    if overall_score < 60:
        status = "Poor"

    health_factors = {
        'soil-quality': random.randint(70, 98),
        'plant-health': random.randint(65, 95),
        'water-management': random.randint(60, 90),
        'pest-control': random.randint(60, 90),
        'environmental': random.randint(75, 98)
    }

    health_change = round(random.uniform(-5, 5), 0)

    return {
        "overallScore": overall_score,
        "status": status,
        "healthFactors": health_factors,
        "healthChange": health_change
    }

def generate_dummy_device_connectivity():
    """Generates simulated device connectivity data."""
    statuses = ['Online', 'Offline', 'Active', 'Inactive', 'Connected', 'Disconnected']

    # Ensure at least some connected status for cameras and soil sensors
    camera_connected_count = random.randint(0, 3)
    soil_online_status = 'All Online' if random.random() > 0.1 else 'Some Offline'

    return {
        "gateway": random.choice(['Online', 'Offline']),
        "irrigation": random.choice(['Active', 'Inactive']),
        "camera": f"{camera_connected_count}/3 Connected",
        "soil": soil_online_status
    }

def generate_dummy_pest_scan_results():
    """Generates simulated pest and disease scan results."""
    results = [
        {"status": "No threats detected. Your crops are healthy!", "type": "success", "details": []},
        {"status": "Minor pest activity detected in Sector C. Recommend localized treatment.", "type": "warning", "details": ["Aphids (low concentration)"]},
        {"status": "Disease detected in Field 2. Immediate action required.", "type": "error", "details": ["Fungal blight (moderate)", "Leaf spot (minor)"]},
        {"status": "Potential nutrient deficiency in Sector A. Further analysis recommended.", "type": "info", "details": ["Nitrogen deficiency (early stage)"]},
    ]
    return random.choice(results)

def generate_dummy_resource_consumption():
    """Generates simulated daily resource consumption data."""
    return {
        "water_used": random.randint(1500, 4000),  # Liters
        "energy_used": random.randint(30, 100),  # kWh
        "nutrients_applied": random.randint(2, 10)  # kg
    }


# --- Sensor Data Inserter and Camera Simulator Threads ---
def run_camera_simulator_thread():
    """Simulates camera feed data and pushes to Firebase."""
    print("Starting dummy camera feed simulation thread...")
    while True:
        if firebase_camera_ref:
            try:
                dummy_camera = generate_dummy_camera_data()
                firebase_camera_ref.push(dummy_camera)
                # print(f"Simulated Camera Data pushed to Firebase: {dummy_camera}") # Too verbose
                # Keep only the latest 10 camera entries for simplicity
                snapshots = firebase_camera_ref.order_by_child('timestamp').get()
                if snapshots and len(snapshots) > 10:
                    oldest_keys = sorted(snapshots.keys(), key=lambda k: snapshots[k]['timestamp'])
                    for i in range(len(oldest_keys) - 10):
                        firebase_camera_ref.child(oldest_keys[i]).delete()
            except Exception as e:
                print(f"❌ Error pushing camera data to Firebase: {e}")
        time.sleep(10)  # Generate every 10 seconds

def run_sensor_data_inserter_thread():
    """Inserts initial dummy sensor data and then simulates live updates to Firebase."""
    global simulation_mode  # Access the global variable for mode
    print("Starting sensor data inserter thread...")
    if firebase_db_ref is None:
        print("Firebase DB reference not initialized. Sensor data insertion will only print locally.")
        local_print_only = True
    else:
        local_print_only = False
        print("Connected to Firebase path for sensor data: sensors/farm1")

    # Insert 10 past samples (initial data generation is always full dummy for consistency)
    print("Inserting 10 enhanced dummy sensor readings with all features (for initial data)...")
    for i in range(10):
        sample_data = {
            'timestamp': (datetime.now() - timedelta(minutes=(10 - i) * 5)).isoformat(),
            'soil_moisture': round(random.uniform(20, 80), 2),
            'temperature': round(random.uniform(20, 40), 2),
            'humidity': round(random.uniform(30, 95), 2),
            'light_intensity': random.randint(200, 900),
            'ds18b20_temperature': round(random.uniform(15, 40), 2),
            **generate_dummy_sensor_data_values()  # Include all dummy NPK, pH, Rainfall, crop_stage, growth_factor
        }
        if not local_print_only:
            try:
                firebase_db_ref.push(sample_data)
            except Exception as e:
                print(f"❌ Error pushing initial sample data to Firebase: {e}. Falling back to local printing.")
                local_print_only = True
                print("Initial Sample Data (local print):", sample_data)
                break
        else:
            print("Initial Sample Data (local print):", sample_data)
    print("Successfully inserted 10 enhanced dummy sensor readings (if Firebase was available).")

    # Simulate live updates every 10s
    print("\nSimulating live sensor data updates. New data will be inserted every 10 seconds. Press Ctrl+C to stop.")
    while True:
        current_timestamp = datetime.now().isoformat()
        live_data = {}

        if simulation_mode:
            # Full dummy data generation (Code 1 style)
            live_data = {
                'timestamp': current_timestamp,
                'soil_moisture': round(random.uniform(20, 80), 2),
                'temperature': round(random.uniform(20, 40), 2),
                'humidity': round(random.uniform(30, 95), 2),
                'light_intensity': random.randint(200, 900),
                'ds18b20_temperature': round(random.uniform(15, 40), 2),
                "ph": round(random.uniform(4.0, 9.0), 2),
                "N": random.randint(0, 150),
                "P": random.randint(0, 70),
                "K": random.randint(0, 250),
                "rainfall": round(random.uniform(0, 250), 2),
                "crop_stage": random.choice(CROP_STAGES),
                "growth_factor": round(random.uniform(0.1, 1.2), 2)
            }
        else:
            # Semi-simulation (Code 2 style) - dummy for non-ESP32 sensors.
            # ESP32 sensors (temperature, humidity, soil_moisture, light_intensity, ds18b20_temperature)
            # will be generated as dummy by this thread, but the /api/sensor_data endpoint
            # is where *real* data for these would come from. The dashboard will always show
            # the latest data available in Firebase, regardless of its source.
            live_data = {
                'timestamp': current_timestamp,
                'soil_moisture': round(random.uniform(20, 60), 2),  # Still dummy for this thread's pushes
                'temperature': round(random.uniform(20, 40), 2),  # Still dummy for this thread's pushes
                'humidity': round(random.uniform(30, 95), 2),  # Still dummy for this thread's pushes
                'light_intensity': random.randint(200, 900),  # Still dummy for this thread's pushes
                'ds18b20_temperature': round(random.uniform(15, 40), 2),  # Still dummy for this thread's pushes
                **generate_dummy_sensor_data_values()  # Dummy for pH, NPK, Rainfall, crop_stage, growth_factor
            }

        if not local_print_only:
            try:
                firebase_db_ref.push(live_data)
            except Exception as e:
                print(f"❌ Error pushing real-time data to Firebase: {e}. Falling back to local printing.")
                local_print_only = True
                print("Live Sensor Data (local print):", live_data)
        else:
            print("Live Sensor Data (local print):", live_data)
        time.sleep(10)

# --- Helper Functions for Data Fetching and Processing ---

def get_latest_sensor_data():
    """Fetches the latest sensor data from Firebase, adding dummy values for missing fields."""
    if firebase_db_ref is None:
        print("Firebase DB reference not initialized. Cannot fetch sensor data.")
        return None

    try:
        latest_data_snapshot = firebase_db_ref.order_by_child('timestamp').limit_to_last(1).get()
        if not latest_data_snapshot:
            print("No sensor data found in Firebase. Generating dummy data for latest.")
            # Generate a full dummy entry if no data exists
            dummy_values = generate_dummy_sensor_data_values()
            return {
                "timestamp": datetime.now().isoformat(),
                "temperature": round(random.uniform(20, 30), 2),
                "humidity": round(random.uniform(50, 70), 2),
                "soil_moisture": round(random.uniform(40, 60), 2),
                "light_intensity": random.randint(5000, 10000),
                "ds18b20_temperature": round(random.uniform(15, 40), 2),  # Include DS18B20 temperature
                **dummy_values
            }

        latest_data = list(latest_data_snapshot.values())[0]

        # Ensure all expected fields are present, filling with dummy if missing
        expected_fields = ['temperature', 'humidity', 'soil_moisture', 'light_intensity', 'ds18b20_temperature',
                           'N', 'P', 'K', 'ph', 'rainfall', 'crop_stage', 'growth_factor']
        dummy_fill_values = generate_dummy_sensor_data_values()

        for field in expected_fields:
            if field not in latest_data or latest_data[field] is None:
                latest_data[field] = dummy_fill_values.get(field)  # Use dummy values for NPK, pH, Rainfall, DS18B20 Temp
            # Convert any numpy NaN values to None for proper JSON serialization
            if isinstance(latest_data[field], (np.float64, np.int64)) and np.isnan(latest_data[field]):
                latest_data[field] = None

        # Handle 'pH' column name consistency if it comes as 'pH' from Firebase
        if 'pH' in latest_data and 'ph' not in latest_data:
            latest_data['ph'] = latest_data['pH']
            del latest_data['pH']

        return latest_data
    except Exception as e:
        print(f"Error fetching latest sensor data from Firebase: {e}")
        # Fallback to full dummy data on error
        dummy_values = generate_dummy_sensor_data_values()
        return {
            "timestamp": datetime.now().isoformat(),
            "temperature": round(random.uniform(20, 30), 2),
            "humidity": round(random.uniform(50, 70), 2),
            "soil_moisture": round(random.uniform(40, 60), 2),
            "light_intensity": random.randint(5000, 10000),
            "ds18b20_temperature": round(random.uniform(15, 40), 2),  # Include DS18B20 temperature
            **dummy_values
        }

def get_historical_sensor_data(days=7):
    """Fetches historical sensor data from Firebase for the last 'days'."""
    if firebase_db_ref == None:
        print("Firebase DB reference not initialized. Cannot fetch historical sensor data.")
        return []
    try:
        start_time = (datetime.now() - timedelta(days=days)).isoformat()
        historical_data_snapshot = firebase_db_ref.order_by_child('timestamp').start_at(start_time).get()
        if not historical_data_snapshot:
            return []

        data_list = []
        for key, value in historical_data_snapshot.items():
            if isinstance(value, dict):
                # Ensure 'ph' consistency and fill missing values with dummy data
                if 'pH' in value and 'ph' not in value:
                    value['ph'] = value['pH']
                    del value['pH']

                dummy_fill_values = generate_dummy_sensor_data_values()
                for field in ['N', 'P', 'K', 'ph', 'rainfall', 'ds18b20_temperature', 'crop_stage', 'growth_factor']:
                    if field not in value or value[field] is None:
                        value[field] = dummy_fill_values.get(field)

                data_list.append(value)
            else:
                print(f"Skipping non-dict entry in Firebase historical data: {key}: {value}")

        df = pd.DataFrame(data_list)
        if df.empty:
            return []

        numeric_cols = ['N', 'P', 'K', 'ph', 'rainfall', 'temperature', 'humidity',
                        'soil_moisture', 'light_intensity', 'ds18b20_temperature', 'growth_factor']  # Added ds18b20_temperature
        for col in numeric_cols:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce')
            else:
                df[col] = np.nan  # Ensure column exists even if all NaNs

        df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')
        df = df.dropna(subset=['timestamp'])
        df = df.sort_values('timestamp').reset_index(drop=True)

        # Convert any numpy NaN values to None for proper JSON serialization later
        df = df.replace({np.nan: None})

        return df.to_dict(orient='records')
    except Exception as e:
        print(f"Error fetching historical sensor data from Firebase: {e}")
        return []

def fetch_camera_feed_data_backend():
    """Fetches the latest camera feed data (growth events) from Firebase Realtime Database."""
    if firebase_camera_ref is None:
        print("Firebase camera reference not initialized. Cannot fetch camera data.")
        return generate_dummy_camera_data()  # Fallback to dummy

    try:
        snapshot = firebase_camera_ref.order_by_child('timestamp').limit_to_last(1).get()
        if not snapshot:
            print("No camera data found in Firebase. Returning dummy data.")
            return generate_dummy_camera_data()

        latest_camera_entry = list(snapshot.values())[0]
        return latest_camera_entry
    except Exception as e:
        print(f"Error fetching camera feed data from Firebase: {e}")
        return generate_dummy_camera_data()  # Fallback to dummy on error

def predict_growth_backend(historical_df, selected_crop_type):
    """
    Predicts soil moisture, light intensity, and nutrient sum using the loaded AI model.
    Assumes the model was trained with specific input features and multiple outputs (time-series).
    """
    if model is None or input_scaler is None or output_scaler is None or crop_encoder is None:
        return None, None, None, "AI model, scalers, or encoder not loaded."

    LOOKBACK_WINDOW = 5  # As per original code 1's TDANN model expectation

    # IMPORTANT: The pre-trained input_scaler expects a specific number of features.
    # If 'ds18b20_temperature' was not part of the original training data for the TDANN model,
    # including it here will cause a feature mismatch (e.g., 31 features instead of 30).
    # Assuming the loaded 'tdann_input_scaler.joblib' expects 30 features,
    # we exclude 'ds18b20_temperature' from the features for growth prediction.
    base_sensor_features = ['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall']
    biological_features = ['growth_factor']  # Included in Code 1's TDANN input

    # Combine all features expected by the TDANN model
    all_tdann_input_features = base_sensor_features + biological_features

    # Ensure historical_df has all necessary columns, fill missing with dummy values
    df_for_prediction = historical_df.copy()
    dummy_values = generate_dummy_sensor_data_values()
    for col in all_tdann_input_features:
        if col not in df_for_prediction.columns or df_for_prediction[col].isnull().all():
            # If column is entirely missing or all NaN, fill with a sensible dummy
            df_for_prediction[col] = dummy_values.get(col, 0)  # Default to 0 if no specific dummy
        df_for_prediction[col] = pd.to_numeric(df_for_prediction[col], errors='coerce').fillna(dummy_values.get(col, 0))  # Ensure numeric and fill any remaining NaNs

    processed_data_for_prediction = df_for_prediction[all_tdann_input_features].tail(LOOKBACK_WINDOW)

    # Fill any remaining NaNs (e.g., if only part of the tail has NaNs)
    processed_data_for_prediction = processed_data_for_prediction.fillna(method='ffill').fillna(method='bfill').fillna(0)


    if len(processed_data_for_prediction) < LOOKBACK_WINDOW:
        return None, None, None, f"Not enough complete data points ({len(processed_data_for_prediction)} < {LOOKBACK_WINDOW}) after processing. Need at least {LOOKBACK_WINDOW} consecutive entries."

    try:
        crop_type_input = np.array([selected_crop_type]).reshape(-1, 1)
        encoded_crop_single = crop_encoder.transform(crop_type_input)
    except Exception as e:
        return None, None, None, f"Error encoding crop type '{selected_crop_type}': {e}. Is it in the trained labels?"

    full_input_features_sequence = []
    for i in range(LOOKBACK_WINDOW):
        numerical_features_at_timestep = processed_data_for_prediction.iloc[i][all_tdann_input_features].values
        combined_features_at_timestep = np.hstack((numerical_features_at_timestep, encoded_crop_single[0]))
        full_input_features_sequence.append(combined_features_at_timestep)

    full_input_features_sequence_np = np.array(full_input_features_sequence)

    try:
        scaled_input_sequence = input_scaler.transform(full_input_features_sequence_np)
        X_predict = scaled_input_sequence.reshape(1, LOOKBACK_WINDOW, scaled_input_sequence.shape[1])
        predicted_scaled_outputs = model.predict(X_predict, verbose=0)
        predicted_raw_outputs = output_scaler.inverse_transform(predicted_scaled_outputs)

        soil_moisture_pred = round(float(predicted_raw_outputs[0][0]), 2)
        light_intensity_pred = round(float(predicted_raw_outputs[0][1]), 2)
        nutrient_sum_pred = round(float(predicted_raw_outputs[0][2]), 2)

        return soil_moisture_pred, light_intensity_pred, nutrient_sum_pred, None
    except Exception as e:
        print(f"Error during AI prediction: {e}")
        return None, None, None, f"Error during AI prediction: {e}"

def predict_market_price_backend(latest_data, selected_crop_type):
    """
    Predicts the market price based on latest sensor data and crop type using the loaded model.
    """
    if market_price_model is None or market_crop_encoder is None or market_price_features is None:
        return None, "Market prediction model, encoder, or features not initialized."

    if not latest_data:
        return None, "No latest sensor data available for market price prediction."

    # Prepare features for the market price model, using dummy data if real data is missing
    features = {}
    dummy_values = generate_dummy_sensor_data_values()
    # Ensure all features expected by market_price_features are present
    for feature in market_price_features:  # market_price_features now includes 'ds18b20_temperature'
        val = latest_data.get(feature)
        if val is not None and not pd.isna(val):
            features[feature] = val
        else:
            # Use dummy values for NPK, pH, Rainfall, DS18B20 Temp, or a default 0 for others
            features[feature] = dummy_values.get(feature, 0)

    input_df_numerical = pd.DataFrame([features])

    # One-hot encode crop type
    try:
        crop_type_input = np.array([selected_crop_type]).reshape(-1, 1)
        encoded_crop = market_crop_encoder.transform(crop_type_input)
        encoded_crop_df = pd.DataFrame(encoded_crop, columns=market_crop_encoder.get_feature_names_out(['crop_type']))
    except Exception as e:
        return None, f"Error encoding crop type '{selected_crop_type}' for market price: {e}"

    X_predict_market = pd.concat([input_df_numerical, encoded_crop_df], axis=1)

    # Ensure all columns expected by the trained model are present and in order
    expected_cols = market_price_features + market_crop_encoder.get_feature_names_out(['crop_type']).tolist()
    for col in expected_cols:
        if col not in X_predict_market.columns:
            X_predict_market[col] = 0  # Add missing columns with 0
    X_predict_market = X_predict_market[expected_cols]  # Reorder columns

    try:
        predicted_price = market_price_model.predict(X_predict_market)[0]
        predicted_price = max(0, predicted_price)  # Ensure price is not negative
        return round(predicted_price, 2), None
    except Exception as e:
        print(f"Error during market price prediction: {e}")
        return None, f"Error during market price prediction: {e}"

def crop_care_advice_backend(latest_data, crop_type, lang='en'):
    """Provides crop-specific care advice based on latest sensor readings."""
    messages = ADVICE_MESSAGES.get(lang, ADVICE_MESSAGES['en'])  # Fallback to English

    if not latest_data:
        return [messages['no_data']]

    tips = []
    ct = crop_type.lower()

    # NPK Advice (using values from latest_data, which are filled with dummies if real are missing)
    npk_advice_thresholds = {
        'N': {'min': 50, 'max': 150, 'low_msg': messages['npk_n_low'], 'high_msg': messages['npk_n_high']},
        'P': {'min': 20, 'max': 60, 'low_msg': messages['npk_p_low'], 'high_msg': messages['npk_p_high']},
        'K': {'min': 50, 'max': 200, 'low_msg': messages['npk_k_low'], 'high_msg': messages['npk_k_high']},
    }
    for nutrient, thresholds in npk_advice_thresholds.items():
        value = latest_data.get(nutrient)
        if value is not None and not pd.isna(value):
            if value < thresholds['min']:
                tips.append(messages['npk_low'].format(nutrient=nutrient, value=value, message=thresholds['low_msg']))
            elif value > thresholds['max']:
                tips.append(messages['npk_high'].format(nutrient=nutrient, value=value, message=thresholds['high_msg']))

    # Soil Moisture Advice
    sm = latest_data.get('soil_moisture')
    if sm is not None and not pd.isna(sm):
        if ct == 'wheat' and sm < 35:
            tips.append(messages['soil_moisture_low'].format(sm=sm, message=messages['wheat_sm_low']))
        elif ct == 'rice' and sm < 60:
            tips.append(messages['soil_moisture_low'].format(sm=sm, message=messages['rice_sm_low']))
        elif ct == 'maize' and sm < 40:
            tips.append(messages['soil_moisture_low'].format(sm=sm, message=messages['maize_sm_low']))
        elif ct == 'banana' and sm < 50:
            tips.append(messages['soil_moisture_low'].format(sm=sm, message=messages['banana_sm_low']))
        elif ct == 'mango' and sm > 60:
            tips.append(messages['soil_moisture_high'].format(sm=sm, message=messages['mango_sm_high']))
        elif ct == 'grapes' and sm > 50:
            tips.append(messages['soil_moisture_high'].format(sm=sm, message=messages['grapes_sm_high']))
        elif ct == 'cotton' and sm < 30:
            tips.append(messages['soil_moisture_low'].format(sm=sm, message=messages['cotton_sm_low']))
        elif (ct == 'millet' or ct == 'sorghum') and sm < 25:
            tips.append(messages['soil_moisture_low'].format(sm=sm, message=messages['millet_sorghum_sm_low']))
        elif ct == 'jute' and sm < 50:
            tips.append(messages['soil_moisture_low'].format(sm=sm, message=messages['jute_sm_low']))
        elif ct == 'pomegranate' and sm > 50:
            tips.append(messages['soil_moisture_high'].format(sm=sm, message=messages['pomegranate_sm_high']))
        elif (ct == 'muskmelon' or ct == 'watermelon') and sm < 30:
            tips.append(messages['soil_moisture_low'].format(sm=sm, message=messages['melon_sm_low']))
        elif ct == 'coconut' and sm < 50:
            tips.append(messages['soil_moisture_low'].format(sm=sm, message=messages['coconut_sm_low']))
        elif ct == 'mothbeans' and sm < 25:
            tips.append(messages['soil_moisture_low'].format(sm=sm, message=messages['mothbeans_sm_low']))
        elif ct == 'mungbean' and sm < 30:
            tips.append(messages['soil_moisture_low'].format(sm=sm, message=messages['mungbean_sm_low']))
        elif ct == 'blackgram' and sm < 35:
            tips.append(messages['soil_moisture_low'].format(sm=sm, message=messages['blackgram_sm_low']))
        elif ct == 'lentil' and sm < 25:
            tips.append(messages['soil_moisture_low'].format(sm=sm, message=messages['lentil_sm_low']))
        elif sm < 30:
            tips.append(messages['soil_moisture_low'].format(sm=sm, message=messages['general_sm_low']))
        elif sm > 70:
            tips.append(messages['soil_moisture_high'].format(sm=sm, message=messages['general_sm_high']))

    # Temperature Advice (combining 'temperature' and 'ds18b20_temperature')
    temp = latest_data.get('temperature')
    ds_temp = latest_data.get('ds18b20_temperature')

    # Prioritize ds_temp if available and within a reasonable range, otherwise use temp
    # Or, provide advice based on both if they differ significantly
    effective_temp = None
    if ds_temp is not None and not pd.isna(ds_temp) and 0 <= ds_temp <= 50:  # Assuming reasonable range for DS18B20
        effective_temp = ds_temp
    elif temp is not None and not pd.isna(temp):
        effective_temp = temp

    if effective_temp is not None:
        if ct == 'wheat' and effective_temp > 32:
            tips.append(messages['temp_high'].format(temp=effective_temp, message=messages['wheat_temp_high']))
        elif ct == 'rice' and effective_temp > 38:
            tips.append(messages['temp_high'].format(temp=effective_temp, message=messages['rice_temp_high']))
        elif ct == 'maize' and effective_temp < 20:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['maize_temp_low']))
        elif ct == 'banana' and effective_temp < 15:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['banana_temp_low']))
        elif ct == 'mango' and effective_temp < 20:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['mango_temp_low']))
        elif ct == 'cotton' and effective_temp < 20:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['cotton_temp_low']))
        elif (ct == 'millet' or ct == 'sorghum') and effective_temp < 20:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['millet_sorghum_temp_low']))
        elif ct == 'coffee' and effective_temp < 18:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['coffee_temp_low']))
        elif ct == 'jute' and effective_temp < 25:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['jute_temp_low']))
        elif ct == 'papaya' and effective_temp < 20:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['papaya_temp_low']))
        elif ct == 'pomegranate' and effective_temp < 20:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['pomegranate_temp_low']))
        elif (ct == 'muskmelon' or ct == 'watermelon') and effective_temp < 25:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['melon_temp_low']))
        elif ct == 'coconut' and effective_temp < 25:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['coconut_temp_low']))
        elif ct == 'mothbeans' and effective_temp < 22:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['mothbeans_temp_low']))
        elif ct == 'mungbean' and effective_temp < 20:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['mungbean_temp_low']))
        elif ct == 'blackgram' and effective_temp < 18:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['blackgram_temp_low']))
        elif ct == 'lentil' and effective_temp < 15:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['lentil_temp_low']))
        elif effective_temp < 18:
            tips.append(messages['temp_low'].format(temp=effective_temp, message=messages['general_temp_low']))
        elif effective_temp > 35:
            tips.append(messages['temp_high'].format(temp=effective_temp, message=messages['general_temp_high']))

    # Humidity Advice
    hum = latest_data.get('humidity')
    if hum is not None and not pd.isna(hum):
        if ct == 'wheat' and hum > 70:
            tips.append(messages['humidity_high'].format(hum=hum, message=messages['wheat_hum_high']))
        elif ct == 'rice' and hum < 60:
            tips.append(messages['humidity_low'].format(hum=hum, message=messages['rice_hum_low']))
        elif ct == 'banana' and hum < 60:
            tips.append(messages['humidity_low'].format(hum=hum, message=messages['banana_hum_low']))
        elif ct == 'grapes' and hum > 70:
            tips.append(messages['humidity_high'].format(hum=hum, message=messages['grapes_hum_high']))
        elif ct == 'coffee' and hum < 60:
            tips.append(messages['humidity_low'].format(hum=hum, message=messages['coffee_hum_low']))
        elif ct == 'orange' and hum > 70:
            tips.append(messages['humidity_high'].format(hum=hum, message=messages['orange_hum_high']))
        elif hum < 40:
            tips.append(messages['humidity_low'].format(hum=hum, message=messages['general_hum_low']))
        elif hum > 80:
            tips.append(messages['humidity_high'].format(hum=hum, message=messages['general_hum_high']))

    # pH Advice
    ph_val = latest_data.get('ph')
    if ph_val is not None and not pd.isna(ph_val):
        if ct == 'wheat' and ph_val < 6.0:
            tips.append(messages['ph_low'].format(ph_val=ph_val, message=messages['wheat_ph_low']))
        elif ct == 'rice' and (ph_val < 5.5 or ph_val > 6.5):
            tips.append(messages['ph_off'].format(ph_val=ph_val, message=messages['rice_ph_off']))
        elif ct == 'maize' and (ph_val < 5.8 or ph_val > 7):
            tips.append(messages['ph_off'].format(ph_val=ph_val, message=messages['maize_ph_off']))
        elif ct == 'papaya' and ph_val < 6:
            tips.append(messages['ph_low'].format(ph_val=ph_val, message=messages['papaya_ph_low']))
        elif ct == 'orange' and (ph_val < 6 or ph_val > 7.5):
            tips.append(messages['ph_off'].format(ph_val=ph_val, message=messages['orange_ph_off']))
        elif ph_val < 5.5:
            tips.append(messages['ph_low'].format(ph_val=ph_val, message=messages['general_ph_very_low']))
        elif ph_val > 7.5:
            tips.append(messages['ph_high'].format(ph_val=ph_val, message=messages['general_ph_very_high']))
        elif not (5.5 <= ph_val <= 7.5):
            tips.append(messages['ph_off'].format(ph_val=ph_val, message=messages['general_ph_off']))

    # Light Intensity Advice
    light = latest_data.get('light_intensity')
    if light is not None and not pd.isna(light):
        if ct == 'wheat' and light < 400:
            tips.append(messages['light_low'].format(light=light, message=messages['wheat_light_low']))
        elif ct == 'rice' and light < 500:
            tips.append(messages['light_low'].format(light=light, message=messages['rice_light_low']))
        elif light < 300:
            tips.append(messages['light_low'].format(light=light, message=messages['general_light_low']))
        elif light > 800:
            tips.append(messages['light_high'].format(light=light, message=messages['general_light_high']))

    # Rainfall Advice
    rain = latest_data.get('rainfall')
    if rain is not None and not pd.isna(rain):
        if rain < 50:
            tips.append(messages['rainfall_low_msg'].format(rain=rain, message=messages['rainfall_low_msg']))
        elif rain > 200:
            tips.append(messages['rainfall_high_msg'].format(rain=rain, message=messages['rainfall_high_msg']))

    return tips if tips else [messages['all_good']]

def recommend_seeds_backend(soil_moisture_pred, lang='en'):
    """
    Suggests suitable crops based on predicted soil moisture.
    Simplified as per code 2's seed recommendation logic.
    """
    messages = SEED_RECOMMENDATIONS_MESSAGES.get(lang, SEED_RECOMMENDATIONS_MESSAGES['en'])

    if soil_moisture_pred is None or pd.isna(soil_moisture_pred) or not (0 <= soil_moisture_pred <= 100):
        return messages['no_specific'] + " (Predicted soil moisture is out of typical range or not available, hindering specific crop suggestions.)"
    elif soil_moisture_pred < 30:
        return f"{messages['intro']} {messages['drought_resistant']}{messages['outro']}"
    elif soil_moisture_pred > 70:
        return f"{messages['intro']} {messages['water_loving']}{messages['outro']}"
    else:
        return f"{messages['intro']} {messages['moderate_rainfall']}{messages['outro']}"

def speak_tip_backend(text, lang='en'):
    """Generates speech from text using gTTS and returns audio bytes."""
    try:
        tts = gTTS(text=text, lang=lang, slow=False)
        fp = io.BytesIO()
        tts.write_to_fp(fp)
        fp.seek(0)
        return fp.getvalue(), None
    except Exception as e:
        print(f"Error generating speech with gTTS for language '{lang}': {e}")
        return None, f"Error generating speech: {e}"

# --- Django View Functions (adapted from Flask routes) ---
# We use @csrf_exempt for all API endpoints to simplify CORS handling in this single-file setup,
# as the original Flask app had a broad CORS policy. In a full Django project, you'd handle CSRF
# more securely, e.g., by requiring CSRF tokens for non-GET requests or using django-cors-headers.

@csrf_exempt
def index(request):
    """
    Serves the index.html file. In a real Django app, this would typically
    be handled by Django's template system or static files. For a single-file
    setup, we attempt to read it directly.
    """
    try:
        # Assuming index.html is in the same directory as this script
        with open('index.html', 'r') as f:
            return HttpResponse(f.read())
    except FileNotFoundError:
        return HttpResponse("<h1>Welcome to Agriastrax Dashboard (Django)</h1><p>index.html not found. Please create it in the same directory as the script.</p>", status=404)

@csrf_exempt
def set_mode(request):
    """
    Endpoint to set the simulation mode.
    'simulation' mode: The backend will generate all dummy sensor data.
    'real-time' mode: The backend will generate dummy data for non-ESP32 sensors,
                      and expects real data for core sensors via /api/sensor_data.
    """
    if request.method == 'OPTIONS':
        return HttpResponse(status=200) # Handle preflight OPTIONS request
    
    global simulation_mode
    try:
        data = json.loads(request.body)
        mode = data.get('mode')
        if mode == 'simulation':
            simulation_mode = True
            print("Switched to Simulation Mode (full dummy data).")
        elif mode == 'real-time':
            simulation_mode = False
            print("Switched to Real-Time Testing Mode (partial dummy, expects real).")
        else:
            return JsonResponse({"status": "error", "message": "Invalid mode."}, status=400)
        return JsonResponse({"status": "success", "mode": "simulation" if simulation_mode else "real-time"})
    except json.JSONDecodeError:
        return JsonResponse({"status": "error", "message": "Invalid JSON in request body."}, status=400)
    except Exception as e:
        return JsonResponse({"status": "error", "message": str(e)}, status=500)

@csrf_exempt
def get_mode(request):
    """Endpoint to get the current simulation mode."""
    global simulation_mode
    return JsonResponse({"mode": "simulation" if simulation_mode else "real-time"})

@csrf_exempt
def receive_sensor_data(request):
    """
    Receives sensor data from ESP32.
    Expected JSON: { "temperature": X, "humidity": Y, "soil_moisture": Z, "light_intensity": A, "ds18b20_temperature": B }
    pH, NPK, Rainfall, crop_stage, growth_factor are assumed to be generated as dummy if not provided.
    """
    if request.method == 'OPTIONS':
        return HttpResponse(status=200) # Handle preflight OPTIONS request

    if not firebase_db_ref:
        return JsonResponse({"status": "error", "message": "Firebase not initialized."}, status=500)

    try:
        data = json.loads(request.body)
        if not data:
            return JsonResponse({"status": "error", "message": "Invalid JSON data."}, status=400)

        # Extract real sensor data from payload
        sensor_entry = {
            "timestamp": datetime.now().isoformat(),
            "temperature": data.get('temperature'),
            "humidity": data.get('humidity'),
            "soil_moisture": data.get('soil_moisture'),
            "light_intensity": data.get('light_intensity'),
            "ds18b20_temperature": data.get('ds18b20_temperature'),  # New DS18B20 temperature
        }

        # Add dummy data for fields not provided by ESP32, or use provided if available
        dummy_values = generate_dummy_sensor_data_values()
        sensor_entry['ph'] = data.get('ph', dummy_values['ph'])
        sensor_entry['N'] = data.get('N', dummy_values['N'])
        sensor_entry['P'] = data.get('P', dummy_values['P'])
        sensor_entry['K'] = data.get('K', dummy_values['K'])
        sensor_entry['rainfall'] = data.get('rainfall', dummy_values['rainfall'])
        sensor_entry['crop_stage'] = data.get('crop_stage', dummy_values['crop_stage'])
        sensor_entry['growth_factor'] = data.get('growth_factor', dummy_values['growth_factor'])

        firebase_db_ref.push(sensor_entry)
        print(f"Received and stored sensor data: {sensor_entry}")

        # Keep only the latest 100 entries for simplicity in Firebase
        snapshots = firebase_db_ref.order_by_child('timestamp').get()
        if snapshots and len(snapshots) > 100:
            oldest_keys = sorted(snapshots.keys(), key=lambda k: snapshots[k]['timestamp'])
            for i in range(len(oldest_keys) - 100):
                firebase_db_ref.child(oldest_keys[i]).delete()

        return JsonResponse({"status": "success", "message": "Sensor data received and stored."})
    except json.JSONDecodeError:
        return JsonResponse({"status": "error", "message": "Invalid JSON in request body."}, status=400)
    except Exception as e:
        print(f"Error receiving sensor data: {e}")
        return JsonResponse({"status": "error", "message": str(e)}, status=500)

@csrf_exempt
def get_dashboard_data(request):
    """Fetches core sensor data for the dashboard."""
    latest_data = get_latest_sensor_data()  # This now handles dummy data if no real data
    historical_data_list = get_historical_sensor_data(days=7)  # Returns list of dicts

    camera_data = fetch_camera_feed_data_backend()  # This now handles dummy data if no real data

    # Prepare data for plotting sensor trends
    plot_data_list = []
    if historical_data_list:
        df_hist = pd.DataFrame(historical_data_list)
        # Ensure timestamp is datetime and sort
        df_hist['timestamp'] = pd.to_datetime(df_hist['timestamp'])
        df_hist = df_hist.sort_values(by='timestamp')

        # Define metrics to plot (from available sensors) - Added ds18b20_temperature
        plot_features = ['soil_moisture', 'temperature', 'humidity', 'ph', 'light_intensity', 'N', 'P', 'K', 'rainfall', 'ds18b20_temperature', 'growth_factor']
        existing_plot_features = [f for f in plot_features if f in df_hist.columns]

        if not df_hist.empty and len(existing_plot_features) > 0:
            plot_df_melted = df_hist.dropna(subset=existing_plot_features + ['timestamp']).melt(
                id_vars=['timestamp'],
                value_vars=existing_plot_features,
                var_name='Sensor Metric',
                value_name='Reading'
            )
            plot_df_melted['timestamp'] = plot_df_melted['timestamp'].dt.strftime('%Y-%m-%dT%H:%M:%S')
            plot_df_melted['Reading'] = plot_df_melted['Reading'].apply(lambda x: None if pd.isna(x) else x)
            plot_data_list = plot_df_melted.to_dict(orient='records')

    # Prepare raw data table (latest 10 entries)
    raw_data_list = []
    if historical_data_list:
        df_raw = pd.DataFrame(historical_data_list).tail(10).copy()
        if 'timestamp' in df_raw.columns:
            df_raw['timestamp'] = pd.to_datetime(df_raw['timestamp']).dt.strftime('%Y-%m-%d %H:%M:%S')
        raw_data_list = df_raw.replace({np.nan: None}).to_dict(orient='records')

    return JsonResponse({
        'latest_data': latest_data,
        'camera_data': camera_data,
        'plot_data': plot_data_list,
        'raw_data': raw_data_list,
        'crop_labels': all_crop_labels,
        'status': 'success' if latest_data else 'no_data'  # Status based on if any data (real or dummy) is available
    })

@csrf_exempt
def get_weather_data(request):
    """Endpoint to fetch weather data."""
    return JsonResponse(generate_dummy_weather_data())

@csrf_exempt
def get_recent_events_data(request):
    """Endpoint to fetch recent events data."""
    return JsonResponse(generate_dummy_recent_events())

@csrf_exempt
def get_farm_health_data(request):
    """Endpoint to fetch farm health index data."""
    return JsonResponse(generate_dummy_farm_health_data())

@csrf_exempt
def get_device_connectivity_data(request):
    """Endpoint to fetch device connectivity data."""
    return JsonResponse(generate_dummy_device_connectivity())

@csrf_exempt
def get_resource_consumption_data(request):
    """Endpoint to fetch resource consumption data."""
    return JsonResponse(generate_dummy_resource_consumption())

@csrf_exempt
def api_pest_scan_trigger(request):
    """Endpoint to simulate triggering a pest scan and return results."""
    if request.method == 'OPTIONS':
        return HttpResponse(status=200) # Handle preflight OPTIONS request

    # In a real scenario, this would trigger a scan process
    # For now, it just returns simulated results after a delay
    time.sleep(2)  # Simulate scan time
    results = generate_dummy_pest_scan_results()
    return JsonResponse(results)

@csrf_exempt
def api_quick_action(request):
    """Endpoint for quick actions like irrigation, nutrient application, alerts."""
    if request.method == 'OPTIONS':
        return HttpResponse(status=200) # Handle preflight OPTIONS request

    try:
        data = json.loads(request.body)
        action_type = data.get('action_type')

        if action_type == 'irrigation':
            print(f"Action: Initiating Irrigation at {datetime.now()}")
            message = "Irrigation initiated successfully."
        elif action_type == 'nutrients':
            print(f"Action: Applying Nutrients at {datetime.now()}")
            message = "Nutrients applied successfully."
        elif action_type == 'alert':
            alert_message = data.get('message', 'General alert from dashboard.')
            print(f"Action: Sending Alert: '{alert_message}' at {datetime.now()}")
            message = f"Alert '{alert_message}' sent successfully."
        else:
            return JsonResponse({"status": "error", "message": "Invalid action type."}, status=400)

        return JsonResponse({"status": "success", "message": message})
    except json.JSONDecodeError:
        return JsonResponse({"status": "error", "message": "Invalid JSON in request body."}, status=400)
    except Exception as e:
        return JsonResponse({"status": "error", "message": str(e)}, status=500)

@csrf_exempt
def api_predict_growth(request):
    if request.method == 'OPTIONS':
        return HttpResponse(status=200) # Handle preflight OPTIONS request

    try:
        data = json.loads(request.body)
        selected_crop_type = data.get('selected_crop_type')

        # Fetch historical data as DataFrame for the TDANN model
        historical_data_dicts = get_historical_sensor_data(days=7)
        if not historical_data_dicts:
            return JsonResponse({'error': 'No sensor data available for prediction. Please send data to /api/sensor_data.'}, status=400)

        df_historical = pd.DataFrame(historical_data_dicts)
        # Ensure 'ph' column name consistency before passing to backend function
        if 'pH' in df_historical.columns and 'ph' not in df_historical.columns:
            df_historical['ph'] = df_historical['pH']
            df_historical = df_historical.drop(columns=['pH'])

        soil_moisture_pred, light_intensity_pred, nutrient_sum_pred, error_msg = predict_growth_backend(df_historical, selected_crop_type)

        if error_msg:
            return JsonResponse({'error': error_msg}, status=500)

        return JsonResponse({
            'soil_moisture_pred': soil_moisture_pred,
            'light_intensity_pred': light_intensity_pred,
            'nutrient_sum_pred': nutrient_sum_pred
        })
    except json.JSONDecodeError:
        return JsonResponse({"status": "error", "message": "Invalid JSON in request body."}, status=400)
    except Exception as e:
        return JsonResponse({"status": "error", "message": str(e)}, status=500)

@csrf_exempt
def api_market_price(request):
    if request.method == 'OPTIONS':
        return HttpResponse(status=200) # Handle preflight OPTIONS request

    try:
        data = json.loads(request.body)
        selected_crop_type = data.get('selected_crop_type')

        latest_sensor_data = get_latest_sensor_data()  # This will provide dummy data if real is missing
        if not latest_sensor_data:
            return JsonResponse({'error': 'No sensor data available for market price prediction.'}, status=400)

        predicted_price, error_msg = predict_market_price_backend(latest_sensor_data, selected_crop_type)

        if error_msg:
            return JsonResponse({'error': error_msg}, status=500)

        return JsonResponse({'predicted_price': predicted_price})
    except json.JSONDecodeError:
        return JsonResponse({"status": "error", "message": "Invalid JSON in request body."}, status=400)
    except Exception as e:
        return JsonResponse({"status": "error", "message": str(e)}, status=500)

@csrf_exempt
def api_care_advice(request):
    if request.method == 'OPTIONS':
        return HttpResponse(status=200) # Handle preflight OPTIONS request

    try:
        data = json.loads(request.body)
        selected_crop_type = data.get('selected_crop_type')
        lang = data.get('lang', 'en')  # Get language from request

        latest_data = get_latest_sensor_data()  # This will provide dummy data if real is missing
        if not latest_data:
            return JsonResponse({'advice': [ADVICE_MESSAGES.get(lang, ADVICE_MESSAGES['en'])['no_data']]})

        care_tips = crop_care_advice_backend(latest_data, selected_crop_type, lang)
        return JsonResponse({'advice': care_tips})
    except json.JSONDecodeError:
        return JsonResponse({"status": "error", "message": "Invalid JSON in request body."}, status=400)
    except Exception as e:
        return JsonResponse({"status": "error", "message": str(e)}, status=500)

@csrf_exempt
def api_seed_recommendations(request):
    if request.method == 'OPTIONS':
        return HttpResponse(status=200) # Handle preflight OPTIONS request

    try:
        data = json.loads(request.body)
        soil_moisture_pred = data.get('soil_moisture_pred')
        lang = data.get('lang', 'en')  # Get language from request

        # The recommendation is now solely based on predicted soil moisture, as per code 2's simplified logic
        seed_recommendation = recommend_seeds_backend(soil_moisture_pred, lang)
        return JsonResponse({'recommendation': seed_recommendation})
    except json.JSONDecodeError:
        return JsonResponse({"status": "error", "message": "Invalid JSON in request body."}, status=400)
    except Exception as e:
        return JsonResponse({"status": "error", "message": str(e)}, status=500)

@csrf_exempt
def api_voice_alert(request):
    if request.method == 'OPTIONS':
        return HttpResponse(status=200) # Handle preflight OPTIONS request

    try:
        data = json.loads(request.body)
        text = data.get('text')
        lang = data.get('lang', 'en')

        if not text:
            return JsonResponse({'error': 'No text provided for speech generation.'}, status=400)

        audio_bytes, error_msg = speak_tip_backend(text, lang)
        if error_msg:
            return JsonResponse({'error': error_msg}, status=500)

        response = HttpResponse(audio_bytes, content_type='audio/mpeg')
        #response['Content-Disposition'] = 'attachment; filename="alert.mp3"'
        return response
    except json.JSONDecodeError:
        return JsonResponse({"status": "error", "message": "Invalid JSON in request body."}, status=400)
    except Exception as e:
        return JsonResponse({"status": "error", "message": str(e)}, status=500)

@csrf_exempt
def get_crop_labels(request):
    return JsonResponse({'crop_labels': all_crop_labels})

# --- URL Patterns (equivalent to Flask routes) ---
# This list defines how URLs are mapped to view functions.
urlpatterns = [
    path('', index),
    path('api/set_mode', set_mode),
    path('api/get_mode', get_mode),
    path('api/sensor_data', receive_sensor_data),
    path('api/data', get_dashboard_data),
    path('api/weather_data', get_weather_data),
    path('api/recent_events_data', get_recent_events_data),
    path('api/farm_health_data', get_farm_health_data),
    path('api/device_connectivity_data', get_device_connectivity_data),
    path('api/resource_consumption_data', get_resource_consumption_data),
    path('api/pest_scan_trigger', api_pest_scan_trigger),
    path('api/action', api_quick_action),
    path('api/predict_growth', api_predict_growth),
    path('api/market_price', api_market_price),
    path('api/care_advice', api_care_advice),
    path('api/seed_recommendations', api_seed_recommendations),
    path('api/voice_alert', api_voice_alert),
    path('api/crop_labels', get_crop_labels),
]

# --- Middleware for CORS (Manual Implementation for single file) ---
# This is a basic CORS implementation to mimic the Flask app's behavior.
# For a full Django project, consider using the 'django-cors-headers' package.
class SimpleCorsMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)
        # Allow all origins, as in the original Flask app's CORS setup
        response['Access-Control-Allow-Origin'] = '*'
        # Allow common methods for API interactions
        response['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
        # Allow common headers, including Content-Type for JSON requests
        response['Access-Control-Allow-Headers'] = 'Content-Type, X-CSRFToken'
        # For preflight requests (OPTIONS method), set max-age for caching
        if request.method == 'OPTIONS':
            response['Access-Control-Max-Age'] = 86400  # Cache preflight for 24 hours
        return response

# --- Application Initialization and Running ---
# This block replaces the Flask app's `if __name__ == '__main__': app.run(...)`
def run_django_standalone():
    """
    Initializes Firebase and models, starts background threads, and then
    runs the Django development server.
    """
    # Initialize app components (models, scalers, Firebase, etc.)
    # This is equivalent to Flask's @app.before_request or app.app_context() init.
    initialize_firebase()
    load_models_and_scalers()

    # Start camera simulator in a separate thread
    camera_thread = threading.Thread(target=run_camera_simulator_thread)
    camera_thread.daemon = True  # Allow main program to exit even if threads are running
    camera_thread.start()

    # Start sensor data inserter in a separate thread
    sensor_inserter_thread = threading.Thread(target=run_sensor_data_inserter_thread)
    sensor_inserter_thread.daemon = True
    sensor_inserter_thread.start()

    # Get the WSGI application instance configured by settings.configure()
    application = get_wsgi_application()

    # Use Django's internal `runserver` command to serve the application.
    # This is a simplified way to run it without needing `manage.py`.
    # `--noreload` prevents the server from restarting on code changes,
    # which is often desired for background threads.
    # `--nothreading` is used because we are managing our own threads.
    from django.core.management import call_command
    port = int(os.environ.get("PORT", 5000))
    print(f"Starting Django development server on http://0.0.0.0:{port}/")
    # Django's runserver command usually handles threading, but since we have
    # our own background threads, we explicitly tell runserver not to use its own
    # threading/reloading to avoid conflicts.
    call_command('runserver', f'0.0.0.0:{port}', '--noreload', '--nothreading')

# Entry point for running the script
if __name__ == '__main__':
    run_django_standalone()

--------------------------------------------------------------------------------------------------------------------------

i've shared with you both the frontend and backend codes now do the following things for me and then send me the updated code : 

1. when the latest sensor reading data is exported as csv/excel file, the status message must show temporarily and after that the buttons must be shown again.
2. the  "Sensor Trends Over Time" graph must be a time series graph which must visualize the data/trends clearly.
3. play top alerts must play all the alerts and wait for one alerts to end then go to the next alert. also the voice and pronounciation must be appropriate.
4. in mobile phone devices make the logo appear centrally at the very top of "smart agritech deashboard".