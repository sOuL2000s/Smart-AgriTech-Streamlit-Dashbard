<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart AgriTech Dashboard</title>
    <!-- Favicon: A simple SVG icon for the browser tab -->
    <link rel="icon" href="https://placehold.co/192x192/48bb78/ffffff?text=AG" type="image/png">
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Plotly.js CDN for charts -->
    <script src="https://cdn.plot.ly/plotly-2.32.0.min.js"></script>
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Google Fonts: Exo 2 for headings, Inter for body, Michroma for main title -->
    <link href="https://fonts.googleapis.com/css2?family=Exo+2:wght@700;800&family=Inter:wght@400;500;600&family=Michroma&display=swap" rel="stylesheet">

    <style>
        /* Base styles for body and font */
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url('https://placehold.co/1920x1080/2d3748/e2e8f0?text=SMART+AGRITECH+DASHBOARD') no-repeat center center fixed;
            background-size: cover;
            color: #e2e8f0; /* Light text */
            min-height: 100vh; /* Ensure full viewport height */
            display: flex;
            flex-direction: column;
            overflow-x: hidden; /* Prevent horizontal scroll */
        }

        /* Apply Michroma font to the main title */
        .font-michroma {
            font-family: 'Michroma', sans-serif;
        }

        /* Custom Scrollbar for Webkit browsers */
        ::-webkit-scrollbar {
            width: 8px; /* Width of the vertical scrollbar */
            height: 8px; /* Height of the horizontal scrollbar */
        }

        ::-webkit-scrollbar-track {
            background: rgba(45, 55, 72, 0.7); /* Darker track background */
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb {
            background: #68D391; /* Green thumb */
            border-radius: 10px;
            border: 2px solid rgba(45, 55, 72, 0.7); /* Border to make it appear thinner */
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #48bb78; /* Darker green on hover */
        }

        /* Main container for content */
        .container {
            max-width: 1500px; /* Increased max-width for more content */
            margin: 0 auto;
            padding: 0.75rem; /* Further reduced padding */
            flex-grow: 1; /* Allow container to grow */
            animation: fadeIn 1s ease-out forwards; /* Fade-in animation for the whole container */
            opacity: 0; /* Start invisible for animation */
            display: flex;
            flex-direction: column;
        }
        @media (min-width: 640px) { /* sm breakpoint */
            .container {
                padding: 1rem; /* Slightly more padding on larger screens */
            }
        }

        /* Card styling */
        .card {
            background-color: rgba(45, 55, 72, 0.5); /* Semi-transparent card background */
            border-radius: 1.5rem; /* rounded-3xl for more pronounced corners */
            padding: 1.25rem; /* Reduced padding */
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3), 0 5px 10px rgba(0, 0, 0, 0.2);
            border: 1px solid #4a5568; /* Subtle border */
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out; /* Smooth hover effect */
            position: relative;
            overflow: hidden; /* Ensure content stays within rounded corners */
            display: flex; /* Make cards flex containers */
            flex-direction: column; /* Stack content vertically */
            min-height: 0; /* Allow cards to shrink as needed */
        }

        .card:hover {
            transform: translateY(-8px) scale(1.01);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4), 0 8px 15px rgba(0, 0, 0, 0.3);
        }

        /* Button styling enhancements */
        .button-primary {
            background: linear-gradient(45deg, #48bb78, #38a169); /* Green gradient */
            border: none;
            color: white;
            font-weight: bold;
            padding: 0.6rem 1.2rem; /* Reduced padding */
            border-radius: 0.75rem; /* rounded-xl */
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease-in-out;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem; /* text-sm */
        }

        .button-primary:hover {
            background: linear-gradient(45deg, #38a169, #2f855a); /* Darker green on hover */
            transform: translateY(-3px) scale(1.02);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        .button-primary:active {
            transform: translateY(0);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        /* Secondary button for play alerts */
        .button-secondary {
            background: linear-gradient(45deg, #63b3ed, #4299e1); /* Blue gradient */
            border: none;
            color: white;
            font-weight: bold;
            padding: 0.6rem 1.2rem; /* Reduced padding */
            border-radius: 0.75rem; /* rounded-xl */
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease-in-out;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem; /* text-sm */
        }

        .button-secondary:hover {
            background: linear-gradient(45deg, #4299e1, #3182ce); /* Darker blue on hover */
            transform: translateY(-3px) scale(1.02);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        .button-secondary:active {
            transform: translateY(0);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        /* Fade-in animation */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Custom scrollbar for raw data table */
        .dataframe-container {
            max-height: 200px; /* Further adjusted max-height */
            overflow-y: auto;
            border-radius: 0.75rem; /* rounded-xl */
            background-color: rgba(0,0,0,0); /* Transparent background */
            border: 1px solid #4a5568;
            flex-grow: 1; /* Allow table to grow */
        }

        /* Table styling within dataframe-container */
        .dataframe-container table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.8rem; /* Further smaller font for density */
        }

        .dataframe-container th, .dataframe-container td {
            padding: 0.5rem 0.7rem; /* Further reduced padding */
            border-bottom: 1px solid #4a5568;
            text-align: left;
        }

        .dataframe-container th {
            background-color: rgba(74, 85, 104, 0.7); /* Semi-transparent header */
            font-weight: bold;
            color: #e2e8f0;
            position: sticky;
            top: 0;
            z-index: 1;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .dataframe-container tr:nth-child(even) {
            background-color: rgba(45, 55, 72, 0.3);
        }
        .dataframe-container tr:nth-child(odd) {
            background-color: rgba(36, 44, 56, 0.3);
        }
        .dataframe-container tr:hover {
            background-color: rgba(74, 85, 104, 0.5);
        }

        /* Loading spinner animation */
        .loading-spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
            display: inline-block;
            vertical-align: middle;
            margin-right: 8px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Custom select box styling for Google Translate */
        #google_translate_element {
            /* Adjust this to fit your design */
            margin-left: 10px;
            display: none; /* Keep this hidden as we use a custom select */
        }
        /* Adjust body top padding which Google Translate adds */
        body {
            top: 0px !important;
        }

        /* Custom Language Select Styling */
        #customLanguageSelect {
            width: auto; /* Adjusted to fit content */
            max-height: 200px;
            overflow-y: auto;
            background: rgba(45, 55, 72, 0.8);
            color: #e2e8f0;
            border: 1px solid #4a5568;
            padding: 0.4rem 0.6rem;
            border-radius: 0.75rem;
            font-size: 0.9rem;
            appearance: none; /* Remove default arrow */
            -webkit-appearance: none;
            -moz-appearance: none;
            background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23e2e8f0%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13.2-6.4H18.2c-4.8%200-9.3%201.8-13.2%206.4-4.2%204.4-6.4%2010.2-6.4%2016.3%200%206.1%202.2%2011.9%206.4%2016.3l127.4%20127.3c4.2%204.4%2010.2%206.4%2016.3%206.4s11.9-2.2%2016.3-6.4L287%20102c4.2-4.4%206.4-10.2%206.4-16.3S291.2%2073.8%20287%2069.4z%22%2F%3E%3C%2Fsvg%3E');
            background-repeat: no-repeat;
            background-position: right 0.8rem center;
            background-size: 0.8em;
            padding-right: 2.5rem; /* Make space for the custom arrow */
        }
        #customLanguageSelect:focus {
            outline: none;
            border-color: #68D391;
            box-shadow: 0 0 0 2px rgba(104, 211, 145, 0.5);
        }
        #customLanguageSelect option {
            background-color: #2d3748;
            color: #e2e8f0;
        }
        #customLanguageSelect option:hover {
            background-color: #4a5568;
        }

        /* Toggle Switch Styles */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 80px; /* Reduced width */
            height: 30px; /* Reduced height */
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #4a5568;
            -webkit-transition: .4s;
            transition: .4s;
            border-radius: 30px; /* Adjusted radius */
            box-shadow: inset 0 0 5px rgba(0,0,0,0.3);
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 22px; /* Adjusted size */
            width: 22px; /* Adjusted size */
            left: 4px;
            bottom: 4px;
            background-color: #e2e8f0;
            -webkit-transition: .4s;
            transition: .4s;
            border-radius: 50%;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        input:checked + .slider {
            background-color: #48bb78;
            box-shadow: inset 0 0 5px rgba(0,0,0,0.3);
        }

        input:focus + .slider {
            box-shadow: 0 0 1px #48bb78;
        }

        input:checked + .slider:before {
            -webkit-transform: translateX(50px); /* Adjusted for narrower switch */
            -ms-transform: translateX(50px);
            transform: translateX(50px);
        }

        /* Round sliders */
        .slider.round {
            border-radius: 30px;
        }

        .slider.round:before {
            border-radius: 50%;
        }

        /* Labels for toggle switch */
        .toggle-labels {
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            transform: translateY(-50%);
            display: flex;
            justify-content: space-between;
            padding: 0 8px; /* Adjusted padding */
            color: #cbd5e0;
            font-weight: bold;
            font-size: 0.7rem; /* Smaller font */
            pointer-events: none;
        }
        .toggle-labels span {
            pointer-events: none;
        }

        /* Circular Progress Bar Styling (updated to be more like Farm Health Index) */
        .circular-progress-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 0.6rem;
            text-align: center;
            position: relative;
            background-color: rgba(36, 44, 56, 0.5);
            border-radius: 1rem;
            border: 1px solid #3a4458;
            height: 100%;
        }

        .circular-progress {
            position: relative;
            width: 70px; /* Slightly larger size for the circle */
            height: 70px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 0.3rem;
        }

        .circular-progress svg {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        .circular-progress circle {
            fill: none;
            stroke-width: 7; /* Thickness of the ring */
            transform: rotate(-90deg);
            transform-origin: 50% 50%;
        }

        .circular-progress .bg-circle {
            stroke: #4a5568; /* Background color of the ring */
        }

        .circular-progress .progress-circle {
            stroke-linecap: round; /* Rounded ends for the progress bar */
            transition: stroke-dasharray 0.5s ease-in-out;
        }

        .progress-value {
            position: absolute; /* Position value absolutely within the container */
            font-size: clamp(0.8rem, 2vw, 1.1rem); /* Adjusted font size for better fit and responsiveness */
            font-weight: bold;
            color: #e2e8f0;
            z-index: 2; /* Ensure text is above circles */
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%); /* Center the text precisely */
            white-space: nowrap; /* Prevent wrapping */
        }

        .sensor-icon {
            position: relative;
            z-index: 2;
            color: #68D391;
            font-size: 1.1rem;
            margin-bottom: 0.1rem;
        }

        .sensor-label {
            font-size: 0.75rem;
            color: #cbd5e0;
            margin-top: 0.1rem;
        }

        .sensor-update-time {
            font-size: 0.65rem;
            color: #94a3b8;
            margin-top: 0.25rem;
        }

        /* Specific colors for different gauges */
        .circular-progress.soil-moisture .progress-circle { stroke: #68D391; }
        .circular-progress.temperature .progress-circle { stroke: #F6AD55; }
        .circular-progress.humidity .progress-circle { stroke: #63B3ED; }
        .circular-progress.ph .progress-circle { stroke: #A78BFA; }
        .circular-progress.light-intensity .progress-circle { stroke: #ECC94B; }
        .circular-progress.rainfall .progress-circle { stroke: #4299E1; }

        /* Weather Card Styling */
        .weather-day {
            border-bottom: 1px solid #4a5568;
            padding-bottom: 0.5rem; /* Further reduced padding */
            margin-bottom: 0.5rem; /* Further reduced margin */
        }
        .weather-day:last-child {
            border-bottom: none;
            padding-bottom: 0;
            margin-bottom: 0;
        }

        /* Farm Health Index Progress Bar */
        .health-factor-progress {
            height: 6px; /* Even thinner */
            background-color: #4a5568;
            border-radius: 9999px;
            overflow: hidden;
        }
        .health-factor-bar {
            height: 100%;
            background-color: #48bb78;
            transition: width 0.5s ease-in-out;
        }

        /* Map styling */
        #map-container {
            position: relative;
            width: 100%;
            padding-top: 56.25%; /* 16:9 Aspect Ratio */
            background-color: #2d3748;
            border-radius: 1rem;
            overflow: hidden;
            border: 1px solid #4a5568;
        }

        #map {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: none;
        }
        #map-loading {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(45, 55, 72, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            color: #cbd5e0;
            font-size: 1.1rem;
            z-index: 10;
            transition: opacity 0.5s ease-in-out;
            pointer-events: none;
        }

        /* Video Feed */
        .camera-feed-container {
            position: relative;
            width: 100%;
            height: 100%;
            background-color: #2d3748;
            border-radius: 1rem;
            overflow: hidden;
            border: 1px solid #4a5568;
        }

        #camera-video-feed {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: none; /* Hidden by default */
        }

        #camera-feed-placeholder {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: #cbd5e0;
            background-color: #2d3748;
            font-size: 1.1rem;
            text-align: center;
        }
        #camera-feed-placeholder i {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: #63B3ED;
        }

        .camera-feed-container .live-indicator {
            position: absolute;
            top: 0.6rem;
            left: 0.6rem;
            background-color: #e53e3e;
            color: white;
            padding: 0.2rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: bold;
            animation: blink 1s infinite;
            z-index: 10; /* Ensure it's above video */
        }
        /* Blinking */
        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        /* Connection Status */
        .camera-feed-container .connection-status {
            position: absolute;
            top: 0.6rem;
            right: 0.6rem;
            background-color: #4a5568;
            color: #cbd5e0;
            padding: 0.2rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: bold;
            z-index: 10;
        }

        .camera-controls {
            position: absolute;
            bottom: 0.6rem;
            left: 50%;
            transform: translateX(-50%);
            z-index: 10;
            display: flex;
            gap: 0.5rem;
        }
        .camera-controls button {
            background-color: rgba(74, 85, 104, 0.8);
            border: 1px solid #4a5568;
            color: #e2e8f0;
            width: 3rem;
            height: 3rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s ease-in-out, transform 0.2s ease-in-out;
            box-shadow: 0 4px 6px rgba(0,0,0,0.2);
        }
        .camera-controls button:hover {
            background-color: #4a5568;
            transform: scale(1.05);
        }
        .camera-controls button:active {
            transform: scale(0.95);
        }

        /* Responsive grid adjustments */
        @media (max-width: 1279px) { /* xl breakpoint */
            .xl\:row-span-2 {
                grid-row: span 1 / span 1 !important;
            }
        }

        /* Message Box Styling */
        #message-box {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(36, 44, 56, 0.95);
            color: white;
            padding: 1rem 2rem;
            border-radius: 0.75rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
            z-index: 1000;
            display: none; /* Hidden by default */
            animation: slideInUp 0.5s forwards, fadeOut 0.5s 4.5s forwards;
        }

        @keyframes slideInUp {
            from { transform: translate(-50%, 100px); opacity: 0; }
            to { transform: translate(-50%, 0); opacity: 1; }
        }

        @keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; }
        }

        /* Video Simulation message */
        #video-simulation-message {
            position: absolute;
            bottom: 2rem;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(251, 191, 36, 0.9);
            color: #2d3748;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-weight: bold;
            z-index: 10;
        }

        /* Full-screen overlay for pest scan */
        #pest-scan-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.9);
            z-index: 2000;
            display: none;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
            text-align: center;
        }

        #pest-scan-overlay .scan-text {
            font-family: 'Michroma', sans-serif;
            font-size: 2rem;
            margin-bottom: 2rem;
        }

        #pest-scan-overlay .scan-spinner {
            border: 8px solid rgba(255, 255, 255, 0.1);
            border-top: 8px solid #48bb78;
            border-radius: 50%;
            width: 80px;
            height: 80px;
            animation: spin 1s linear infinite;
        }

        /* Chatbot styling */
        .chatbot-container {
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            padding: 0.5rem;
        }
        #chatbot-messages {
            display: flex;
            flex-direction: column;
            overflow-y: auto;
            flex-grow: 1;
            padding: 0.5rem;
            border-radius: 0.5rem;
            background-color: rgba(0, 0, 0, 0.2);
            margin-bottom: 0.5rem;
        }
        .message {
            max-width: 80%;
            margin-bottom: 0.5rem;
            padding: 0.5rem 0.8rem;
            border-radius: 0.75rem;
            word-wrap: break-word;
        }
        .message.user {
            background-color: #63b3ed;
            color: #1a202c;
            align-self: flex-end;
            border-bottom-right-radius: 0;
        }
        .message.bot {
            background-color: #4a5568;
            color: #e2e8f0;
            align-self: flex-start;
            border-bottom-left-radius: 0;
        }
        #chatbot-input-form {
            display: flex;
            gap: 0.5rem;
        }
        #chatbot-input {
            flex-grow: 1;
            padding: 0.5rem;
            border-radius: 0.5rem;
            border: 1px solid #4a5568;
            background-color: #2d3748;
            color: white;
        }
        #chatbot-input:focus {
            outline: none;
            border-color: #68D391;
            box-shadow: 0 0 0 2px rgba(104, 211, 145, 0.5);
        }
        #chatbot-send-button {
            padding: 0.5rem 1rem;
            background-color: #48bb78;
            color: white;
            border-radius: 0.5rem;
            font-weight: bold;
        }

        /* Alert styling */
        .alert-item {
            display: flex;
            align-items: center;
            padding: 0.75rem;
            border-bottom: 1px solid #4a5568;
        }
        .alert-item:last-child {
            border-bottom: none;
        }
        .alert-item.alert-low {
            background-color: rgba(251, 191, 36, 0.2);
            color: #FBD38D;
        }
        .alert-item.alert-medium {
            background-color: rgba(237, 137, 54, 0.2);
            color: #F6AD55;
        }
        .alert-item.alert-high {
            background-color: rgba(229, 62, 62, 0.2);
            color: #FC8181;
        }
        .alert-item i {
            margin-right: 0.75rem;
            width: 1.5rem;
            text-align: center;
        }
        .alert-item span {
            flex-grow: 1;
        }

        /* Loading indicator for API calls */
        .api-loading-indicator {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            color: #cbd5e0;
        }
        .api-loading-indicator .loading-spinner {
            border-top-color: #48bb78;
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-100">
    <!-- Main content container -->
    <div class="container flex-grow p-4">
        <!-- Header -->
        <header class="flex flex-col sm:flex-row items-center justify-between mb-6 gap-4">
            <div class="flex-grow">
                <h1 class="text-3xl font-michroma font-bold text-green-400">Smart AgriTech Dashboard</h1>
                <p class="text-gray-400 mt-1">Real-time monitoring and control for your farm.</p>
            </div>
            <div class="header-controls flex flex-wrap justify-end items-center gap-4">
                <button id="refresh-button" class="button-primary w-full sm:w-auto" data-translate-key="refresh_data">
                    <i class="fas fa-sync-alt mr-2"></i> Refresh Data
                </button>
                <!-- Play Alerts Button -->
                <button id="play-top-alerts-button" class="button-secondary w-full sm:w-auto">
                    <i class="fas fa-volume-up mr-2"></i> Play Top Alerts
                </button>
                <!-- Simulation Mode Toggle -->
                <div class="flex items-center space-x-2">
                    <span class="text-sm font-medium text-gray-300" data-translate-key="mode_label">Mode:</span>
                    <label class="toggle-switch">
                        <input type="checkbox" id="simulation-mode-toggle">
                        <span class="slider round"></span>
                        <div class="toggle-labels">
                            <span class="ml-1" data-translate-key="mode_real">Real</span>
                            <span class="mr-1" data-translate-key="mode_sim">Sim</span>
                        </div>
                    </label>
                </div>
                <!-- Custom Language Selector -->
                <select id="customLanguageSelect" class="w-full sm:w-auto">
                    <option value="">🌐 Select Language</option>
                    <option value="en">English</option>
                    <option value="hi">Hindi</option>
                    <option value="bn">Bengali</option>
                    <option value="te">Telugu</option>
                    <option value="mr">Marathi</option>
                    <option value="ta">Tamil</option>
                    <option value="gu">Gujarati</option>
                    <option value="kn">Kannada</option>
                    <option value="ml">Malayalam</option>
                    <option value="pa">Punjabi</option>
                </select>
                <!-- Google Translate Element (now visible) -->
                <div id="google_translate_element"></div>
            </div>
        </header>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-5 mb-5 flex-grow">
            <!-- Current Sensor Readings (Top-Left, Tall) -->
            <div class="card xl:row-span-2">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="current_sensor_readings_title">
                    <i class="fas fa-tachometer-alt mr-2"></i> Current Sensor Readings
                </h2>
                <!-- Custom Circular Gauges -->
                <div id="current-sensor-readings-grid" class="grid grid-cols-2 gap-2 mb-4">
                    <!-- Soil Moisture -->
                    <div class="circular-progress-container">
                        <div class="circular-progress soil-moisture" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7"></circle>
                            </svg>
                            <span class="progress-value">0%</span>
                        </div>
                        <i class="fas fa-tint sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="soil_moisture_label">Soil Moisture</span>
                        <span class="sensor-update-time" id="soil-moisture-update">Updated: N/A</span>
                    </div>
                    <!-- Temperature -->
                    <div class="circular-progress-container">
                        <div class="circular-progress temperature" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7"></circle>
                            </svg>
                            <span class="progress-value">0°C</span>
                        </div>
                        <i class="fas fa-thermometer-half sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="temperature_label">Temperature</span>
                        <span class="sensor-update-time" id="temperature-update">Updated: N/A</span>
                    </div>
                    <!-- Humidity -->
                    <div class="circular-progress-container">
                        <div class="circular-progress humidity" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7"></circle>
                            </svg>
                            <span class="progress-value">0%</span>
                        </div>
                        <i class="fas fa-water sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="humidity_label">Humidity</span>
                        <span class="sensor-update-time" id="humidity-update">Updated: N/A</span>
                    </div>
                    <!-- pH Level -->
                    <div class="circular-progress-container">
                        <div class="circular-progress ph" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7"></circle>
                            </svg>
                            <span class="progress-value">0</span>
                        </div>
                        <i class="fas fa-flask sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="ph_level_label">pH Level</span>
                        <span class="sensor-update-time" id="ph-update">Updated: N/A</span>
                    </div>
                    <!-- Light Intensity -->
                    <div class="circular-progress-container">
                        <div class="circular-progress light-intensity" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7"></circle>
                            </svg>
                            <span class="progress-value">0 lux</span>
                        </div>
                        <i class="fas fa-sun sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="light_intensity_label">Light Intensity</span>
                        <span class="sensor-update-time" id="light-intensity-update">Updated: N/A</span>
                    </div>
                    <!-- Rainfall -->
                    <div class="circular-progress-container">
                        <div class="circular-progress rainfall" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7"></circle>
                            </svg>
                            <span class="progress-value">0 mm</span>
                        </div>
                        <i class="fas fa-cloud-showers-heavy sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="rainfall_label">Rainfall</span>
                        <span class="sensor-update-time" id="rainfall-update">Updated: N/A</span>
                    </div>
                </div>

                <div class="expander-section">
                    <div class="flex justify-between items-center cursor-pointer mb-2" onclick="toggleExpander('raw-data-expander-content')">
                        <h3 class="text-sm font-semibold text-gray-300" data-translate-key="raw_sensor_data_label">Raw Sensor Data</h3>
                        <span id="expander-icon" class="text-gray-400">
                            <i class="fas fa-chevron-down text-xs"></i>
                        </span>
                    </div>
                    <div id="raw-data-expander-content" class="dataframe-container hidden">
                        <div id="raw-data-table">
                            <!-- Raw data table will be rendered here -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Weather Forecast (Top-Right) -->
            <div class="card xl:row-span-1">
                <h2 class="text-lg font-semibold text-blue-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="weather_forecast_title">
                    <i class="fas fa-cloud-sun mr-2"></i> Weather Forecast
                </h2>
                <div id="weather-forecast-container">
                    <!-- Weather forecast will be rendered here -->
                </div>
            </div>

            <!-- Farm Health Index (Top-Right) -->
            <div class="card xl:row-span-1">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="farm_health_index_title">
                    <i class="fas fa-heartbeat mr-2"></i> Farm Health Index
                </h2>
                <div class="flex items-center justify-between mb-4">
                    <div class="flex items-center space-x-4">
                        <div class="flex flex-col items-center">
                            <div class="relative w-20 h-20">
                                <svg class="w-full h-full transform rotate-[-90deg]">
                                    <circle cx="50%" cy="50%" r="45%" fill="transparent" class="stroke-gray-700" stroke-width="6"></circle>
                                    <circle id="health-score-circle" cx="50%" cy="50%" r="45%" fill="transparent" class="stroke-green-400" stroke-width="6" stroke-linecap="round"></circle>
                                </svg>
                                <span id="overall-health-score" class="absolute inset-0 flex items-center justify-center text-2xl font-bold text-white">
                                    --
                                </span>
                            </div>
                            <span id="overall-health-status" class="mt-2 text-md font-medium text-gray-300">
                                Loading...
                            </span>
                        </div>
                    </div>
                    <div class="flex-grow ml-4">
                        <p id="health-change" class="text-red-400 text-xs font-semibold mt-2">
                            <i class="fas fa-arrow-up mr-1"></i> +0% from last week
                        </p>
                    </div>
                </div>

                <div class="space-y-3">
                    <h3 class="text-sm font-semibold text-gray-400 mb-2 uppercase tracking-wide" data-translate-key="health_factors_title">
                        Health Factors
                    </h3>
                    <div class="flex items-center">
                        <span class="text-xs text-gray-300 w-28" data-translate-key="soil_quality_factor">Soil Quality</span>
                        <div class="health-factor-progress flex-grow relative">
                            <div id="soil-quality-bar" class="health-factor-bar" style="width: 0%;"></div>
                        </div>
                        <span id="soil-quality-percent" class="text-xs font-bold w-12 text-right">0%</span>
                    </div>
                    <div class="flex items-center">
                        <span class="text-xs text-gray-300 w-28" data-translate-key="plant_health_factor">Plant Health</span>
                        <div class="health-factor-progress flex-grow relative">
                            <div id="plant-health-bar" class="health-factor-bar" style="width: 0%;"></div>
                        </div>
                        <span id="plant-health-percent" class="text-xs font-bold w-12 text-right">0%</span>
                    </div>
                    <div class="flex items-center">
                        <span class="text-xs text-gray-300 w-28" data-translate-key="water_management_factor">Water Management</span>
                        <div class="health-factor-progress flex-grow relative">
                            <div id="water-management-bar" class="health-factor-bar" style="width: 0%;"></div>
                        </div>
                        <span id="water-management-percent" class="text-xs font-bold w-12 text-right">0%</span>
                    </div>
                    <div class="flex items-center">
                        <span class="text-xs text-gray-300 w-28" data-translate-key="pest_control_factor">Pest Control</span>
                        <div class="health-factor-progress flex-grow relative">
                            <div id="pest-control-bar" class="health-factor-bar" style="width: 0%;"></div>
                        </div>
                        <span id="pest-control-percent" class="text-xs font-bold w-12 text-right">0%</span>
                    </div>
                    <div class="flex items-center">
                        <span class="text-xs text-gray-300 w-28" data-translate-key="environmental_factor">Environmental</span>
                        <div class="health-factor-progress flex-grow relative">
                            <div id="environmental-bar" class="health-factor-bar" style="width: 0%;"></div>
                        </div>
                        <span id="environmental-percent" class="text-xs font-bold w-12 text-right">0%</span>
                    </div>
                </div>
            </div>

            <!-- Live Camera Feed (Middle-Left) -->
            <div class="card lg:col-span-2 xl:row-span-2">
                <h2 class="text-lg font-semibold text-purple-300 mb-3 border-b border-gray-700 pb-2">
                    <i class="fas fa-video mr-2"></i> Live Camera Feed
                </h2>
                <div class="camera-feed-container flex-grow">
                    <video id="camera-video-feed" autoplay playsinline></video>
                    <div id="camera-feed-placeholder">
                        <i class="fas fa-camera-retro"></i>
                        <p>Camera feed is not available. Simulating...</p>
                    </div>
                    <span id="live-indicator" class="live-indicator hidden">LIVE</span>
                    <span id="connection-status" class="connection-status">Connecting...</span>
                    <div class="camera-controls">
                        <button id="camera-zoom-in" title="Zoom In"><i class="fas fa-search-plus"></i></button>
                        <button id="camera-capture" title="Capture Image"><i class="fas fa-camera"></i></button>
                        <button id="camera-zoom-out" title="Zoom Out"><i class="fas fa-search-minus"></i></button>
                    </div>
                    <div id="video-simulation-message" class="hidden">Video feed is a simulation.</div>
                </div>
            </div>

            <!-- Top Alerts (Middle-Right) -->
            <div class="card">
                <h2 class="text-lg font-semibold text-yellow-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="top_alerts_title">
                    <i class="fas fa-exclamation-triangle mr-2"></i> Top Alerts
                </h2>
                <ul id="top-alerts-list" class="space-y-2 flex-grow overflow-y-auto">
                    <!-- Alerts will be rendered here -->
                </ul>
            </div>

            <!-- Device Connectivity (Middle-Right) -->
            <div class="card">
                <h2 class="text-lg font-semibold text-indigo-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="device_connectivity_title">
                    <i class="fas fa-network-wired mr-2"></i> Device Connectivity
                </h2>
                <div class="space-y-4 flex-grow">
                    <div class="flex justify-between items-center">
                        <div class="flex items-center">
                            <i class="fas fa-satellite-dish text-indigo-400 text-lg mr-3"></i>
                            <span class="text-gray-300" data-translate-key="device_gateway">Gateway</span>
                        </div>
                        <span id="gateway-status" class="font-semibold text-gray-400">Checking...</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <div class="flex items-center">
                            <i class="fas fa-seedling text-indigo-400 text-lg mr-3"></i>
                            <span class="text-gray-300" data-translate-key="device_irrigation">Irrigation System</span>
                        </div>
                        <span id="irrigation-status" class="font-semibold text-gray-400">Checking...</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <div class="flex items-center">
                            <i class="fas fa-camera text-indigo-400 text-lg mr-3"></i>
                            <span class="text-gray-300" data-translate-key="device_camera">Camera</span>
                        </div>
                        <span id="camera-status" class="font-semibold text-gray-400">Checking...</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <div class="flex items-center">
                            <i class="fas fa-microchip text-indigo-400 text-lg mr-3"></i>
                            <span class="text-gray-300" data-translate-key="device_soil_sensors">Soil Sensors</span>
                        </div>
                        <span id="soil-sensor-status" class="font-semibold text-gray-400">Checking...</span>
                    </div>
                </div>
            </div>

            <!-- Interactive Map (Bottom-Left) -->
            <div class="card lg:col-span-2">
                <h2 class="text-lg font-semibold text-teal-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="farm_map_title">
                    <i class="fas fa-map-marked-alt mr-2"></i> Farm Map & Health Overview
                </h2>
                <div id="map-container" class="flex-grow">
                    <iframe id="map" src="https://www.google.com/maps/embed?pb=!1m17!1m12!1m3!1d14006.18206927515!2d77.21447029583712!3d28.64161741549445!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m2!1s0x390cfd2b4519962f%3A0xb36f787b6d1b2820!2sCentral%20Park%20Garden!5e0!3m2!1sen!2sin!4v1717011993414!5m2!1sen!2sin"
                        width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
                    <div id="map-loading">
                        <div class="loading-spinner mr-2"></div>
                        <span>Loading Map...</span>
                    </div>
                </div>
            </div>

            <!-- AI-Powered Pest & Disease Scan (Bottom-Right) -->
            <div class="card">
                <h2 class="text-lg font-semibold text-pink-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="pest_scan_title">
                    <i class="fas fa-bug mr-2"></i> AI-Powered Pest & Disease Scan
                </h2>
                <div class="flex flex-col items-center flex-grow justify-center text-center p-4">
                    <i class="fas fa-camera text-5xl text-pink-400 mb-4"></i>
                    <p class="text-sm text-gray-300 mb-4" data-translate-key="pest_scan_description">
                        Analyze crop images to detect pests, diseases, and nutrient deficiencies.
                    </p>
                    <button id="run-pest-scan-button" class="button-primary">
                        <i class="fas fa-search-plus mr-2"></i> <span data-translate-key="run_pest_scan_button">Run Scan</span>
                    </button>
                    <div id="pest-scan-results" class="mt-4 text-center">
                        <!-- Results will be displayed here -->
                    </div>
                </div>
            </div>

            <!-- AI Chatbot (Bottom-Right) -->
            <div class="card">
                <h2 class="text-lg font-semibold text-lime-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="chatbot_title">
                    <i class="fas fa-robot mr-2"></i> AI Farm Assistant
                </h2>
                <div class="chatbot-container flex-grow">
                    <div id="chatbot-messages">
                        <div class="message bot">
                            <span data-translate-key="chatbot_greeting">Hello! How can I assist you with your farm management today?</span>
                        </div>
                    </div>
                    <form id="chatbot-input-form">
                        <input id="chatbot-input" type="text" placeholder="Ask me about your crops, weather, or sensors..." class="w-full text-sm" data-translate-placeholder="chatbot_placeholder">
                        <button id="chatbot-send-button" type="submit" class="button-primary">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Message box for alerts -->
    <div id="message-box" class="hidden"></div>

    <!-- Overlay for Pest Scan Animation -->
    <div id="pest-scan-overlay" class="hidden">
        <div class="scan-spinner mb-4"></div>
        <p class="scan-text">Scanning for threats...</p>
        <div class="mt-4 text-gray-400">This is a simulation. Scan results will appear shortly.</div>
    </div>

    <!-- Include Google Translate API -->
    <script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>

    <script>
        // Set up the API key for text generation and TTS.
        const apiKey = "";
        let isSimulationMode = false;
        let userLatitude = null;
        let userLongitude = null;
        const TRANSLATE_TIMEOUT = 500;
        const DEFAULT_LOCATION = { lat: 28.6416, lon: 77.2145 };

        // --- Core Data Fetching and Rendering Functions ---

        /**
         * Fetches weather data for a given latitude and longitude.
         * @param {number} lat - Latitude.
         * @param {number} lon - Longitude.
         * @returns {Promise<Object>} Weather data object.
         */
        async function fetchWeatherData(lat, lon) {
            console.log(`Fetching weather data for lat: ${lat}, lon: ${lon}`);
            // This is a placeholder. In a real app, you would call a weather API.
            // Example: const response = await fetch(`https://api.weatherapi.com/v1/forecast.json?key=YOUR_API_KEY&q=${lat},${lon}&days=5`);
            await new Promise(r => setTimeout(r, 500)); // Simulate API delay
            return {
                city: 'New Delhi, India',
                forecast: [
                    { day: 'Today', temp: '32°C', condition: 'Sunny', icon: 'fas fa-sun', chance_of_rain: '10%' },
                    { day: 'Tomorrow', temp: '30°C', condition: 'Partly Cloudy', icon: 'fas fa-cloud-sun', chance_of_rain: '20%' },
                    { day: 'Day 3', temp: '29°C', condition: 'Light Rain', icon: 'fas fa-cloud-showers-heavy', chance_of_rain: '60%' },
                    { day: 'Day 4', temp: '31°C', condition: 'Clear', icon: 'fas fa-sun', chance_of_rain: '5%' }
                ]
            };
        }

        /**
         * Simulates fetching sensor data.
         * @returns {Object} Simulated sensor data.
         */
        function getSimulatedSensorData() {
            const data = {
                'soil-moisture': { value: Math.floor(Math.random() * (75 - 45 + 1)) + 45, unit: '%' },
                'temperature': { value: (Math.random() * (35 - 25) + 25).toFixed(1), unit: '°C' },
                'humidity': { value: Math.floor(Math.random() * (90 - 60 + 1)) + 60, unit: '%' },
                'ph': { value: (Math.random() * (7.5 - 6.0) + 6.0).toFixed(1), unit: '' },
                'light-intensity': { value: Math.floor(Math.random() * (80000 - 50000 + 1)) + 50000, unit: ' lux' },
                'rainfall': { value: (Math.random() * 5).toFixed(1), unit: ' mm' }
            };
            return data;
        }

        /**
         * Simulates generating alerts based on sensor data.
         * @param {Object} sensorData - The sensor data.
         * @returns {Array<Object>} An array of alert objects.
         */
        function getSimulatedAlerts(sensorData) {
            const alerts = [];
            if (sensorData['soil-moisture'].value < 50) {
                alerts.push({
                    message: "Soil moisture is low. Recommended to start irrigation.",
                    level: 'medium',
                    icon: 'fas fa-tint'
                });
            }
            if (sensorData['ph'].value < 6.5) {
                alerts.push({
                    message: "Soil pH is slightly acidic. Consider adjusting nutrient levels.",
                    level: 'low',
                    icon: 'fas fa-flask'
                });
            }
            if (sensorData['temperature'].value > 30) {
                alerts.push({
                    message: "High temperature detected. Ensure proper ventilation.",
                    level: 'low',
                    icon: 'fas fa-thermometer-half'
                });
            }
            if (sensorData['humidity'].value > 85) {
                alerts.push({
                    message: "High humidity detected. Potential for fungal growth.",
                    level: 'medium',
                    icon: 'fas fa-water'
                });
            }
            if (sensorData['rainfall'].value > 3) {
                alerts.push({
                    message: "Heavy rainfall detected. Check for drainage issues.",
                    level: 'high',
                    icon: 'fas fa-cloud-showers-heavy'
                });
            }

            // Fallback for no alerts
            if (alerts.length === 0) {
                alerts.push({
                    message: "All systems are operating within optimal parameters.",
                    level: 'low',
                    icon: 'fas fa-check-circle'
                });
            }
            return alerts;
        }

        /**
         * Simulates getting a list of events.
         * @returns {Array<Object>} An array of event objects.
         */
        function getSimulatedRecentEvents() {
            const now = new Date();
            const events = [
                { text: 'Irrigation cycle started for Field 1.', time: `${now.getHours() - 1}:${now.getMinutes().toString().padStart(2, '0')}` },
                { text: 'Soil sensor data received from Field 2.', time: `${now.getHours()}:${(now.getMinutes() - 5).toString().padStart(2, '0')}` },
                { text: 'Pest scan completed successfully. No threats detected.', time: `${now.getHours()}:${(now.getMinutes() - 10).toString().padStart(2, '0')}` }
            ];
            // Add a high-level alert event if there's a problem
            if (Math.random() > 0.7) {
                events.unshift({
                    text: 'High temperature alert triggered.',
                    time: `${now.getHours()}:${(now.getMinutes() - 1).toString().padStart(2, '0')}`
                });
            }
            return events;
        }

        /**
         * Renders the weather forecast data.
         * @param {Object} weatherData - The weather data object.
         */
        function renderWeatherData(weatherData) {
            const container = document.getElementById('weather-forecast-container');
            if (!container) return;

            const html = weatherData.forecast.map(day => `
                <div class="weather-day flex items-center justify-between">
                    <div class="flex items-center space-x-2 w-1/3">
                        <i class="${day.icon} text-lg text-blue-400"></i>
                        <span class="text-sm font-medium text-gray-300" data-translate-key="weather_day_${day.day.toLowerCase().replace(/ /g, '_')}">${day.day}</span>
                    </div>
                    <span class="text-sm text-gray-400 w-1/3 text-center" data-translate-key="weather_condition_${day.condition.toLowerCase().replace(/ /g, '_')}">${day.condition}</span>
                    <span class="text-sm font-bold text-gray-200 w-1/3 text-right">${day.temp}</span>
                </div>
            `).join('');

            container.innerHTML = `<h3 class="text-md font-bold mb-2">${weatherData.city}</h3>` + html;
        }

        /**
         * Updates a circular progress gauge with a new value.
         * @param {string} idPrefix - The prefix for the element IDs (e.g., 'soil-moisture').
         * @param {number} value - The new value.
         * @param {string} unit - The unit for the value (e.g., '%').
         * @param {number} max - The maximum value for the gauge.
         * @param {string} updateTime - The timestamp of the update.
         */
        function updateGauge(idPrefix, value, unit, max, updateTime) {
            const gaugeContainer = document.querySelector(`.circular-progress.${idPrefix}`);
            const progressValueEl = gaugeContainer?.querySelector('.progress-value');
            const progressCircleEl = gaugeContainer?.querySelector('.progress-circle');
            const updateTimeEl = document.getElementById(`${idPrefix}-update`);

            if (gaugeContainer && progressValueEl && progressCircleEl) {
                const circumference = 2 * Math.PI * 45; // 2 * pi * radius
                const progress = (value / max) * circumference;

                // Ensure value is within bounds for stroke-dasharray
                const clampedProgress = Math.min(progress, circumference);

                progressValueEl.textContent = `${value}${unit}`;
                progressCircleEl.style.strokeDasharray = `${clampedProgress}, ${circumference}`;
            }

            if (updateTimeEl) {
                updateTimeEl.textContent = `Updated: ${updateTime}`;
            }
        }

        /**
         * Renders all sensor data gauges.
         * @param {Object} sensorData - The sensor data object.
         */
        function renderSensorData(sensorData) {
            const now = new Date().toLocaleTimeString();

            // Maximum values for each gauge to calculate percentage
            const maxValues = {
                'soil-moisture': 100,
                'temperature': 50,
                'humidity': 100,
                'ph': 14,
                'light-intensity': 100000,
                'rainfall': 10
            };

            for (const sensor in sensorData) {
                const data = sensorData[sensor];
                updateGauge(sensor, data.value, data.unit, maxValues[sensor], now);
            }
        }

        /**
         * Renders a top-level alerts list.
         * @param {Array<Object>} alerts - An array of alert objects.
         */
        function renderTopAlerts(alerts) {
            const alertsList = document.getElementById('top-alerts-list');
            if (!alertsList) return;

            alertsList.innerHTML = ''; // Clear previous alerts

            const alertIcons = {
                low: 'fas fa-bell',
                medium: 'fas fa-exclamation-circle',
                high: 'fas fa-exclamation-triangle'
            };

            alerts.forEach(alert => {
                const li = document.createElement('li');
                li.className = `alert-item alert-${alert.level}`;
                li.innerHTML = `
                    <i class="${alertIcons[alert.level]}"></i>
                    <span>${alert.message}</span>
                `;
                alertsList.appendChild(li);
            });
        }

        /**
         * Renders the raw data table.
         * @param {Array<Object>} rawData - The raw sensor data to display.
         */
        function renderRawDataTable(rawData) {
            const tableContainer = document.getElementById('raw-data-table');
            if (!tableContainer) {
                console.error("Raw data table container not found.");
                return;
            }

            tableContainer.innerHTML = '';

            if (!rawData || rawData.length === 0) {
                tableContainer.innerHTML = `<p class="text-gray-400 p-4 text-center">No sensor data to display.</p>`;
                return;
            }

            const table = document.createElement('table');
            table.classList.add('min-w-full', 'table-auto');
            const thead = document.createElement('thead');
            const headerRow = document.createElement('tr');
            const headers = Object.keys(rawData[0]);

            headers.forEach(headerText => {
                const th = document.createElement('th');
                th.textContent = headerText.replace(/_/g, ' ').replace(/\b\w/g, char => char.toUpperCase());
                th.classList.add('px-2', 'py-1.5', 'text-left', 'text-gray-200', 'bg-gray-700', 'font-semibold');
                headerRow.appendChild(th);
            });

            thead.appendChild(headerRow);
            table.appendChild(thead);

            const tbody = document.createElement('tbody');
            rawData.forEach(rowData => {
                const tr = document.createElement('tr');
                tr.classList.add('hover:bg-gray-700', 'transition-colors', 'duration-150');
                headers.forEach(headerText => {
                    const td = document.createElement('td');
                    let value = rowData[headerText];
                    if (value === null || value === undefined) {
                        value = '';
                    } else if (typeof value === 'number') {
                        value = value.toFixed(2);
                    }
                    td.textContent = value;
                    td.classList.add('px-2', 'py-1.5', 'border-b', 'border-gray-600', 'text-gray-300');
                    tr.appendChild(td);
                });
                tbody.appendChild(tr);
            });

            table.appendChild(tbody);
            tableContainer.appendChild(table);
        }

        /**
         * Renders a message in the specified element.
         * @param {HTMLElement} element - The element to render the message in.
         * @param {string} message - The message text.
         * @param {string} type - 'info', 'success', or 'error'.
         */
        function displayMessage(element, message, type) {
            const baseClasses = "p-4 rounded-xl text-center font-medium";
            let colorClasses;
            switch(type) {
                case 'info':
                    colorClasses = "bg-blue-900 text-blue-200";
                    break;
                case 'success':
                    colorClasses = "bg-green-900 text-green-200";
                    break;
                case 'error':
                    colorClasses = "bg-red-900 text-red-200";
                    break;
                default:
                    colorClasses = "bg-gray-700 text-gray-200";
            }
            element.innerHTML = `<div class="${baseClasses} ${colorClasses}">${message}</div>`;
        }

        /**
         * Simulates getting farm health data.
         * @returns {Object} Simulated farm health data.
         */
        function getSimulatedFarmHealthData() {
            const overallScore = Math.floor(Math.random() * (95 - 70 + 1)) + 70;
            let status = "Good";
            if (overallScore < 75) status = "Fair";
            if (overallScore < 60) status = "Poor";

            const healthFactors = {
                'soil-quality': Math.floor(Math.random() * (98 - 80 + 1)) + 80,
                'plant-health': Math.floor(Math.random() * (95 - 75 + 1)) + 75,
                'water-management': Math.floor(Math.random() * (90 - 70 + 1)) + 70,
                'pest-control': Math.floor(Math.random() * (90 - 70 + 1)) + 70,
                'environmental': Math.floor(Math.random() * (98 - 85 + 1)) + 85
            };
            const healthChange = (Math.random() * 10 - 5).toFixed(0);
            const changeIcon = healthChange >= 0 ? 'fa-arrow-up' : 'fa-arrow-down';
            const changeColor = healthChange >= 0 ? 'text-green-400' : 'text-red-400';

            return { overallScore, status, healthFactors, healthChange, changeIcon, changeColor };
        }

        /**
         * Renders the Farm Health Index.
         */
        async function renderFarmHealthIndex() {
            const healthData = getSimulatedFarmHealthData();
            const overallHealthScoreElement = document.getElementById('overall-health-score');
            const overallHealthStatusElement = document.getElementById('overall-health-status');
            const healthScoreCircleElement = document.getElementById('health-score-circle');
            const healthChangeElement = document.getElementById('health-change');

            if (overallHealthScoreElement) overallHealthScoreElement.textContent = healthData.overallScore;
            if (overallHealthStatusElement) overallHealthStatusElement.textContent = healthData.status;

            if (healthScoreCircleElement) {
                const circumference = 2 * Math.PI * 45;
                const progress = (healthData.overallScore / 100) * circumference;
                healthScoreCircleElement.style.strokeDasharray = `${progress}, ${circumference}`;
                healthScoreCircleElement.style.stroke = healthData.overallScore >= 75 ? '#48bb78' : (healthData.overallScore >= 60 ? '#F6AD55' : '#E53E3E');
            }

            for (const factor in healthData.healthFactors) {
                const percent = healthData.healthFactors[factor];
                const percentElement = document.getElementById(`${factor}-percent`);
                const barElement = document.getElementById(`${factor}-bar`);
                if (percentElement) percentElement.textContent = `${percent}%`;
                if (barElement) barElement.style.width = `${percent}%`;
            }

            if (healthChangeElement) {
                healthChangeElement.innerHTML = `<i class="fas ${healthData.changeIcon} mr-1"></i> ${healthData.healthChange >= 0 ? '+' : ''}${healthData.healthChange}% <span data-translate-key="from_last_week">from last week</span>`;
                healthChangeElement.className = `${healthData.changeColor} text-xs font-semibold mt-2`;
            }
        }

        /**
         * Simulates device connectivity data.
         * @returns {Object} Simulated device connectivity.
         */
        function getSimulatedDeviceConnectivity() {
            const statuses = ['Online', 'Offline', 'Active', 'Inactive', 'Connected', 'Disconnected'];
            const getRandomStatus = () => statuses[Math.floor(Math.random() * statuses.length)];
            return {
                gateway: Math.random() < 0.9 ? 'Online' : 'Offline',
                irrigation: Math.random() < 0.8 ? 'Active' : 'Inactive',
                camera: `${Math.floor(Math.random() * 4)}/3 Connected`,
                soil: Math.random() < 0.95 ? 'All Online' : 'Some Offline'
            };
        }

        /**
         * Renders device connectivity status.
         */
        async function renderDeviceConnectivity() {
            const connectivity = getSimulatedDeviceConnectivity();
            const updateStatus = async (id, statusText) => {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = statusText;
                    element.className = 'font-semibold ' + (statusText.includes('Online') || statusText.includes('Active') || statusText.includes('Connected') ? 'text-green-400' : 'text-red-400');
                    element.innerHTML = `<i class="fas fa-circle text-xs mr-1"></i> ${statusText}`;
                }
            };
            updateStatus('gateway-status', connectivity.gateway);
            updateStatus('irrigation-status', connectivity.irrigation);
            updateStatus('camera-status', connectivity.camera);
            updateStatus('soil-sensor-status', connectivity.soil);
        }

        /**
         * Simulates pest scan data.
         * @returns {Object} Simulated pest scan results.
         */
        function getSimulatedPestScanResults() {
            const results = [
                { status: 'No threats detected. Your crops are healthy!', type: 'success' },
                { status: 'Minor pest activity detected in Sector C. Recommend localized treatment.', type: 'warning', details: ['Aphids (low concentration)'] },
                { status: 'Disease detected in Field 2. Immediate action required.', type: 'error', details: ['Fungal blight (moderate)'] }
            ];
            return results[Math.floor(Math.random() * results.length)];
        }

        /**
         * Simulates running a pest scan.
         */
        async function runPestScan() {
            const scanButton = document.getElementById('run-pest-scan-button');
            const overlay = document.getElementById('pest-scan-overlay');
            const resultsDiv = document.getElementById('pest-scan-results');

            if (!scanButton || !overlay || !resultsDiv) return;

            // Show overlay and disable button
            overlay.classList.remove('hidden');
            overlay.classList.add('flex');
            scanButton.disabled = true;

            // Simulate scanning delay
            await new Promise(r => setTimeout(r, 3000));

            const results = getSimulatedPestScanResults();

            // Hide overlay and re-enable button
            overlay.classList.add('hidden');
            overlay.classList.remove('flex');
            scanButton.disabled = false;

            // Display results
            let colorClass = 'text-green-400';
            if (results.type === 'warning') colorClass = 'text-yellow-400';
            if (results.type === 'error') colorClass = 'text-red-400';

            let detailsHtml = '';
            if (results.details) {
                detailsHtml = `
                    <ul class="list-disc list-inside mt-2 text-sm text-gray-400">
                        ${results.details.map(d => `<li>${d}</li>`).join('')}
                    </ul>
                `;
            }

            resultsDiv.innerHTML = `
                <div class="${colorClass} mt-2 text-sm font-semibold">
                    <i class="fas ${results.type === 'success' ? 'fa-check-circle' : (results.type === 'warning' ? 'fa-exclamation-circle' : 'fa-times-circle')} mr-1"></i>
                    ${results.status}
                </div>
                ${detailsHtml}
            `;
        }

        /**
         * Fetches all dashboard data and renders it.
         */
        async function fetchDataAndRender() {
            const lat = userLatitude || DEFAULT_LOCATION.lat;
            const lon = userLongitude || DEFAULT_LOCATION.lon;

            // Using Promise.all to fetch data concurrently
            const [
                weatherData,
                sensorData,
                recentEvents,
                farmHealthData,
                connectivityData,
            ] = await Promise.all([
                fetchWeatherData(lat, lon),
                // Wrap simulated data in a Promise to match the async flow
                new Promise(resolve => resolve(getSimulatedSensorData())),
                new Promise(resolve => resolve(getSimulatedRecentEvents())),
                new Promise(resolve => resolve(getSimulatedFarmHealthData())),
                new Promise(resolve => resolve(getSimulatedDeviceConnectivity()))
            ]);

            renderWeatherData(weatherData);
            renderSensorData(sensorData);
            renderTopAlerts(getSimulatedAlerts(sensorData));
            renderRawDataTable([
                { timestamp: new Date().toISOString(), ...sensorData['soil-moisture'], ...sensorData['temperature'], ...sensorData['humidity'], ...sensorData['ph'], ...sensorData['light-intensity'], ...sensorData['rainfall'] },
                { timestamp: new Date(Date.now() - 60000).toISOString(), ...getSimulatedSensorData() },
                { timestamp: new Date(Date.now() - 120000).toISOString(), ...getSimulatedSensorData() },
            ].map(d => {
                const newD = {};
                for (const key in d) {
                    if (d[key] && typeof d[key] === 'object' && 'value' in d[key]) {
                        newD[key] = d[key].value;
                    } else {
                        newD[key] = d[key];
                    }
                }
                return newD;
            }));
            renderFarmHealthIndex();
            renderDeviceConnectivity();
        }

        // --- Camera Feed Functions (Simulated) ---

        let videoStream = null;

        /**
         * Starts a simulated camera feed.
         */
        function startCameraFeed() {
            const videoEl = document.getElementById('camera-video-feed');
            const placeholderEl = document.getElementById('camera-feed-placeholder');
            const liveIndicator = document.getElementById('live-indicator');
            const connStatus = document.getElementById('connection-status');
            const simMessage = document.getElementById('video-simulation-message');

            if (!videoEl || !placeholderEl || !liveIndicator || !connStatus || !simMessage) return;

            // We are using a placeholder image and simulating a video stream.
            // In a real application, you would use `navigator.mediaDevices.getUserMedia`.
            if (isSimulationMode) {
                // Show simulation message
                simMessage.classList.remove('hidden');

                // Simulate video playing
                setTimeout(() => {
                    placeholderEl.style.display = 'none';
                    videoEl.style.display = 'block';
                    liveIndicator.classList.remove('hidden');
                    connStatus.textContent = 'Connected';
                    connStatus.className = 'connection-status text-green-400';
                }, 1500);
            } else {
                simMessage.classList.add('hidden');
                placeholderEl.style.display = 'flex';
                videoEl.style.display = 'none';
                liveIndicator.classList.add('hidden');
                connStatus.textContent = 'Simulated';
                connStatus.className = 'connection-status text-yellow-400';
            }
        }

        /**
         * Stops the camera feed.
         */
        function stopCameraFeed() {
            if (videoStream) {
                videoStream.getTracks().forEach(track => track.stop());
                videoStream = null;
                console.log("Camera feed stopped.");
            }
        }

        // --- Geolocation Functions ---

        /**
         * Gets the user's current location using the Geolocation API.
         * @returns {Promise<Object>} A promise that resolves with latitude and longitude.
         */
        function getUserLocation() {
            return new Promise((resolve, reject) => {
                if (!navigator.geolocation) {
                    reject(new Error("Geolocation is not supported by this browser."));
                } else {
                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            resolve({
                                lat: position.coords.latitude,
                                lon: position.coords.longitude
                            });
                        },
                        (error) => {
                            let errorMessage = "Unable to retrieve your location.";
                            switch (error.code) {
                                case error.PERMISSION_DENIED:
                                    errorMessage = "User denied the request for Geolocation.";
                                    break;
                                case error.POSITION_UNAVAILABLE:
                                    errorMessage = "Location information is unavailable.";
                                    break;
                                case error.TIMEOUT:
                                    errorMessage = "The request to get user location timed out.";
                                    break;
                            }
                            reject(new Error(errorMessage));
                        }
                    );
                }
            });
        }

        // --- Other Utility Functions ---

        /**
         * Displays a temporary message box.
         * @param {string} message - The message to display.
         */
        function showMessageBox(message) {
            const box = document.getElementById('message-box');
            if (box) {
                box.textContent = message;
                box.classList.remove('hidden');
                setTimeout(() => {
                    box.classList.add('hidden');
                }, 5000); // Hide after 5 seconds
            }
        }

        /**
         * Toggles the visibility of a collapsible section.
         * @param {string} contentId - The ID of the content to toggle.
         */
        function toggleExpander(contentId) {
            const content = document.getElementById(contentId);
            const icon = content.previousElementSibling?.querySelector('.fas');

            if (!content || !icon) {
                console.warn(`Expander content or icon not found for ${contentId}.`);
                return;
            }

            if (content.classList.contains('hidden')) {
                content.classList.remove('hidden');
                icon.classList.remove('fa-chevron-down');
                icon.classList.add('fa-chevron-up');
            } else {
                content.classList.add('hidden');
                icon.classList.remove('fa-chevron-up');
                icon.classList.add('fa-chevron-down');
            }
        }

        /**
         * Sets the simulation mode and persists it in local storage.
         * @param {boolean} mode - true for simulation, false for real.
         */
        function setSimulationMode(mode) {
            isSimulationMode = mode;
            localStorage.setItem('simulationMode', mode ? 'true' : 'false');
            console.log(`Simulation mode set to: ${isSimulationMode}`);
            // Re-render everything with new mode
            fetchDataAndRender();
            startCameraFeed();
        }

        /**
         * Retrieves the initial simulation mode from local storage.
         */
        function getAndSetInitialMode() {
            const savedMode = localStorage.getItem('simulationMode');
            const toggle = document.getElementById('simulation-mode-toggle');
            if (savedMode === 'true') {
                isSimulationMode = true;
                if (toggle) toggle.checked = true;
            } else {
                isSimulationMode = false;
                if (toggle) toggle.checked = false;
            }
        }

        // --- Text-to-Speech (TTS) Functions using Gemini API ---
        
        /**
         * Converts base64 PCM audio data to a playable WAV Blob.
         * @param {string} base64Data - The base64 encoded PCM data.
         * @param {number} sampleRate - The sample rate of the audio (e.g., 16000).
         * @returns {Blob} The WAV audio Blob.
         */
        function pcmToWav(base64Data, sampleRate) {
            const pcmData = Uint8Array.from(atob(base64Data), c => c.charCodeAt(0));
            const pcm16 = new Int16Array(pcmData.buffer);

            const numChannels = 1;
            const bitsPerSample = 16;
            const byteRate = sampleRate * numChannels * bitsPerSample / 8;
            const blockAlign = numChannels * bitsPerSample / 8;

            const wavHeader = new ArrayBuffer(44);
            const view = new DataView(wavHeader);

            // RIFF chunk
            writeString(view, 0, 'RIFF');
            view.setUint32(4, 36 + pcmData.length, true);
            writeString(view, 8, 'WAVE');

            // fmt chunk
            writeString(view, 12, 'fmt ');
            view.setUint32(16, 16, true);
            view.setUint16(20, 1, true); // AudioFormat: 1 for PCM
            view.setUint16(22, numChannels, true);
            view.setUint32(24, sampleRate, true);
            view.setUint32(28, byteRate, true);
            view.setUint16(32, blockAlign, true);
            view.setUint16(34, bitsPerSample, true);

            // data chunk
            writeString(view, 36, 'data');
            view.setUint32(40, pcmData.length, true);

            const combined = new Blob([wavHeader, pcmData], { type: 'audio/wav' });
            return combined;
        }

        function writeString(view, offset, string) {
            for (let i = 0; i < string.length; i++) {
                view.setUint8(offset + i, string.charCodeAt(i));
            }
        }

        /**
         * Plays audio from base64 PCM data using the Web Audio API.
         * @param {string} audioData - Base64 encoded PCM audio data.
         * @param {string} mimeType - The mime type of the audio.
         */
        async function playAudio(audioData, mimeType) {
            try {
                const sampleRateMatch = mimeType.match(/rate=(\d+)/);
                if (!sampleRateMatch) {
                    throw new Error("Could not extract sample rate from mime type.");
                }
                const sampleRate = parseInt(sampleRateMatch[1], 10);
                
                const audioBlob = pcmToWav(audioData, sampleRate);
                const audioUrl = URL.createObjectURL(audioBlob);

                const audio = new Audio(audioUrl);
                await audio.play();
                console.log("Audio played successfully.");
            } catch (error) {
                console.error("Error playing audio:", error);
            }
        }

        /**
         * Fetches TTS audio from the Gemini API.
         * @param {string} text - The text to be converted to speech.
         * @returns {Promise<Object>} An object containing audio data and mime type.
         */
        async function getTTS(text) {
            let retries = 0;
            const maxRetries = 5;
            let delay = 1000;

            while (retries < maxRetries) {
                try {
                    const payload = {
                        contents: [{
                            parts: [{ text: text }]
                        }],
                        generationConfig: {
                            responseModalities: ["AUDIO"],
                            speechConfig: {
                                voiceConfig: {
                                    prebuiltVoiceConfig: { voiceName: "Rasalgethi" }
                                }
                            }
                        },
                        model: "gemini-2.5-flash-preview-tts"
                    };

                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${apiKey}`;
                    
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        throw new Error(`API call failed with status: ${response.status}`);
                    }

                    const result = await response.json();
                    const part = result?.candidates?.[0]?.content?.parts?.[0];
                    const audioData = part?.inlineData?.data;
                    const mimeType = part?.inlineData?.mimeType;

                    if (audioData && mimeType) {
                        return { audioData, mimeType };
                    } else {
                        throw new Error("Invalid API response format: Missing audio data or mime type.");
                    }
                } catch (error) {
                    console.error(`Attempt ${retries + 1} failed:`, error);
                    retries++;
                    if (retries < maxRetries) {
                        await new Promise(res => setTimeout(res, delay));
                        delay *= 2;
                    }
                }
            }
            throw new Error("Failed to get TTS audio after multiple retries.");
        }

        /**
         * Reads the top alerts aloud using TTS.
         */
        async function playTopAlerts() {
            const alertsList = document.getElementById('top-alerts-list');
            const alerts = alertsList.querySelectorAll('.alert-item');
            const playButton = document.getElementById('play-top-alerts-button');

            if (alerts.length === 0 || playButton.disabled) {
                showMessageBox("No alerts to play or playback in progress.");
                return;
            }

            // Disable button during playback
            playButton.disabled = true;
            playButton.innerHTML = `<i class="fas fa-spinner fa-spin mr-2"></i> Playing...`;

            try {
                for (const alert of alerts) {
                    const message = alert.querySelector('span').textContent;
                    console.log(`Playing alert: "${message}"`);
                    const { audioData, mimeType } = await getTTS(message);
                    await playAudio(audioData, mimeType);
                }
                showMessageBox("Finished playing alerts.");
            } catch (error) {
                console.error("Failed to play alerts:", error);
                showMessageBox("Error: Could not play alerts.");
            } finally {
                // Re-enable button after playback is complete or an error occurs
                playButton.disabled = false;
                playButton.innerHTML = `<i class="fas fa-volume-up mr-2"></i> Play Top Alerts`;
            }
        }

        // --- Google Translate Functions ---

        /**
         * The standard callback function for Google Translate API.
         * It initializes the Google Translate widget and hides the default select box.
         */
        function googleTranslateElementInit() {
            new google.translate.TranslateElement({
                pageLanguage: 'en',
                includedLanguages: 'en,hi,bn,te,mr,ta,gu,kn,ml,pa',
                layout: google.translate.TranslateElement.InlineLayout.SIMPLE,
                autoDisplay: false
            }, 'google_translate_element');
        }

        /**
         * Function to set the Google Translate cookie and reload the page.
         * This is a workaround for programmatic translation.
         * @param {string} lang - The language code to translate to.
         */
        function doGTranslate(lang) {
            // Check if the Google Translate widget is loaded
            if (typeof google === 'undefined' || !google.translate) {
                console.error('Google Translate API not loaded.');
                showMessageBox('Translation service not available. Please try again later.');
                return;
            }
            if (lang === 'en') {
                // Remove the translate cookie to revert to the original language
                document.cookie = 'googtrans=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/';
                window.location.reload();
            } else {
                // Set the translate cookie for the new language
                const googtrans = `/en/${lang}`;
                document.cookie = `googtrans=${googtrans}; path=/`;
                window.location.reload();
            }
        }

        // --- Main Event Listeners ---

        document.addEventListener('DOMContentLoaded', async () => {
            // Attempt to get user location first
            try {
                const coords = await getUserLocation();
                userLatitude = coords.lat;
                userLongitude = coords.lon;
                console.log("User location obtained:", userLatitude, userLongitude);
            } catch (error) {
                console.warn(error.message);
                // userLatitude and userLongitude remain null, so renderWeatherData will use default city
            }

            getAndSetInitialMode();
            fetchDataAndRender(); // Fetch initial data
            setInterval(fetchDataAndRender, 30000); // Refresh data every 30 seconds

            document.getElementById('refresh-button')?.addEventListener('click', fetchDataAndRender);

            document.getElementById('simulation-mode-toggle')?.addEventListener('change', (event) => {
                setSimulationMode(event.target.checked);
            });

            document.getElementById('run-pest-scan-button')?.addEventListener('click', runPestScan);

            document.getElementById('play-top-alerts-button')?.addEventListener('click', playTopAlerts);

            // Event listener for the custom language selector
            document.getElementById('customLanguageSelect')?.addEventListener('change', (event) => {
                const selectedLang = event.target.value;
                if (selectedLang) {
                    doGTranslate(selectedLang);
                }
            });

            // Start camera feed when the page loads
            startCameraFeed();
        });

        // Ensure camera feed is stopped when navigating away
        window.addEventListener('beforeunload', stopCameraFeed);
    </script>
</body>
</html>
