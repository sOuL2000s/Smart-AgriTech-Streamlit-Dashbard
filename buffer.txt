<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart AgriTech Dashboard</title>
    <!-- Favicon: A simple SVG icon for the browser tab -->
    <link rel="icon" href="android-chrome-192x192.png" type="image/png">
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Plotly.js CDN for charts -->
    <script src="https://cdn.plot.ly/plotly-2.32.0.min.js"></script>
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Google Fonts: Exo 2 for headings, Inter for body, Michroma for main title -->
    <link href="https://fonts.googleapis.com/css2?family=Exo+2:wght@700;800&family=Inter:wght@400;500;600&family=Michroma&display=swap" rel="stylesheet">

    <style>
        /* Base styles for body and font */
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url('pexels-madebymath-21393.jpg') no-repeat center center fixed; /* Placeholder image */
            background-size: cover;
            color: #e2e8f0; /* Light text */
            min-height: 100vh; /* Ensure full viewport height */
            display: flex;
            flex-direction: column;
            overflow-x: hidden; /* Prevent horizontal scroll */
        }

        /* Apply Michroma font to the main title */
        .font-michroma {
            font-family: 'Michroma', sans-serif;
        }

        /* Custom Scrollbar for Webkit browsers */
        ::-webkit-scrollbar {
            width: 8px; /* Width of the vertical scrollbar */
            height: 8px; /* Height of the horizontal scrollbar */
        }

        ::-webkit-scrollbar-track {
            background: rgba(45, 55, 72, 0.7); /* Darker track background */
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb {
            background: #68D391; /* Green thumb */
            border-radius: 10px;
            border: 2px solid rgba(45, 55, 72, 0.7); /* Border to make it appear thinner */
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #48bb78; /* Darker green on hover */
        }

        /* Main container for content */
        .container {
            max-width: 1500px; /* Increased max-width for more content */
            margin: 0 auto;
            padding: 0.75rem; /* Further reduced padding */
            flex-grow: 1; /* Allow container to grow */
            animation: fadeIn 1s ease-out forwards; /* Fade-in animation for the whole container */
            opacity: 0; /* Start invisible for animation */
            display: flex;
            flex-direction: column;
        }
        @media (min-width: 640px) { /* sm breakpoint */
            .container {
                padding: 1rem; /* Slightly more padding on larger screens */
            }
        }

        /* Card styling */
        .card {
            background-color: rgba(45, 55, 72, 0.5); /* Semi-transparent card background */
            border-radius: 1.5rem; /* rounded-3xl for more pronounced corners */
            padding: 1.25rem; /* Reduced padding */
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3), 0 5px 10px rgba(0, 0, 0, 0.2);
            border: 1px solid #4a5568; /* Subtle border */
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out; /* Smooth hover effect */
            position: relative;
            overflow: hidden; /* Ensure content stays within rounded corners */
            display: flex; /* Make cards flex containers */
            flex-direction: column; /* Stack content vertically */
            min-height: 0; /* Allow cards to shrink as needed */
        }

        .card:hover {
            transform: translateY(-8px) scale(1.01);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4), 0 8px 15px rgba(0, 0, 0, 0.3);
        }

        /* Button styling enhancements */
        .button-primary {
            background: linear-gradient(45deg, #48bb78, #38a169); /* Green gradient */
            border: none;
            color: white;
            font-weight: bold;
            padding: 0.6rem 1.2rem; /* Reduced padding */
            border-radius: 0.75rem; /* rounded-xl */
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease-in-out;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem; /* text-sm */
        }

        .button-primary:hover {
            background: linear-gradient(45deg, #38a169, #2f855a); /* Darker green on hover */
            transform: translateY(-3px) scale(1.02);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        .button-primary:active {
            transform: translateY(0);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        /* Secondary button for play alerts */
        .button-secondary {
            background: linear-gradient(45deg, #63b3ed, #4299e1); /* Blue gradient */
            border: none;
            color: white;
            font-weight: bold;
            padding: 0.6rem 1.2rem; /* Reduced padding */
            border-radius: 0.75rem; /* rounded-xl */
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease-in-out;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem; /* text-sm */
        }

        .button-secondary:hover {
            background: linear-gradient(45deg, #4299e1, #3182ce); /* Darker blue on hover */
            transform: translateY(-3px) scale(1.02);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }

        .button-secondary:active {
            transform: translateY(0);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        /* Fade-in animation */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Custom scrollbar for raw data table */
        .dataframe-container {
            max-height: 200px; /* Further adjusted max-height */
            overflow-y: auto;
            border-radius: 0.75rem; /* rounded-xl */
            background-color: rgba(0,0,0,0); /* Transparent background */
            border: 1px solid #4a5568;
            flex-grow: 1; /* Allow table to grow */
        }

        /* Table styling within dataframe-container */
        .dataframe-container table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.8rem; /* Further smaller font for density */
        }

        .dataframe-container th, .dataframe-container td {
            padding: 0.5rem 0.7rem; /* Further reduced padding */
            border-bottom: 1px solid #4a5568;
            text-align: left;
        }

        .dataframe-container th {
            background-color: rgba(74, 85, 104, 0.7); /* Semi-transparent header */
            font-weight: bold;
            color: #e2e8f0;
            position: sticky;
            top: 0;
            z-index: 1;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .dataframe-container tr:nth-child(even) {
            background-color: rgba(45, 55, 72, 0.3);
        }
        .dataframe-container tr:nth-child(odd) {
            background-color: rgba(36, 44, 56, 0.3);
        }
        .dataframe-container tr:hover {
            background-color: rgba(74, 85, 104, 0.5);
        }

        /* Loading spinner animation */
        .loading-spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
            display: inline-block;
            vertical-align: middle;
            margin-right: 8px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Custom select box styling for Google Translate */
        #google_translate_element {
            /* Adjust this to fit your design */
            margin-left: 10px;
            display: none; /* Keep this hidden as we use a custom select */
        }
        /* Adjust body top padding which Google Translate adds */
        body {
            top: 0px !important;
        }

        /* Custom Language Select Styling */
        #customLanguageSelect {
            width: auto; /* Adjusted to fit content */
            max-height: 200px;
            overflow-y: auto;
            background: rgba(45, 55, 72, 0.8);
            color: #e2e8f0;
            border: 1px solid #4a5568;
            padding: 0.4rem 0.6rem;
            border-radius: 0.75rem;
            font-size: 0.9rem;
            appearance: none; /* Remove default arrow */
            -webkit-appearance: none;
            -moz-appearance: none;
            background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23e2e8f0%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13.2-6.4H18.2c-4.8%200-9.3%201.8-13.2%206.4-4.2%204.4-6.4%2010.2-6.4%2016.3%200%206.1%202.2%2011.9%206.4%2016.3l127.4%20127.3c4.2%204.4%2010.2%206.4%2016.3%206.4s11.9-2.2%2016.3-6.4L287%20102c4.2-4.4%206.4-10.2%206.4-16.3S291.2%2073.8%20287%2069.4z%22%2F%3E%3C%2Fsvg%3E');
            background-repeat: no-repeat;
            background-position: right 0.8rem center;
            background-size: 0.8em;
            padding-right: 2.5rem; /* Make space for the custom arrow */
        }
        #customLanguageSelect:focus {
            outline: none;
            border-color: #68D391;
            box-shadow: 0 0 0 2px rgba(104, 211, 145, 0.5);
        }
        #customLanguageSelect option {
            background-color: #2d3748;
            color: #e2e8f0;
        }
        #customLanguageSelect option:hover {
            background-color: #4a5568;
        }


        /* Toggle Switch Styles */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 80px; /* Reduced width */
            height: 30px; /* Reduced height */
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #4a5568;
            -webkit-transition: .4s;
            transition: .4s;
            border-radius: 30px; /* Adjusted radius */
            box-shadow: inset 0 0 5px rgba(0,0,0,0.3);
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 22px; /* Adjusted size */
            width: 22px; /* Adjusted size */
            left: 4px;
            bottom: 4px;
            background-color: #e2e8f0;
            -webkit-transition: .4s;
            transition: .4s;
            border-radius: 50%;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        input:checked + .slider {
            background-color: #48bb78;
            box-shadow: inset 0 0 5px rgba(0,0,0,0.3);
        }

        input:focus + .slider {
            box-shadow: 0 0 1px #48bb78;
        }

        input:checked + .slider:before {
            -webkit-transform: translateX(50px); /* Adjusted for narrower switch */
            -ms-transform: translateX(50px);
            transform: translateX(50px);
        }

        /* Round sliders */
        .slider.round {
            border-radius: 30px;
        }

        .slider.round:before {
            border-radius: 50%;
        }

        /* Labels for toggle switch */
        .toggle-labels {
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            transform: translateY(-50%);
            display: flex;
            justify-content: space-between;
            padding: 0 8px; /* Adjusted padding */
            color: #cbd5e0;
            font-weight: bold;
            font-size: 0.7rem; /* Smaller font */
            pointer-events: none;
        }
        .toggle-labels span {
            pointer-events: none;
        }

        /* Circular Progress Bar Styling (updated to be more like Farm Health Index) */
        .circular-progress-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 0.6rem;
            text-align: center;
            position: relative;
            background-color: rgba(36, 44, 56, 0.5);
            border-radius: 1rem;
            border: 1px solid #3a4458;
            height: 100%;
        }

        .circular-progress {
            position: relative;
            width: 70px; /* Slightly larger size for the circle */
            height: 70px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 0.3rem;
            /* Using SVG for better control over inner circle and text positioning */
        }

        .circular-progress svg {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        .circular-progress circle {
            fill: none;
            stroke-width: 7; /* Thickness of the ring */
            transform: rotate(-90deg);
            transform-origin: 50% 50%;
        }

        .circular-progress .bg-circle {
            stroke: #4a5568; /* Background color of the ring */
        }

        .circular-progress .progress-circle {
            stroke-linecap: round; /* Rounded ends for the progress bar */
            transition: stroke-dasharray 0.5s ease-in-out;
        }

        .progress-value {
            position: absolute; /* Position value absolutely within the container */
            font-size: clamp(0.8rem, 2vw, 1.1rem); /* Adjusted font size for better fit and responsiveness */
            font-weight: bold;
            color: #e2e8f0;
            z-index: 2; /* Ensure text is above circles */
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%); /* Center the text precisely */
            white-space: nowrap; /* Prevent wrapping */
        }

        .sensor-icon {
            position: relative;
            z-index: 2;
            color: #68D391;
            font-size: 1.1rem;
            margin-bottom: 0.1rem;
        }

        .sensor-label {
            font-size: 0.75rem;
            color: #cbd5e0;
            margin-top: 0.1rem;
        }

        .sensor-update-time {
            font-size: 0.65rem;
            color: #94a3b8;
            margin-top: 0.25rem;
        }

        /* Specific colors for different gauges */
        .circular-progress.soil-moisture .progress-circle { stroke: #68D391; }
        .circular-progress.temperature .progress-circle { stroke: #F6AD55; }
        .circular-progress.humidity .progress-circle { stroke: #63B3ED; }
        .circular-progress.ph .progress-circle { stroke: #A78BFA; }
        .circular-progress.light-intensity .progress-circle { stroke: #ECC94B; }
        .circular-progress.rainfall .progress-circle { stroke: #4299E1; }

        /* Weather Card Styling */
        .weather-day {
            border-bottom: 1px solid #4a5568;
            padding-bottom: 0.5rem; /* Further reduced padding */
            margin-bottom: 0.5rem; /* Further reduced margin */
        }
        .weather-day:last-child {
            border-bottom: none;
            padding-bottom: 0;
            margin-bottom: 0;
        }

        /* Farm Health Index Progress Bar */
        .health-factor-progress {
            height: 6px; /* Even thinner */
            background-color: #4a5568;
            border-radius: 9999px;
            overflow: hidden;
        }
        .health-factor-bar {
            height: 100%;
            background-color: #48bb78;
            border-radius: 9999px;
            transition: width 0.5s ease-in-out;
        }

        /* Collapsible section styling */
        .collapsible-header {
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 0; /* Further reduced padding */
            border-bottom: 1px solid #4a5568;
            font-weight: 600;
            color: #e2e8f0;
            transition: color 0.2s ease-in-out;
            font-size: 1rem; /* Further smaller font for collapsible headers */
        }
        .collapsible-header:hover {
            color: #68D391;
        }
        .collapsible-content {
            padding-top: 0.5rem; /* Further reduced padding */
            padding-bottom: 0.5rem; /* Further reduced padding */
            display: none;
            overflow: hidden;
            transition: all 0.3s ease-in-out;
            background-color: rgba(45, 55, 72, 0.5);
            border-radius: 0.75rem;
            border: 1px solid #4a5568;
            margin-top: 0.3rem; /* Further reduced margin */
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        }
        .collapsible-content.active {
            display: block;
        }
        .collapsible-header .fas {
            transition: transform 0.3s ease-in-out;
        }
        .collapsible-header.active .fas {
            transform: rotate(90deg);
        }

        /* Real-Time Plant Monitoring Styling */
        .camera-feed-container { /* Changed from placeholder to container for video */
            background-color: #1a202c;
            border: 2px solid #4a5568;
            border-radius: 1rem;
            width: 100%;
            max-width: 100%;
            aspect-ratio: 16 / 9;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: #cbd5e0;
            font-size: clamp(0.8rem, 1.8vw, 0.9rem);
            position: relative;
            overflow: hidden;
            animation: pulse 2s infinite alternate;
        }

        .camera-feed-container video {
            width: 100%;
            height: 100%;
            object-fit: cover; /* Ensure video covers the area */
            border-radius: 1rem; /* Match container border-radius */
            display: block;
        }

        /* Pulse Animation */
        @keyframes pulse {
            0% { box-shadow: 0 0 0px rgba(72, 187, 120, 0.4); }
            100% { box-shadow: 0 0 15px rgba(72, 187, 120, 0.8); }
        }

        /* Live Indicator */
        .camera-feed-container .live-indicator {
            position: absolute;
            top: 0.6rem;
            left: 0.6rem;
            background-color: #e53e3e;
            color: white;
            padding: 0.15rem 0.3rem;
            border-radius: 0.3rem;
            font-size: clamp(0.5rem, 1.2vw, 0.65rem);
            font-weight: bold;
            display: flex;
            align-items: center;
            animation: blink 1s infinite;
            z-index: 10; /* Ensure it's above video */
        }

        /* Blinking */
        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        /* Connection Status */
        .camera-feed-container .connection-status {
            position: absolute;
            top: 0.6rem;
            right: 0.6rem;
            background-color: #48bb78;
            color: white;
            padding: 0.15rem 0.3rem;
            border-radius: 0.3rem;
            font-size: clamp(0.5rem, 1.2vw, 0.65rem);
            font-weight: bold;
            display: flex;
            align-items: center;
            z-index: 10; /* Ensure it's above video */
        }

        /* Camera Details (now external) */
        .camera-details-external {
            display: flex;
            flex-direction: column;
            gap: 0.3rem;
            background-color: rgba(0, 0, 0, 0.4);
            padding: 0.5rem 0.7rem;
            border-radius: 0.75rem;
            margin-top: 0.7rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            border: 1px solid #4a5568;
        }
        .camera-details-external span {
            background-color: rgba(0, 0, 0, 0.2);
            padding: 0.3rem 0.5rem;
            border-radius: 0.5rem;
            display: block;
            text-align: left;
            font-size: clamp(0.65rem, 1.3vw, 0.8rem);
            color: #cbd5e0;
            white-space: normal;
            overflow: visible;
            text-overflow: clip;
        }

        /* Camera Icon and Overlay Text (for when video is not active) */
        .camera-feed-container .camera-icon,
        .camera-feed-container .camera-overlay-text,
        .camera-feed-container .camera-feed-message {
            position: absolute;
            z-index: 5; /* Below indicators, above video */
            text-align: center;
        }
        .camera-feed-container .camera-icon {
            font-size: clamp(1.6rem, 4vw, 2.2rem);
            color: #63b3ed;
            margin-bottom: 0.3rem;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: none; /* Hidden by default, shown if video fails */
        }
        .camera-feed-container .camera-feed-message {
            font-size: clamp(0.8rem, 1.8vw, 0.9rem);
            color: #cbd5e0;
            top: calc(50% + 1.5rem); /* Below the icon */
            left: 50%;
            transform: translate(-50%, -50%);
            display: none; /* Hidden by default, shown if video fails */
        }
        .camera-feed-container .camera-overlay-text {
            font-size: clamp(0.8rem, 2vw, 1.2rem);
            font-weight: bold;
            color: rgba(255, 255, 255, 0.2);
            pointer-events: none;
            display: none; /* Hidden by default, shown if video fails */
        }


        /* Header Styling */
        .main-header {
            display: flex;
            flex-direction: column; /* Stack vertically by default */
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1.25rem;
            padding: 0.6rem 0;
            border-bottom: 1px solid #4a5568;
        }

        /* Responsive adjustments for header */
        @media (min-width: 768px) { /* md breakpoint */
            .main-header {
                flex-direction: row; /* Horizontal on medium screens and up */
                align-items: center;
            }
        }

        .main-header .logo-section {
            display: flex;
            align-items: center;
            margin-bottom: 1rem; /* Add margin below logo on small screens */
        }
        @media (min-width: 768px) {
            .main-header .logo-section {
                margin-bottom: 0; /* Remove margin on larger screens */
            }
        }

        .main-header .logo-section img {
            height: 45px; /* Further smaller logo */
            margin-right: 0.7rem; /* Further reduced margin */
        }
        .main-header .title-section h1 {
            font-family: 'Michroma', sans-serif; /* Applied Michroma font */
            font-size: 2rem; /* Further smaller main title */
            font-weight: 800;
            color: #68D391;
            line-height: 1;
            letter-spacing: 0.05em;
            text-align: center; /* Center title on small screens */
        }
        .main-header .title-section p {
            font-size: 0.85rem; /* Further smaller */
            color: #a0aec0;
            margin-top: 0.15rem; /* Further reduced margin */
            text-align: center; /* Center subtitle on small screens */
        }
        /* Desktop-specific alignment for the subtitle */
        @media (min-width: 1024px) { /* lg breakpoint, or adjust as needed for desktop */
            .main-header .title-section p {
                text-align: left;
            }
        }


        /* Adjust the container for buttons, toggle, and select in header */
        .header-controls {
            display: flex;
            flex-direction: column; /* Stack vertically by default */
            align-items: center;
            width: 100%; /* Take full width on small screens */
            gap: 0.75rem; /* Space between items */
        }
        @media (min-width: 640px) { /* sm breakpoint */
            .header-controls {
                flex-direction: row; /* Horizontal on small screens and up */
                flex-wrap: wrap; /* Allow wrapping if needed */
                justify-content: flex-end; /* Align to end on small screens */
                width: auto; /* Auto width on small screens and up */
            }
        }
        @media (min-width: 768px) { /* md breakpoint */
            .header-controls {
                flex-wrap: nowrap; /* Prevent wrapping on medium screens and up */
            }
        }


        /* Plotly Chart Specific Styling */
        .js-plotly-plot .plotly .modebar {
            background: rgba(45, 55, 72, 0.7) !important;
            border-radius: 0.5rem;
            padding: 0.25rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }
        .js-plotly-plot .plotly .modebar-btn {
            color: #cbd5e0 !important;
            transition: background-color 0.2s ease;
        }
        .js-plotly-plot .plotly .modebar-btn:hover {
            background-color: rgba(74, 85, 104, 0.5) !important;
            border-radius: 0.3rem;
        }
        .js-plotly-plot .plotly .modebar-btn.active {
            background-color: #48bb78 !important;
            color: white !important;
        }

        /* Footer transparency */
        footer {
            background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black */
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-100 min-h-screen">
    <div class="container">
        <!-- Main Header -->
        <header class="main-header">
            <div class="logo-section">
                <img src="android-chrome-192x192.png" alt="AgriTech Logo" class="rounded-full"> <!-- Placeholder image -->
                <div class="title-section">
                    <h1 class="font-michroma">SMART AGRITECH DASHBOARD</h1>
                    <!-- Added md:text-left for desktop alignment -->
                    <p class="md:text-left">Advanced AI & Sensor Technology for Modern Agriculture</p>
                </div>
            </div>
            <div class="header-controls">
                <button id="refresh-button" class="button-primary w-full sm:w-auto" data-translate-key="refresh_data">
                    <i class="fas fa-sync-alt mr-2"></i> Refresh Data
                </button>
                <!-- Simulation Mode Toggle -->
                <div class="flex items-center space-x-2">
                    <span class="text-sm font-medium text-gray-300" data-translate-key="mode_label">Mode:</span>
                    <label class="toggle-switch">
                        <input type="checkbox" id="simulation-mode-toggle">
                        <span class="slider round"></span>
                        <div class="toggle-labels">
                            <span class="ml-1" data-translate-key="mode_real">Real</span>
                            <span class="mr-1" data-translate-key="mode_sim">Sim</span>
                        </div>
                    </label>
                </div>
                <!-- Custom Language Selector -->
                <select id="customLanguageSelect" class="w-full sm:w-auto">
                    <option value="">🌐 Select Language</option>
                    <option value="en">English</option>
                    <option value="hi">Hindi</option>
                    <option value="bn">Bengali</option>
                    <option value="te">Telugu</option>
                    <option value="mr">Marathi</option>
                    <option value="ta">Tamil</option>
                    <option value="gu">Gujarati</option>
                    <option value="kn">Kannada</option>
                    <option value="ml">Malayalam</option>
                    <option value="pa">Punjabi</option>
                </select>
                <!-- Google Translate Element (now visible) -->
                <div id="google_translate_element"></div>
            </div>
        </header>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-5 mb-5 flex-grow">

            <!-- Current Sensor Readings (Top-Left, Tall) -->
            <div class="card xl:row-span-2">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="current_sensor_readings_title">
                    <i class="fas fa-tachometer-alt mr-2"></i> Current Sensor Readings
                </h2>
                <!-- Custom Circular Gauges -->
                <div id="current-sensor-readings-grid" class="grid grid-cols-2 gap-2 mb-4">
                    <!-- Soil Moisture -->
                    <div class="circular-progress-container">
                        <div class="circular-progress soil-moisture" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7" ></circle>
                            </svg>
                            <span class="progress-value">0%</span>
                        </div>
                        <i class="fas fa-tint sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="soil_moisture_label">Soil Moisture</span>
                        <span class="sensor-update-time" id="soil-moisture-update">Updated: N/A</span>
                    </div>
                    <!-- Temperature -->
                    <div class="circular-progress-container">
                        <div class="circular-progress temperature" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7" ></circle>
                            </svg>
                            <span class="progress-value">0°C</span>
                        </div>
                        <i class="fas fa-thermometer-half sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="temperature_label">Temperature</span>
                        <span class="sensor-update-time" id="temperature-update">Updated: N/A</span>
                    </div>
                    <!-- Humidity -->
                    <div class="circular-progress-container">
                        <div class="circular-progress humidity" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7" ></circle>
                            </svg>
                            <span class="progress-value">0%</span>
                        </div>
                        <i class="fas fa-water sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="humidity_label">Humidity</span>
                        <span class="sensor-update-time" id="humidity-update">Updated: N/A</span>
                    </div>
                    <!-- pH Level -->
                    <div class="circular-progress-container">
                        <div class="circular-progress ph" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7" ></circle>
                            </svg>
                            <span class="progress-value">0</span>
                        </div>
                        <i class="fas fa-flask sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="ph_level_label">pH Level</span>
                        <span class="sensor-update-time" id="ph-update">Updated: N/A</span>
                    </div>
                    <!-- Light Intensity -->
                    <div class="circular-progress-container">
                        <div class="circular-progress light-intensity" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7" ></circle>
                            </svg>
                            <span class="progress-value">0 lux</span>
                        </div>
                        <i class="fas fa-sun sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="light_intensity_label">Light Intensity</span>
                        <span class="sensor-update-time" id="light-intensity-update">Updated: N/A</span>
                    </div>
                    <!-- Rainfall -->
                    <div class="circular-progress-container">
                        <div class="circular-progress rainfall" data-value="0">
                            <svg viewBox="0 0 100 100">
                                <circle cx="50" cy="50" r="45" class="bg-circle"></circle>
                                <circle cx="50" cy="50" r="45" class="progress-circle" stroke-dasharray="0, 282.7" ></circle>
                            </svg>
                            <span class="progress-value">0 mm</span>
                        </div>
                        <i class="fas fa-cloud-showers-heavy sensor-icon"></i>
                        <span class="sensor-label" data-translate-key="rainfall_label">Rainfall</span>
                        <span class="sensor-update-time" id="rainfall-update">Updated: N/A</span>
                    </div>
                </div>

                <!-- New: Device Connectivity -->
                <h3 class="text-base font-medium text-gray-200 mb-2 border-t border-gray-700 pt-3" data-translate-key="device_connectivity_title"><i class="fas fa-network-wired mr-2"></i> Device Connectivity</h3>
                <div id="device-connectivity" class="space-y-1 text-xs">
                    <div class="flex justify-between items-center text-gray-300">
                        <span data-translate-key="main_gateway">Main Gateway</span>
                        <span id="gateway-status" class="font-semibold text-green-400"><i class="fas fa-circle text-xs mr-1"></i> Online</span>
                    </div>
                    <div class="flex justify-between items-center text-gray-300">
                        <span data-translate-key="irrigation_system">Irrigation System</span>
                        <span id="irrigation-status" class="font-semibold text-green-400"><i class="fas fa-circle text-xs mr-1"></i> Active</span>
                    </div>
                    <div class="flex justify-between items-center text-gray-300">
                        <span data-translate-key="camera_units">Camera Units</span>
                        <span id="camera-status" class="font-semibold text-green-400"><i class="fas fa-circle text-xs mr-1"></i> 3/3 Connected</span>
                    </div>
                    <div class="flex justify-between items-center text-gray-300">
                        <span data-translate-key="soil_sensors">Soil Sensors</span>
                        <span id="soil-sensor-status" class="font-semibold text-green-400"><i class="fas fa-circle text-xs mr-1"></i> All Online</span>
                    </div>
                </div>
            </div>

            <!-- Sensor Trends Over Time (Top-Middle, Wide) -->
            <div class="card xl:col-span-2">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="sensor_trends_title">
                    <i class="fas fa-chart-line mr-2"></i> Sensor Trends Over Time
                </h2>
                <!-- Filter for chart -->
                <div class="flex items-center mb-3">
                    <label for="chart-filter" class="text-xs font-medium text-gray-300 mr-2" data-translate-key="chart_filter_label">Show:</label>
                    <select id="chart-filter" class="bg-gray-700 text-white py-1 px-2 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 border border-gray-600 text-xs">
                        <option value="24h" data-translate-key="last_24_hours">Last 24 Hours</option>
                        <option value="7d" data-translate-key="last_7_days">Last 7 Days</option>
                        <option value="30d" data-translate-key="last_30_days">Last 30 Days</option>
                        <option value="all" data-translate-key="all_data">All Data</option>
                    </select>
                </div>
                <div id="sensor-trends-chart" class="w-full h-64 flex-grow"></div>
                <p id="sensor-trends-status" class="text-xs text-gray-400 mt-2 text-center"></p>
            </div>

            <!-- Weather Card (Top-Right, Normal) -->
            <div class="card">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="weather_title">
                    <i class="fas fa-cloud-sun mr-2"></i> Weather
                </h2>
                <div id="weather-data" class="mb-4">
                    <p class="text-gray-400 text-sm mb-2" id="current-location"><i class="fas fa-map-marker-alt mr-1"></i> Location: N/A</p>
                    <div class="flex justify-between items-center mb-2">
                        <div class="flex items-center">
                            <i id="weather-icon" class="fas fa-cloud text-3xl text-blue-300 mr-2"></i>
                            <div>
                                <p class="text-3xl font-bold text-white" id="current-temp">--°C</p>
                                <p class="text-gray-400 text-sm" id="current-humidity"><span data-translate-key="humidity_text">Humidity</span>: --%</p>
                            </div>
                        </div>
                        <p class="text-gray-400 text-sm"><i class="fas fa-wind mr-1"></i> <span id="wind-speed">-- km/h</span></p>
                    </div>

                    <div id="weather-forecast" class="text-xs">
                        <div class="weather-day flex justify-between items-center">
                            <p class="text-gray-300"><i class="fas fa-calendar-day mr-1"></i> <span data-translate-key="today">Today</span></p>
                            <p class="text-gray-200"><span id="today-high">--°</span> <span class="text-gray-400" id="today-low">--°</span></p>
                        </div>
                        <div class="weather-day flex justify-between items-center">
                            <p class="text-gray-300"><i class="fas fa-calendar-alt mr-1"></i> <span data-translate-key="tomorrow">Tomorrow</span></p>
                            <p class="text-gray-200"><span id="tomorrow-high">--°</span> <span class="text-gray-400" id="tomorrow-low">--°</span></p>
                        </div>
                        <div class="weather-day flex justify-between items-center">
                            <p class="text-gray-300"><i class="fas fa-calendar-week mr-1"></i> <span id="day-after-tomorrow">Wed</span></p>
                            <p class="text-gray-200"><span id="day-after-tomorrow-high">--°</span> <span class="text-gray-400" id="day-after-tomorrow-low">--°</span></p>
                        </div>
                    </div>
                </div>

                <!-- New: Weather Advisories -->
                <h3 class="text-base font-medium text-gray-200 mb-2 border-t border-gray-700 pt-3" data-translate-key="weather_advisories_title"><i class="fas fa-exclamation-triangle mr-2"></i> Weather Advisories</h3>
                <div id="weather-advisories" class="space-y-1 text-gray-300 text-xs">
                    <p><i class="fas fa-circle-info text-blue-400 text-sm mr-2"></i> <span data-translate-key="no_active_advisories">No active advisories.</span></p>
                </div>
            </div>

            <!-- Crop Care & AI Insights (Middle-Left, Wide) -->
            <div class="card xl:col-span-2">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="crop_care_ai_insights_title">
                    <i class="fas fa-seedling mr-2"></i> Crop Care & AI Insights
                </h2>

                <div class="mb-4">
                    <label for="crop-select" class="block text-sm font-medium text-gray-300 mb-2" data-translate-key="active_crop_label">
                        <i class="fas fa-leaf mr-2"></i> Active Crop:
                    </label>
                    <select id="crop-select" class="w-full bg-gray-700 text-white py-1.5 px-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 border border-gray-600 text-sm">
                        <!-- Options populated by JS -->
                    </select>
                </div>

                <!-- AI Recommendations (Collapsible) -->
                <div class="mb-2">
                    <div class="collapsible-header" onclick="toggleCollapsible('ai-recommendations-content')">
                        <h3 class="font-medium text-gray-200" data-translate-key="ai_recommendations_title"><i class="fas fa-lightbulb mr-2"></i> AI Recommendations</h3>
                        <i class="fas fa-chevron-right"></i>
                    </div>
                    <div id="ai-recommendations-content" class="collapsible-content bg-gray-800 p-3 rounded-lg border border-gray-700 mt-1 text-xs">
                        <div id="care-tips">
                            <p class="text-gray-400" data-translate-key="loading_recommendations">Loading recommendations...</p>
                        </div>
                        <button id="play-alerts-button" class="button-secondary w-full sm:w-auto mt-2 text-xs" data-translate-key="play_top_alerts">
                            <i class="fas fa-volume-up mr-2"></i> Play Top Alerts
                        </button>
                        <div id="audio-status" class="text-xs text-gray-400 mt-1 text-center"></div>
                    </div>
                </div>

                <!-- Growth Prediction (Collapsible) -->
                <div class="mb-2">
                    <div class="collapsible-header" onclick="toggleCollapsible('growth-prediction-content')">
                        <h3 class="font-medium text-gray-200" data-translate-key="growth_prediction_title"><i class="fas fa-robot mr-2"></i> Growth Prediction</h3>
                        <i class="fas fa-chevron-right"></i>
                    </div>
                    <div id="growth-prediction-content" class="collapsible-content bg-gray-800 p-3 rounded-lg border border-gray-700 mt-1 text-xs">
                        <div id="growth-prediction">
                            <p class="text-gray-400" data-translate-key="loading_predictions">Loading predictions...</p>
                        </div>
                    </div>
                </div>

                <!-- Market Forecast (Collapsible) -->
                <div class="mb-2">
                    <div class="collapsible-header" onclick="toggleCollapsible('market-forecast-content')">
                        <h3 class="font-medium text-gray-200" data-translate-key="market_forecast_title"><i class="fas fa-chart-bar mr-2"></i> Market Forecast</h3>
                        <i class="fas fa-chevron-right"></i>
                    </div>
                    <div id="market-forecast-content" class="collapsible-content bg-gray-800 p-3 rounded-lg border border-gray-700 mt-1 text-xs">
                        <div id="market-price-forecast">
                            <p class="text-gray-400" data-translate-key="loading_forecast">Loading forecast...</p>
                        </div>
                    </div>
                </div>

                <!-- Crop Suggestion (Separate, not collapsible in image) -->
                <h3 class="text-base font-medium text-gray-200 mb-2 mt-4" data-translate-key="crop_suggestion_title"><i class="fas fa-seedling mr-2"></i> Crop Suggestion Based on Predicted Conditions:</h3>
                <div id="crop-suggestion" class="bg-gray-800 p-3 rounded-lg min-h-[70px] border border-gray-700 text-xs">
                    <p class="text-gray-400" data-translate-key="loading_suggestions">Loading suggestions...</p>
                </div>

                <!-- New: Pest & Disease Scan -->
                <h3 class="text-base font-medium text-gray-200 mb-2 mt-4 border-t border-gray-700 pt-3" data-translate-key="pest_disease_scan_title"><i class="fas fa-bug mr-2"></i> Pest & Disease Scan</h3>
                <div id="pest-disease-scan" class="bg-gray-800 p-3 rounded-lg border border-gray-700 text-xs">
                    <p id="pest-scan-status" class="text-gray-400 mb-2" data-translate-key="last_scan_na">Last scan: N/A</p>
                    <button id="run-pest-scan-button" class="button-primary w-full text-xs" data-translate-key="run_new_scan">
                        <i class="fas fa-search mr-2"></i> Run New Scan
                    </button>
                    <div id="pest-scan-results" class="mt-2 text-gray-300">
                        <!-- Results will be displayed here -->
                    </div>
                </div>
            </div>

            <!-- Real-Time Plant Monitoring (Middle-Right, Normal) -->
            <div class="card">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="realtime_plant_monitoring_title">
                    <i class="fas fa-camera mr-2"></i> Real-Time Plant Monitoring
                </h2>
                <div id="camera-feed-container" class="camera-feed-container mb-2">
                    <span class="live-indicator" data-translate-key="live_indicator"><i class="fas fa-circle text-red-500 text-xs mr-1"></i> LIVE</span>
                    <span class="connection-status" data-translate-key="connected_status"><i class="fas fa-wifi mr-1"></i> Connected</span>
                    <video id="live-camera-feed" autoplay playsinline class="hidden"></video>
                    <i class="fas fa-video camera-icon"></i>
                    <p class="camera-feed-message text-gray-400 text-sm" data-translate-key="live_camera_feed">Live Camera Feed</p>
                    <p class="text-gray-500 text-xs" data-translate-key="sector_a_field_view">Sector A - Field View</p>
                    <span class="camera-overlay-text" data-translate-key="last_frame_na">Last Frame: N/A</span>
                </div>
                <!-- OUTSIDE the feed box -->
                <div id="camera-details-external" class="camera-details-external text-xs text-gray-300">
                    <span id="camera-resolution" data-translate-key="growth_stage_na">Growth Stage: N/A</span>
                    <span id="camera-fps" data-translate-key="advisory_na">Advisory: N/A</span>
                    <span id="camera-signal" data-translate-key="timestamp_na">Timestamp: N/A</span>
                    <span id="last-frame-time" data-translate-key="last_frame_time_na">Last Frame: N/A</span>
                </div>

                <div class="flex flex-col sm:flex-row justify-center space-y-2 sm:space-y-0 sm:space-x-2 mt-2">
                    <button id="capture-image-button" class="button-primary flex-1 text-xs" data-translate-key="capture_image">
                        <i class="fas fa-camera-retro mr-2"></i> Capture Image
                    </button>
                    <button id="view-history-button" class="button-secondary flex-1 text-xs" data-translate-key="view_history">
                        <i class="fas fa-images mr-2"></i> View History
                    </button>
                </div>
            </div>

            <!-- Recent Events (Bottom-Right, Normal) -->
            <div class="card">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="recent_events_title">
                    <i class="fas fa-history mr-2"></i> Recent Events
                </h2>
                <div id="recent-events" class="bg-gray-800 p-3 rounded-lg mb-4 min-h-[100px] border border-gray-700 text-xs">
                    <p class="text-gray-400" data-translate-key="loading_recent_events">Loading recent events...</p>
                </div>
                <!-- New: Quick Actions -->
                <h3 class="text-base font-medium text-gray-200 mb-2 border-t border-gray-700 pt-3" data-translate-key="quick_actions_title"><i class="fas fa-bolt mr-2"></i> Quick Actions</h3>
                <div class="grid grid-cols-1 gap-1.5">
                    <button class="button-primary w-full text-xs" data-translate-key="initiate_irrigation"><i class="fas fa-water mr-2"></i> Initiate Irrigation</button>
                    <button class="button-secondary w-full text-xs" data-translate-key="apply_nutrients"><i class="fas fa-seedling mr-2"></i> Apply Nutrients</button>
                    <button class="button-primary w-full text-xs" data-translate-key="send_alert"><i class="fas fa-bell mr-2"></i> Send Alert</button>
                </div>
            </div>

            <!-- Farm Health Index (Bottom-Left, Tall) -->
            <div class="card xl:row-span-2">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="farm_health_index_title">
                    <i class="fas fa-heartbeat mr-2"></i> Farm Health Index
                </h2>
                <div class="flex flex-col items-center mb-4">
                    <div class="relative w-24 h-24 flex items-center justify-center mb-2">
                        <svg class="w-full h-full" viewBox="0 0 100 100">
                            <circle cx="50" cy="50" r="45" fill="none" stroke="#4a5568" stroke-width="7"></circle>
                            <circle id="health-score-circle" cx="50" cy="50" r="45" fill="none" stroke="#48bb78" stroke-width="7"
                                stroke-dasharray="0, 282.7" transform="rotate(-90 50 50)"></circle>
                        </svg>
                        <span class="absolute text-2xl font-bold text-white" id="overall-health-score">85</span>
                    </div>
                    <p class="text-green-400 text-base font-semibold mb-3" id="overall-health-status" data-translate-key="health_status_good">Good</p>
                    <div class="w-full text-xs">
                        <h3 class="text-sm font-medium text-gray-200 mb-2" data-translate-key="health_factors_title">Health Factors:</h3>
                        <div class="space-y-1.5" id="health-factors-list">
                            <div class="flex justify-between items-center text-gray-300">
                                <span data-translate-key="soil_quality">Soil Quality</span>
                                <span class="font-semibold" id="soil-quality-percent">92%</span>
                            </div>
                            <div class="health-factor-progress">
                                <div class="health-factor-bar" id="soil-quality-bar" style="width: 92%;"></div>
                            </div>

                            <div class="flex justify-between items-center text-gray-300">
                                <span data-translate-key="plant_health">Plant Health</span>
                                <span class="font-semibold" id="plant-health-percent">88%</span>
                            </div>
                            <div class="health-factor-progress">
                                <div class="health-factor-bar" id="plant-health-bar" style="width: 88%;"></div>
                            </div>

                            <div class="flex justify-between items-center text-gray-300">
                                <span data-translate-key="water_management">Water Management</span>
                                <span class="font-semibold" id="water-management-percent">78%</span>
                            </div>
                            <div class="health-factor-progress">
                                <div class="health-factor-bar" id="water-management-bar" style="width: 78%;"></div>
                            </div>

                            <div class="flex justify-between items-center text-gray-300">
                                <span data-translate-key="pest_control">Pest Control</span>
                                <span class="font-semibold" id="pest-control-percent">82%</span>
                            </div>
                            <div class="health-factor-progress">
                                <div class="health-factor-bar" id="pest-control-bar" style="width: 82%;"></div>
                            </div>

                            <div class="flex justify-between items-center text-gray-300">
                                <span data-translate-key="environmental">Environmental</span>
                                <span class="font-semibold" id="environmental-percent">90%</span>
                            </div>
                            <div class="health-factor-progress">
                                <div class="health-factor-bar" id="environmental-bar" style="width: 90%;"></div>
                            </div>
                        </div>
                    </div>
                    <p class="text-green-400 text-xs font-semibold mt-2"><i class="fas fa-arrow-up mr-1"></i> <span id="health-change" data-translate-key="health_change_percent">+5%</span> <span data-translate-key="from_last_week">from last week</span></p>
                </div>

                <!-- New: Resource Consumption -->
                <h3 class="text-base font-medium text-gray-200 mb-2 border-t border-gray-700 pt-3" data-translate-key="resource_consumption_title"><i class="fas fa-chart-pie mr-2"></i> Resource Consumption (Daily)</h3>
                <div id="resource-consumption" class="space-y-1.5 text-xs">
                    <div class="flex justify-between items-center text-gray-300">
                        <span data-translate-key="water_used">Water Used:</span>
                        <span class="font-semibold text-blue-300">2500 Liters</span>
                    </div>
                    <div class="flex justify-between items-center text-gray-300">
                        <span data-translate-key="energy_used">Energy Used:</span>
                        <span class="font-semibold text-yellow-300">50 kWh</span>
                    </div>
                    <div class="flex justify-between items-center text-gray-300">
                        <span data-translate-key="nutrients_applied">Nutrients Applied:</span>
                        <span class="font-semibold text-green-300">5 kg</span>
                    </div>
                    <button class="button-secondary w-full mt-2 text-xs" data-translate-key="view_usage_history"><i class="fas fa-history mr-2"></i> View Usage History</button>
                </div>
            </div>

            <!-- Latest Sensor Readings (Raw Data) (Bottom-Middle, Wide) -->
            <div class="card xl:col-span-2 flex flex-col">
                <h2 class="text-lg font-semibold text-green-300 mb-3 border-b border-gray-700 pb-2" data-translate-key="latest_sensor_readings_title">
                    <i class="fas fa-table mr-2"></i> Latest Sensor Readings (Raw Data)
                </h2>
                <div id="raw-data-table" class="dataframe-container mb-4 flex-grow">
                    <p class="text-gray-400 p-4 text-center" data-translate-key="loading_raw_data">Loading raw data...</p>
                </div>
                <!-- New: Data Export -->
                <h3 class="text-base font-medium text-gray-200 mb-2 border-t border-gray-700 pt-3" data-translate-key="data_export_title"><i class="fas fa-download mr-2"></i> Data Export</h3>
                <div class="flex flex-col sm:flex-row gap-1.5">
                    <button id="export-csv-button" class="button-primary flex-1 text-xs" data-translate-key="export_csv"><i class="fas fa-file-csv mr-2"></i> Export CSV</button>
                    <button id="export-excel-button" class="button-secondary flex-1 text-xs" data-translate-key="export_excel"><i class="fas fa-file-excel mr-2"></i> Export Excel</button>
                </div>
            </div>

            <!-- Application Initialization Status (Full Width at bottom) -->
            <div class="card xl:col-span-full">
                <h2 class="text-lg font-semibold text-green-300 mb-2 cursor-pointer flex justify-between items-center" onclick="toggleExpander('init-status-content')">
                    <span data-translate-key="app_init_status_title"><i class="fas fa-info-circle mr-2"></i> Application Initialization Status</span>
                    <span id="expander-icon" class="float-right transform rotate-0 transition-transform duration-200 text-gray-400">
                        <i class="fas fa-chevron-down"></i>
                    </span>
                </h2>
                <div id="init-status-content" class="hidden">
                    <p class="text-gray-400 p-2 bg-gray-800 rounded-lg border border-gray-700 text-xs" data-translate-key="app_init_status_message">
                        Backend components (Firebase, AI models, scalers) are initialized during server startup. Check server logs for detailed status.
                    </p>
                </div>
            </div>
        </div>
    </div>

    <footer class="bg-gray-800 text-gray-400 text-center p-2.5 mt-auto rounded-t-xl text-xs">
        <p data-translate-key="footer_copyright">&copy; 2025 Smart AgriTech. All rights reserved.</p>
        <p class="mt-1" data-translate-key="footer_powered_by">Powered by Advanced AI & Sensor Technology</p>
    </footer>

    <script type="text/javascript">
        // Google Translate API initialization
        let googleTranslateElementInitialized = false; // Flag to ensure init only runs once

        function googleTranslateElementInit() {
            if (googleTranslateElementInitialized) return; // Prevent multiple initializations

            new google.translate.TranslateElement({
                pageLanguage: 'en',
                layout: google.translate.TranslateElement.InlineLayout.SIMPLE,
                autoDisplay: false // We will trigger translation manually
            }, 'google_translate_element');

            // Set flag after successful initialization call
            googleTranslateElementInitialized = true;
            console.log("Google Translate element initialized.");
        }
    </script>
    <script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>

    <script>
        const API_BASE_URL = 'http://localhost:5000/';
        // IMPORTANT: Replace 'YOUR_OPENWEATHER_API_KEY' with your actual OpenWeather API key.
        const OPEN_WEATHER_API_KEY = '6e903b9cec47d3e4c90c1b982c2be09b';
        // Default location if geolocation fails or is denied
        const DEFAULT_WEATHER_LOCATION = 'New Delhi'; // Changed default to an Indian city

        let currentLanguage = 'en';
        let originalPlotData = [];
        let userLatitude = null;
        let userLongitude = null;
        let currentRawData = []; // To store raw data for export

        // For camera feed
        let mediaStream = null;

        // Function to get user's current location
        async function getUserLocation() {
            return new Promise((resolve, reject) => {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            resolve({
                                lat: position.coords.latitude,
                                lon: position.coords.longitude
                            });
                        },
                        (error) => {
                            console.error("Error getting user location:", error);
                            reject(new Error("Geolocation failed. Using default location."));
                        },
                        {
                            enableHighAccuracy: true, // Request high accuracy
                            timeout: 10000, // 10 seconds timeout
                            maximumAge: 0 // No cached position
                        }
                    );
                } else {
                    reject(new Error("Geolocation is not supported by this browser. Using default location."));
                }
            });
        }

        // Function to update a circular progress bar using SVG
        function updateCircularProgress(elementId, value, max_value, unit = '', colorHex = '#48bb78') {
            const container = document.querySelector(`.circular-progress.${elementId}`);
            if (!container) {
                console.warn(`Circular progress container for ${elementId} not found.`);
                return;
            }
            const valueSpan = container.querySelector('.progress-value');
            const progressCircle = container.querySelector('.progress-circle');
            const circumference = 2 * Math.PI * 45; // r=45 from SVG

            const percent = (value / max_value) * 100;
            const progressOffset = circumference - (percent / 100) * circumference;

            if (progressCircle) {
                progressCircle.style.strokeDasharray = `${circumference - progressOffset}, ${circumference}`;
                progressCircle.style.stroke = colorHex;
            }
            if (valueSpan) {
                valueSpan.textContent = `${value}${unit}`;
            }
            container.dataset.value = value;
        }

        // Function to render sensor trends chart
        function renderSensorTrendsChart(plotData, timeRange = 'all') {
            const chartDiv = document.getElementById('sensor-trends-chart');
            const statusDiv = document.getElementById('sensor-trends-status');

            if (!chartDiv || !statusDiv) {
                console.error("Chart or status div not found for sensor trends.");
                return;
            }

            if (!plotData || plotData.length === 0) {
                displayMessage(statusDiv, "⚠️ Not enough complete data available for plotting sensor trends. Check if sensors are reporting data for these features.", 'warning');
                Plotly.purge(chartDiv);
                return;
            }
            statusDiv.textContent = "";

            let filteredData = [...plotData];

            if (timeRange !== 'all') {
                const now = new Date();
                filteredData = filteredData.filter(d => {
                    const timestamp = new Date(d.timestamp);
                    if (timeRange === '24h') {
                        return (now - timestamp) < (24 * 60 * 60 * 1000);
                    } else if (timeRange === '7d') {
                        return (now - timestamp) < (7 * 24 * 60 * 60 * 1000);
                    } else if (timeRange === '30d') {
                        return (now - timestamp) < (30 * 24 * 60 * 60 * 1000);
                    }
                    return true;
                });
            }

            if (filteredData.length === 0) {
                displayMessage(statusDiv, `No data available for the selected time range (${timeRange}).`, 'warning');
                Plotly.purge(chartDiv);
                return;
            }


            const traces = [];
            const uniqueMetrics = [...new Set(filteredData.map(d => d['Sensor Metric']))];

            const colors = {
                'Soil Moisture': '#68D391',
                'Temperature': '#F6AD55',
                'Humidity': '#63B3ED',
                'pH': '#A78BFA',
                'Light Intensity': '#ECC94B',
                'N': '#FC8181',
                'P': '#81E6D9',
                'K': '#B794F4',
                'Rainfall': '#4299E1',
                'ds18b20_temperature': '#E53E3E',
                'Growth Factor': '#38A169'
            };

            uniqueMetrics.forEach((metric) => {
                const dataForMetric = filteredData.filter(d => d['Sensor Metric'] === metric);
                traces.push({
                    x: dataForMetric.map(d => d.timestamp),
                    y: dataForMetric.map(d => d.Reading),
                    mode: 'lines',
                    name: metric,
                    line: { color: colors[metric] || '#cbd5e0', width: 2 },
                    hovertemplate: `<b>%{fullData.name}</b><br>Time: %{x}<br>Reading: %{y:.2f}<extra></extra>`
                });
            });

            const layout = {
                title: {
                    text: "Historical Sensor Readings",
                    font: { color: "#e2e8f0", size: 16, family: 'Exo 2' }
                },
                xaxis: {
                    title: "Time",
                    color: "#cbd5e0",
                    gridcolor: 'rgba(74, 85, 104, 0.5)',
                    linecolor: '#4a5568',
                    tickfont: { color: "#cbd5e0", size: 10 },
                    type: 'date',
                    rangeselector: {
                        buttons: [
                            { count: 1, label: '1h', step: 'hour', stepmode: 'backward' },
                            { count: 6, label: '6h', step: 'hour', stepmode: 'backward' },
                            { count: 1, label: '1d', step: 'day', stepmode: 'backward' },
                            { count: 7, label: '7d', step: 'day', stepmode: 'backward' },
                            { count: 1, label: '1m', step: 'month', stepmode: 'backward' },
                            { step: 'all' }
                        ],
                        font: { color: "#e2e8f0", size: 10 },
                        bgcolor: 'rgba(45, 55, 72, 0.7)',
                        bordercolor: '#4a5568',
                        borderwidth: 1
                    },
                    rangeslider: { visible: true, thickness: 0.05, bgcolor: 'rgba(74, 85, 104, 0.3)' }
                },
                yaxis: {
                    title: "Sensor Reading",
                    color: "#cbd5e0",
                    gridcolor: 'rgba(74, 85, 104, 0.5)',
                    linecolor: '#4a5568',
                    tickfont: { color: "#cbd5e0", size: 10 }
                },
                legend: {
                    title: { text: "Metric", font: { color: "#e2e8f0", size: 12 } },
                    font: { color: "#e2e8f0", size: 10 },
                    bgcolor: 'rgba(45, 55, 72, 0.7)',
                    bordercolor: '#4a5568',
                    borderwidth: 1,
                    x: 1, y: 1, xanchor: 'right', yanchor: 'top'
                },
                hovermode: "x unified",
                font: { family: "Inter", size: 11, color: "#e2e8f0" },
                paper_bgcolor: "rgba(0,0,0,0)",
                plot_bgcolor: "rgba(0,0,0,0)",
                margin: { l: 40, r: 20, t: 60, b: 40 }
            };

            Plotly.newPlot(chartDiv, traces, layout, { responsive: true });
        }

        // Function to populate crop selectbox
        function populateCropSelect(cropLabels) {
            const selectElement = document.getElementById('crop-select');
            if (!selectElement) {
                console.error("Crop select element not found.");
                return;
            }
            selectElement.innerHTML = '';

            if (cropLabels && cropLabels.length > 0) {
                cropLabels.forEach(label => {
                    const option = document.createElement('option');
                    option.value = label;
                    option.textContent = label;
                    selectElement.appendChild(option);
                });
            } else {
                const option = document.createElement('option');
                option.value = "";
                option.textContent = "No crops found";
                selectElement.appendChild(option);
                selectElement.disabled = true;
            }
        }

        // Function to render raw data table
        function renderRawDataTable(rawData) {
            const tableContainer = document.getElementById('raw-data-table');
            if (!tableContainer) {
                console.error("Raw data table container not found.");
                return;
            }
            tableContainer.innerHTML = '';

            if (!rawData || rawData.length === 0) {
                tableContainer.innerHTML = `<p class="text-gray-400 p-4 text-center">No sensor data to display.</p>`;
                return;
            }

            const table = document.createElement('table');
            table.classList.add('min-w-full', 'table-auto');

            const thead = document.createElement('thead');
            const headerRow = document.createElement('tr');
            const headers = Object.keys(rawData[0]);
            headers.forEach(headerText => {
                const th = document.createElement('th');
                th.textContent = headerText.replace(/_/g, ' ').replace(/\b\w/g, char => char.toUpperCase());
                th.classList.add('px-2', 'py-1.5', 'text-left', 'text-gray-200', 'bg-gray-700', 'font-semibold');
                headerRow.appendChild(th);
            });
            thead.appendChild(headerRow);
            table.appendChild(thead);

            const tbody = document.createElement('tbody');
            rawData.forEach(rowData => {
                const tr = document.createElement('tr');
                tr.classList.add('hover:bg-gray-700', 'transition-colors', 'duration-150');
                headers.forEach(headerText => {
                    const td = document.createElement('td');
                    let value = rowData[headerText];
                    if (typeof value === 'number') {
                        value = value.toFixed(2);
                    }
                    td.textContent = value !== null ? value : 'N/A';
                    td.classList.add('px-2', 'py-1.5', 'border-b', 'border-gray-600', 'text-gray-300');
                    tr.appendChild(td);
                });
                tbody.appendChild(tr);
            });
            table.appendChild(tbody);
            tableContainer.appendChild(table);
        }

        // Function to toggle expander content
        function toggleExpander(contentId) {
            const content = document.getElementById(contentId);
            const icon = document.getElementById('expander-icon')?.querySelector('i');
            if (!content || !icon) {
                console.warn(`Expander content or icon not found for ${contentId}.`);
                return;
            }

            if (content.classList.contains('hidden')) {
                content.classList.remove('hidden');
                icon.classList.remove('fa-chevron-down');
                icon.classList.add('fa-chevron-up');
            } else {
                content.classList.add('hidden');
                icon.classList.remove('fa-chevron-up');
                icon.classList.add('fa-chevron-down');
            }
        }

        // Function to toggle collapsible sections
        function toggleCollapsible(contentId) {
            const content = document.getElementById(contentId);
            if (!content) {
                console.warn(`Collapsible content for ${contentId} not found.`);
                return;
            }
            const header = content.previousElementSibling;
            const icon = header?.querySelector('.fas.fa-chevron-right');

            if (!header || !icon) {
                console.warn(`Collapsible header or icon not found for ${contentId}.`);
                return;
            }

            if (content.classList.contains('active')) {
                content.classList.remove('active');
                icon.style.transform = 'rotate(0deg)';
            } else {
                content.classList.add('active');
                icon.style.transform = 'rotate(90deg)';
            }
        }

        // Function to display messages with icons
        async function displayMessage(elementId, messageText, type = 'info') {
            const element = typeof elementId === 'string' ? document.getElementById(elementId) : elementId;
            if (!element) {
                console.warn(`Element with ID or reference ${elementId} not found for displaying message.`);
                return;
            }

            let iconClass = '';
            let colorClass = 'text-gray-400';

            switch (type) {
                case 'success':
                    iconClass = 'fas fa-check-circle';
                    colorClass = 'text-green-400';
                    break;
                case 'warning':
                    iconClass = 'fas fa-exclamation-triangle';
                    colorClass = 'text-yellow-400';
                    break;
                case 'error':
                    iconClass = 'fas fa-times-circle';
                    colorClass = 'text-red-400';
                    break;
                case 'info':
                default:
                    iconClass = 'fas fa-info-circle';
                    colorClass = 'text-blue-400';
                    break;
            }
            element.innerHTML = `<p class="${colorClass}"><i class="${iconClass} mr-2"></i> ${messageText}</p>`;
        }

        // Function to render Markdown-like text to HTML
        function renderMarkdown(text) {
            let html = text.replace(/\*\*(.*?)\*\*/g, '<b>$1</b>');
            html = html.replace(/\{[a-zA-Z_]+(?::[^}]+)?\}/g, ''); // Remove variable placeholders
            return html;
        }

        // Function to get Font Awesome icon based on OpenWeather condition code
        function getWeatherIcon(iconCode) {
            // Mapping OpenWeather icons to Font Awesome icons
            // https://openweathermap.org/weather-conditions
            switch (iconCode) {
                case '01d': return 'fas fa-sun'; // clear sky day
                case '01n': return 'fas fa-moon'; // clear sky night
                case '02d': return 'fas fa-cloud-sun'; // few clouds day
                case '02n': return 'fas fa-cloud-moon'; // few clouds night
                case '03d':
                case '03n': return 'fas fa-cloud'; // scattered clouds
                case '04d':
                case '04n': return 'fas fa-cloud-meatball'; // broken clouds
                case '09d':
                case '09n': return 'fas fa-cloud-showers-heavy'; // shower rain
                case '10d': return 'fas fa-cloud-sun-rain'; // rain day
                case '10n': return 'fas fa-cloud-moon-rain'; // rain night
                case '11d':
                case '11n': return 'fas fa-bolt'; // thunderstorm
                case '13d':
                case '13n': return 'fas fa-snowflake'; // snow
                case '50d':
                case '50n': return 'fas fa-smog'; // mist
                default: return 'fas fa-cloud';
            }
        }

        // Render Weather Data using OpenWeather API
        async function renderWeatherData() {
            const weatherDataDiv = document.getElementById('weather-data');
            const advisoriesDiv = document.getElementById('weather-advisories');
            const currentLocationElement = document.getElementById('current-location');

            if (!weatherDataDiv || !advisoriesDiv || !currentLocationElement) {
                console.error("Weather data, advisories, or location div not found.");
                return;
            }
            advisoriesDiv.innerHTML = `<p><i class="fas fa-circle-info text-blue-400 text-sm mr-2"></i> Fetching weather data...</p>`;
            currentLocationElement.innerHTML = `<i class="fas fa-map-marker-alt mr-1"></i> Location: Fetching...`;

            const currentTempElement = document.getElementById('current-temp');
            const currentHumidityElement = document.getElementById('current-humidity');
            const windSpeedElement = document.getElementById('wind-speed');
            const weatherIconElement = document.getElementById('weather-icon');
            const todayHighElement = document.getElementById('today-high');
            const todayLowElement = document.getElementById('today-low');
            const tomorrowHighElement = document.getElementById('tomorrow-high');
            const tomorrowLowElement = document.getElementById('tomorrow-low');
            const tomorrowTextElement = document.querySelector('[data-translate-key="tomorrow"]');
            const dayAfterTomorrowElement = document.getElementById('day-after-tomorrow');
            const dayAfterTomorrowHighElement = document.getElementById('day-after-tomorrow-high');
            const dayAfterTomorrowLowElement = document.getElementById('day-after-tomorrow-low');
            const humidityTextElement = document.querySelector('[data-translate-key="humidity_text"]');


            let weatherApiUrlCurrent;
            let weatherApiUrlForecast;

            if (userLatitude !== null && userLongitude !== null) {
                weatherApiUrlCurrent = `https://api.openweathermap.org/data/2.5/weather?lat=${userLatitude}&lon=${userLongitude}&appid=${OPEN_WEATHER_API_KEY}&units=metric`;
                weatherApiUrlForecast = `https://api.openweathermap.org/data/2.5/forecast?lat=${userLatitude}&lon=${userLongitude}&appid=${OPEN_WEATHER_API_KEY}&units=metric`;
                console.log("Fetching weather for coordinates:", userLatitude, userLongitude);
            } else {
                weatherApiUrlCurrent = `https://api.openweathermap.org/data/2.5/weather?q=${DEFAULT_WEATHER_LOCATION}&appid=${OPEN_WEATHER_API_KEY}&units=metric`;
                weatherApiUrlForecast = `https://api.openweathermap.org/data/2.5/forecast?q=${DEFAULT_WEATHER_LOCATION}&appid=${OPEN_WEATHER_API_KEY}&units=metric`;
                console.log("Fetching weather for default location:", DEFAULT_WEATHER_LOCATION);
            }

            try {
                // Fetch current weather
                const currentWeatherResponse = await fetch(weatherApiUrlCurrent);
                if (!currentWeatherResponse.ok) {
                    throw new Error(`HTTP error! status: ${currentWeatherResponse.status}`);
                }
                const currentWeatherData = await currentWeatherResponse.json();

                // Update current location
                if (currentWeatherData.name) {
                    currentLocationElement.innerHTML = `<i class="fas fa-map-marker-alt mr-1"></i> Location: ${currentWeatherData.name}`;
                } else {
                    currentLocationElement.innerHTML = `<i class="fas fa-map-marker-alt mr-1"></i> Location: N/A`;
                }

                // Fetch 5-day forecast
                const forecastResponse = await fetch(weatherApiUrlForecast);
                if (!forecastResponse.ok) {
                    throw new Error(`HTTP error! status: ${forecastResponse.status}`);
                }
                const forecastData = await forecastResponse.json();

                // Update current weather
                if (currentTempElement && currentWeatherData.main) {
                    currentTempElement.textContent = `${Math.round(currentWeatherData.main.temp)}°C`;
                }
                if (currentHumidityElement && currentWeatherData.main && humidityTextElement) {
                    currentHumidityElement.innerHTML = `${humidityTextElement.textContent}: ${currentWeatherData.main.humidity}%`;
                }
                if (windSpeedElement && currentWeatherData.wind) {
                    windSpeedElement.textContent = `${(currentWeatherData.wind.speed * 3.6).toFixed(1)} km/h`; // Convert m/s to km/h
                }
                if (weatherIconElement && currentWeatherData.weather && currentWeatherData.weather[0]) {
                    weatherIconElement.className = getWeatherIcon(currentWeatherData.weather[0].icon) + ' text-3xl text-blue-300 mr-2';
                }

                // Process forecast data for the next 3 days
                const dailyForecasts = {};
                const today = new Date();
                today.setHours(0, 0, 0, 0); // Normalize to start of day

                if (forecastData.list) {
                    forecastData.list.forEach(item => {
                        const date = new Date(item.dt * 1000); // Convert timestamp to Date object
                        date.setHours(0, 0, 0, 0); // Normalize to start of day for grouping

                        // Only consider next 3 full days (including today if available in forecast)
                        if (((date.getTime() - today.getTime()) / (24 * 60 * 60 * 1000)) < 3) {
                            const dateString = date.toISOString().split('T')[0];
                            if (!dailyForecasts[dateString]) {
                                dailyForecasts[dateString] = { min: item.main.temp, max: item.main.temp };
                            } else {
                                dailyForecasts[dateString].min = Math.min(dailyForecasts[dateString].min, item.main.temp);
                                dailyForecasts[dateString].max = Math.max(dailyForecasts[dateString].max, item.main.temp);
                            }
                        }
                    });
                }


                const sortedDates = Object.keys(dailyForecasts).sort();

                // Update forecast for Today, Tomorrow, Day After Tomorrow
                const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

                // Today
                if (sortedDates[0] && todayHighElement && todayLowElement) {
                    const todayForecast = dailyForecasts[sortedDates[0]];
                    todayHighElement.textContent = `${Math.round(todayForecast.max)}°`;
                    todayLowElement.textContent = `${Math.round(todayForecast.min)}°`;
                } else if (todayHighElement && todayLowElement) {
                    todayHighElement.textContent = `--°`;
                    todayLowElement.textContent = `--°`;
                }

                // Tomorrow
                if (sortedDates[1] && tomorrowHighElement && tomorrowLowElement && tomorrowTextElement) {
                    const tomorrowForecast = dailyForecasts[sortedDates[1]];
                    tomorrowHighElement.textContent = `${Math.round(tomorrowForecast.max)}°`;
                    tomorrowLowElement.textContent = `${Math.round(tomorrowForecast.min)}°`;
                    tomorrowTextElement.textContent = 'Tomorrow'; // Ensure this uses data-translate-key
                } else if (tomorrowHighElement && tomorrowLowElement) {
                    tomorrowHighElement.textContent = `--°`;
                    tomorrowLowElement.textContent = `--°`;
                }

                // Day After Tomorrow (e.g., Wednesday)
                if (sortedDates[2] && dayAfterTomorrowHighElement && dayAfterTomorrowLowElement && dayAfterTomorrowElement) {
                    const dayAfterTomorrowForecast = dailyForecasts[sortedDates[2]];
                    dayAfterTomorrowHighElement.textContent = `${Math.round(dayAfterTomorrowForecast.max)}°`;
                    dayAfterTomorrowLowElement.textContent = `${Math.round(dayAfterTomorrowForecast.min)}°`;
                    const dayAfterTomorrowDate = new Date(sortedDates[2]);
                    dayAfterTomorrowElement.textContent = dayNames[dayAfterTomorrowDate.getDay()];
                } else if (dayAfterTomorrowHighElement && dayAfterTomorrowLowElement && dayAfterTomorrowElement) {
                    dayAfterTomorrowHighElement.textContent = `--°`;
                    dayAfterTomorrowLowElement.textContent = `--°`;
                    dayAfterTomorrowElement.textContent = `N/A`;
                }


                // Weather Advisories (simplified based on OpenWeather data)
                advisoriesDiv.innerHTML = ''; // Clear previous advisories
                let hasAdvisory = false;

                if (currentWeatherData.weather && currentWeatherData.weather[0]) {
                    const weatherDescription = currentWeatherData.weather[0].description.toLowerCase();
                    const mainWeather = currentWeatherData.weather[0].main.toLowerCase();

                    if (mainWeather.includes('rain') || mainWeather.includes('thunderstorm') || mainWeather.includes('drizzle')) {
                        advisoriesDiv.innerHTML += `<p class="text-yellow-400"><i class="fas fa-cloud-showers-heavy text-xs mr-2"></i> Expect ${weatherDescription} conditions. Be prepared for wet weather.</p>`;
                        hasAdvisory = true;
                    }
                }

                if (currentWeatherData.wind && currentWeatherData.wind.speed && (currentWeatherData.wind.speed * 3.6 > 30)) { // Wind speed over 30 km/h
                    advisoriesDiv.innerHTML += `<p class="text-yellow-400"><i class="fas fa-wind text-xs mr-2"></i> High wind speeds detected (${(currentWeatherData.wind.speed * 3.6).toFixed(1)} km/h). Secure loose objects.</p>`;
                    hasAdvisory = true;
                    }
                if (currentWeatherData.main && currentWeatherData.main.temp) {
                    if (currentWeatherData.main.temp > 35) { // Temperature over 35°C
                        advisoriesDiv.innerHTML += `<p class="text-red-400"><i class="fas fa-temperature-high text-xs mr-2"></i> High temperature advisory. Ensure adequate irrigation.</p>`;
                        hasAdvisory = true;
                    }
                    if (currentWeatherData.main.temp < 0) { // Temperature below 0°C
                        advisoriesDiv.innerHTML += `<p class="text-blue-400"><i class="fas fa-snowflake text-xs mr-2"></i> Freezing temperature advisory. Protect sensitive crops from frost.</p>`;
                        hasAdvisory = true;
                    }
                }


                if (!hasAdvisory) {
                    advisoriesDiv.innerHTML = `<p><i class="fas fa-circle-info text-blue-400 text-xs mr-2"></i> No active advisories.</p>`;
                }

            } catch (error) {
                console.error("Error fetching weather data:", error);
                advisoriesDiv.innerHTML = `<p class="text-red-400"><i class="fas fa-times-circle text-xs mr-2"></i> Failed to load weather data. Check API key and network.</p>`;
                currentLocationElement.innerHTML = `<i class="fas fa-map-marker-alt mr-1"></i> Location: N/A`;
                if (currentTempElement) currentTempElement.textContent = `--°C`;
                if (currentHumidityElement && humidityTextElement) currentHumidityElement.innerHTML = `${humidityTextElement.textContent}: --%`;
                if (windSpeedElement) windSpeedElement.textContent = `-- km/h`;
                if (weatherIconElement) weatherIconElement.className = 'fas fa-cloud-sun text-3xl text-blue-300 mr-2'; // Default icon on error
                if (todayHighElement) todayHighElement.textContent = `--°`;
                if (todayLowElement) todayLowElement.textContent = `--°`;
                if (tomorrowHighElement) tomorrowHighElement.textContent = `--°`;
                if (tomorrowLowElement) tomorrowLowElement.textContent = `--°`;
                if (dayAfterTomorrowHighElement) dayAfterTomorrowHighElement.textContent = `--°`;
                if (dayAfterTomorrowLowElement) dayAfterTomorrowLowElement.textContent = `--°`;
                if (dayAfterTomorrowElement) dayAfterTomorrowElement.textContent = `N/A`;
            }
        }

        // Simulated Recent Events Data
        function getSimulatedRecentEvents() {
            const events = [
                { text: "Water detected in sector B", time: "10:27 AM" },
                { text: "Irrigation cycle completed", time: "09:45 AM" },
                { text: "Optimal light conditions detected", time: "09:10 AM" },
                { text: "Nutrient levels adjusted in field 1", time: "Yesterday" },
                { text: "Pest activity observed in north plot", time: "2 days ago" }
            ];
            return events;
        }

        // Render Recent Events
        async function renderRecentEvents() {
            const events = getSimulatedRecentEvents();
            const eventsDiv = document.getElementById('recent-events');
            if (!eventsDiv) {
                console.error("Recent events div not found.");
                return;
            }
            eventsDiv.innerHTML = '';
            if (events.length === 0) {
                displayMessage(eventsDiv, 'Loading recent events...', 'info');
                return;
            }
            for (const event of events) {
                eventsDiv.innerHTML += `
                    <div class="flex justify-between items-center py-1 border-b border-gray-700 last:border-b-0">
                        <p class="text-gray-300">${event.text}</p>
                        <span class="text-gray-500 text-xs">${event.time}</span>
                    </div>
                `;
            }
        }

        // Simulated Farm Health Index Data
        function getSimulatedFarmHealthData() {
            const overallScore = Math.floor(Math.random() * (95 - 70 + 1)) + 70;
            let status = "Good";
            if (overallScore < 75) status = "Fair";
            if (overallScore < 60) status = "Poor";

            const healthFactors = {
                'soil-quality': Math.floor(Math.random() * (98 - 80 + 1)) + 80,
                'plant-health': Math.floor(Math.random() * (95 - 75 + 1)) + 75,
                'water-management': Math.floor(Math.random() * (90 - 70 + 1)) + 70,
                'pest-control': Math.floor(Math.random() * (90 - 70 + 1)) + 70,
                'environmental': Math.floor(Math.random() * (98 - 85 + 1)) + 85
            };

            const healthChange = (Math.random() * 10 - 5).toFixed(0);
            const changeIcon = healthChange >= 0 ? 'fa-arrow-up' : 'fa-arrow-down';
            const changeColor = healthChange >= 0 ? 'text-green-400' : 'text-red-400';

            return {
                overallScore,
                status,
                healthFactors,
                healthChange,
                changeIcon,
                changeColor
            };
        }

        // Render Farm Health Index
        async function renderFarmHealthIndex() {
            const healthData = getSimulatedFarmHealthData();

            const overallHealthScoreElement = document.getElementById('overall-health-score');
            const overallHealthStatusElement = document.getElementById('overall-health-status');
            const healthScoreCircleElement = document.getElementById('health-score-circle');
            const healthChangeElement = document.getElementById('health-change');

            if (overallHealthScoreElement) overallHealthScoreElement.textContent = healthData.overallScore;
            if (overallHealthStatusElement) overallHealthStatusElement.textContent = healthData.status;

            if (healthScoreCircleElement) {
                const circumference = 2 * Math.PI * 45;
                const progress = (healthData.overallScore / 100) * circumference;
                healthScoreCircleElement.style.strokeDasharray = `${progress}, ${circumference}`;
                healthScoreCircleElement.style.stroke = healthData.overallScore >= 75 ? '#48bb78' : (healthData.overallScore >= 60 ? '#F6AD55' : '#E53E3E');
            }


            for (const factor in healthData.healthFactors) {
                const percent = healthData.healthFactors[factor];
                const percentElement = document.getElementById(`${factor}-percent`);
                const barElement = document.getElementById(`${factor}-bar`);
                if (percentElement) percentElement.textContent = `${percent}%`;
                if (barElement) barElement.style.width = `${percent}%`;
            }

            if (healthChangeElement) {
                healthChangeElement.innerHTML = `<i class="fas ${healthData.changeIcon} mr-1"></i> ${healthData.healthChange >= 0 ? '+' : ''}${healthData.healthChange}% <span data-translate-key="from_last_week">from last week</span>`;
                healthChangeElement.className = `${healthData.changeColor} text-xs font-semibold mt-2`;
            }
        }

        // Simulated Device Connectivity Data
        function getSimulatedDeviceConnectivity() {
            const statuses = ['Online', 'Offline', 'Active', 'Inactive', 'Connected', 'Disconnected'];
            const getRandomStatus = () => statuses[Math.floor(Math.random() * statuses.length)];

            return {
                gateway: Math.random() < 0.9 ? 'Online' : 'Offline',
                irrigation: Math.random() < 0.8 ? 'Active' : 'Inactive',
                camera: `${Math.floor(Math.random() * 4)}/3 Connected`,
                soil: Math.random() < 0.95 ? 'All Online' : 'Some Offline'
            };
        }

        // Render Device Connectivity
        async function renderDeviceConnectivity() {
            const connectivity = getSimulatedDeviceConnectivity();

            const updateStatus = async (id, statusText) => {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = statusText;
                    element.className = 'font-semibold ' + (statusText.includes('Online') || statusText.includes('Active') || statusText.includes('Connected') ? 'text-green-400' : 'text-red-400');
                    element.innerHTML = `<i class="fas fa-circle text-xs mr-1"></i> ${statusText}`;
                }
            };

            updateStatus('gateway-status', connectivity.gateway);
            updateStatus('irrigation-status', connectivity.irrigation);
            updateStatus('camera-status', connectivity.camera);
            updateStatus('soil-sensor-status', connectivity.soil);
        }

        // Simulated Pest Scan Data
        function getSimulatedPestScanResults() {
            const results = [
                { status: 'No threats detected. Your crops are healthy!', type: 'success' },
                { status: 'Minor pest activity detected in Sector C. Recommend localized treatment.', type: 'warning', details: ['Aphids (low concentration)'] },
                { status: 'Disease detected in Field 2. Immediate action required.', type: 'error', details: ['Fungal blight (moderate)'] }
            ];
            return results[Math.floor(Math.random() * results.length)];
        }

        // Simulate a pest scan
        async function runPestScan() {
            const scanButton = document.getElementById('run-pest-scan-button');
            const scanStatus = document.getElementById('pest-scan-status');
            const scanResultsDiv = document.getElementById('pest-scan-results');

            if (!scanButton || !scanStatus || !scanResultsDiv) {
                console.error("Pest scan elements not found.");
                return;
            }

            scanButton.disabled = true;
            scanButton.innerHTML = `<span class="loading-spinner"></span> Scanning in progress...`;
            scanStatus.textContent = `Scanning in progress...`;
            scanResultsDiv.innerHTML = '';

            await new Promise(resolve => setTimeout(resolve, 2000));

            const result = getSimulatedPestScanResults();
            scanStatus.textContent = `Last scan: ${new Date().toLocaleTimeString()}`;

            let resultHtml = `<p class="mb-2"><i class="fas ${result.type === 'success' ? 'fa-check-circle text-green-400' : result.type === 'warning' ? 'fa-exclamation-triangle text-yellow-400' : 'fa-times-circle text-red-400'} mr-2"></i> ${result.status}</p>`;

            if (result.details && result.details.length > 0) {
                resultHtml += `<p class="font-semibold mt-2">Details:</p><ul class="list-disc list-inside ml-3">`;
                for (const detail of result.details) {
                    resultHtml += `<li>${detail}</li>`;
                }
                resultHtml += '</ul>';
            }
            scanResultsDiv.innerHTML = resultHtml;

            scanButton.disabled = false;
            scanButton.innerHTML = `<i class="fas fa-search mr-2"></i> Run New Scan`;
        }

        // Function to start the camera feed
        async function startCameraFeed() {
            const videoElement = document.getElementById('live-camera-feed');
            const cameraIcon = document.querySelector('.camera-feed-container .camera-icon');
            const cameraMessage = document.querySelector('.camera-feed-container .camera-feed-message');
            const cameraOverlayText = document.querySelector('.camera-feed-container .camera-overlay-text');
            const connectionStatusSpan = document.querySelector('.camera-feed-container .connection-status');

            if (!videoElement || !cameraIcon || !cameraMessage || !cameraOverlayText || !connectionStatusSpan) {
                console.error("Camera feed elements not found.");
                return;
            }

            try {
                // Request camera access
                mediaStream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } }); // Prefer rear camera
                videoElement.srcObject = mediaStream;
                videoElement.classList.remove('hidden'); // Show video element
                cameraIcon.style.display = 'none'; // Hide placeholder icon
                cameraMessage.style.display = 'none'; // Hide placeholder message
                cameraOverlayText.style.display = 'none'; // Hide overlay text

                connectionStatusSpan.innerHTML = `<i class="fas fa-wifi mr-1"></i> Connected`;
                connectionStatusSpan.style.backgroundColor = '#48bb78';

                videoElement.onloadedmetadata = () => {
                    videoElement.play();
                };

            } catch (err) {
                console.error("Error accessing camera: ", err);
                videoElement.classList.add('hidden'); // Hide video element
                cameraIcon.style.display = 'block'; // Show placeholder icon
                cameraMessage.style.display = 'block'; // Show placeholder message
                cameraMessage.textContent = 'Camera access denied or not available.';
                cameraOverlayText.style.display = 'block'; // Show overlay text
                cameraOverlayText.textContent = 'Camera Offline';

                connectionStatusSpan.innerHTML = `<i class="fas fa-wifi-slash mr-1"></i> Disconnected`;
                connectionStatusSpan.style.backgroundColor = '#e53e3e';
            }
        }

        // Function to stop the camera feed
        function stopCameraFeed() {
            if (mediaStream) {
                mediaStream.getTracks().forEach(track => track.stop());
                mediaStream = null;
                const videoElement = document.getElementById('live-camera-feed');
                if (videoElement) {
                    videoElement.srcObject = null;
                    videoElement.classList.add('hidden');
                }
                const cameraIcon = document.querySelector('.camera-feed-container .camera-icon');
                const cameraMessage = document.querySelector('.camera-feed-container .camera-feed-message');
                const cameraOverlayText = document.querySelector('.camera-feed-container .camera-overlay-text');
                if (cameraIcon) cameraIcon.style.display = 'block';
                if (cameraMessage) cameraMessage.style.display = 'block';
                if (cameraOverlayText) cameraOverlayText.style.display = 'block';
            }
        }

        // Function to capture an image from the video feed
        function captureImage() {
            const videoElement = document.getElementById('live-camera-feed');
            if (videoElement && mediaStream) {
                const canvas = document.createElement('canvas');
                canvas.width = videoElement.videoWidth;
                canvas.height = videoElement.videoHeight;
                const context = canvas.getContext('2d');
                context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);

                canvas.toBlob((blob) => {
                    const imageUrl = URL.createObjectURL(blob);
                    // For demonstration, open in a new tab. In a real app, you might upload it or display it.
                    window.open(imageUrl, '_blank');
                    // Clean up URL object after use
                    URL.revokeObjectURL(imageUrl);
                }, 'image/png');
            } else {
                displayMessage(document.getElementById('camera-details-external'), 'Camera is not active to capture image.', 'warning');
            }
        }

        // Function to export raw data to CSV
        function exportToCSV() {
            if (currentRawData.length === 0) {
                displayMessage(document.getElementById('raw-data-table').nextElementSibling.nextElementSibling, 'No data to export.', 'warning');
                return;
            }

            const headers = Object.keys(currentRawData[0]);
            const csvRows = [];

            // Add headers
            csvRows.push(headers.map(header => `"${header.replace(/"/g, '""')}"`).join(','));

            // Add data rows
            currentRawData.forEach(row => {
                const values = headers.map(header => {
                    let value = row[header];
                    if (value === null || value === undefined) {
                        value = '';
                    } else if (typeof value === 'string') {
                        value = value.replace(/"/g, '""'); // Escape double quotes
                    }
                    return `"${value}"`;
                });
                csvRows.push(values.join(','));
            });

            const csvString = csvRows.join('\n');
            const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'sensor_data.csv';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            displayMessage(document.getElementById('raw-data-table').nextElementSibling.nextElementSibling, 'CSV export successful!', 'success');
        }

        // Function to export raw data to Excel (as a tab-separated file with .xls extension for basic compatibility)
        function exportToExcel() {
            if (currentRawData.length === 0) {
                displayMessage(document.getElementById('raw-data-table').nextElementSibling.nextElementSibling, 'No data to export.', 'warning');
                return;
            }

            const headers = Object.keys(currentRawData[0]);
            const excelRows = [];

            // Add headers (tab-separated)
            excelRows.push(headers.map(header => `${header.replace(/"/g, '""')}`).join('\t'));

            // Add data rows (tab-separated)
            currentRawData.forEach(row => {
                const values = headers.map(header => {
                    let value = row[header];
                    if (value === null || value === undefined) {
                        value = '';
                    } else if (typeof value === 'string') {
                        value = value.replace(/"/g, '""'); // Escape double quotes
                    }
                    return `${value}`;
                });
                excelRows.push(values.join('\t'));
            });

            const excelString = excelRows.join('\n');
            const blob = new Blob([excelString], { type: 'application/vnd.ms-excel;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = 'sensor_data.xls'; // Use .xls for basic Excel opening
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            displayMessage(document.getElementById('raw-data-table').nextElementSibling.nextElementSibling, 'Excel export successful!', 'success');
        }


        // Main data fetching and rendering function
        async function fetchDataAndRender() {
            const refreshButton = document.getElementById('refresh-button');
            if (refreshButton) {
                refreshButton.disabled = true;
                refreshButton.innerHTML = `<span class="loading-spinner"></span> Loading...`;
            }


            try {
                const response = await fetch(`${API_BASE_URL}/api/data`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();

                if (data.status === 'no_data') {
                    updateCircularProgress('soil-moisture', 0, 100, '%', '#68D391');
                    const soilMoistureUpdate = document.getElementById('soil-moisture-update');
                    if(soilMoistureUpdate) soilMoistureUpdate.textContent = `Updated: N/A`;
                    updateCircularProgress('temperature', 0, 40, '°C', '#F6AD55');
                    const temperatureUpdate = document.getElementById('temperature-update');
                    if(temperatureUpdate) temperatureUpdate.textContent = `Updated: N/A`;
                    updateCircularProgress('humidity', 0, 100, '%', '#63B3ED');
                    const humidityUpdate = document.getElementById('humidity-update');
                    if(humidityUpdate) humidityUpdate.textContent = `Updated: N/A`;
                    updateCircularProgress('ph', 0, 14, '', '#A78BFA');
                    const phUpdate = document.getElementById('ph-update');
                    if(phUpdate) phUpdate.textContent = `Updated: N/A`;
                    updateCircularProgress('light-intensity', 0, 1000, ' lux', '#ECC94B');
                    const lightIntensityUpdate = document.getElementById('light-intensity-update');
                    if(lightIntensityUpdate) lightIntensityUpdate.textContent = `Updated: N/A`;
                    updateCircularProgress('rainfall', 0, 250, ' mm', '#4299E1');
                    const rainfallUpdate = document.getElementById('rainfall-update');
                    if(rainfallUpdate) rainfallUpdate.textContent = `Updated: N/A`;

                    displayMessage('sensor-trends-status', 'Not enough complete data available for plotting sensor trends. Check if sensors are reporting data for these features.', 'warning');
                    Plotly.purge('sensor-trends-chart');
                    renderRawDataTable([]);
                    displayMessage('care-tips', 'Select a crop to get recommendations.', 'info');
                    displayMessage('growth-prediction', 'Select a crop to view growth predictions.', 'info');
                    displayMessage('market-price-forecast', 'Select a crop to view market price forecast.', 'info');
                    displayMessage('crop-suggestion', 'Predicted soil moisture data is unusual or unavailable for crop suggestion.', 'info');
                    populateCropSelect(data.crop_labels);
                    currentRawData = []; // Clear raw data on no data status
                    return;
                }

                const latestData = data.latest_data;
                originalPlotData = data.plot_data;
                const cameraData = data.camera_data;
                currentRawData = data.raw_data; // Store raw data for export
                const cropLabels = data.crop_labels;

                const formattedTimestamp = new Date(latestData.timestamp).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });

                const soilMoistureUpdate = document.getElementById('soil-moisture-update');
                const temperatureUpdate = document.getElementById('temperature-update');
                const humidityUpdate = document.getElementById('humidity-update');
                const phUpdate = document.getElementById('ph-update');
                const lightIntensityUpdate = document.getElementById('light-intensity-update');
                const rainfallUpdate = document.getElementById('rainfall-update');

                updateCircularProgress('soil-moisture', latestData.soil_moisture || 0, 100, '%', '#68D391');
                if(soilMoistureUpdate) soilMoistureUpdate.textContent = `Updated: ${formattedTimestamp}`;
                updateCircularProgress('temperature', latestData.temperature || 0, 40, '°C', '#F6AD55');
                if(temperatureUpdate) temperatureUpdate.textContent = `Updated: ${formattedTimestamp}`;
                updateCircularProgress('humidity', latestData.humidity || 0, 100, '%', '#63B3ED');
                if(humidityUpdate) humidityUpdate.textContent = `Updated: ${formattedTimestamp}`;
                updateCircularProgress('ph', latestData.ph || 0, 14, '', '#A78BFA');
                if(phUpdate) phUpdate.textContent = `Updated: ${formattedTimestamp}`;
                updateCircularProgress('light-intensity', latestData.light_intensity || 0, 1000, ' lux', '#ECC94B');
                if(lightIntensityUpdate) lightIntensityUpdate.textContent = `Updated: ${formattedTimestamp}`;
                updateCircularProgress('rainfall', latestData.rainfall || 0, 250, ' mm', '#4299E1');
                if(rainfallUpdate) rainfallUpdate.textContent = `Updated: ${formattedTimestamp}`;


                const currentFilter = document.getElementById('chart-filter')?.value;
                renderSensorTrendsChart(originalPlotData, currentFilter);

                populateCropSelect(cropLabels);
                const cropSelect = document.getElementById('crop-select');
                if (cropSelect && cropSelect.value) {
                    cropSelect.dispatchEvent(new Event('change'));
                } else {
                    displayMessage('care-tips', 'Select a crop to get recommendations.', 'info');
                    displayMessage('growth-prediction', 'Select a crop to view growth predictions.', 'info');
                    displayMessage('market-price-forecast', 'Select a crop to view market price forecast.', 'info');
                    displayMessage('crop-suggestion', 'Predicted soil moisture data is unusual or unavailable for crop suggestion.', 'info');
                }

                const cameraFeedContainer = document.getElementById('camera-feed-container');
                const cameraDetailsExternal = document.getElementById('camera-details-external');

                if (cameraFeedContainer && cameraDetailsExternal && cameraData) {
                    const connectionStatusSpan = cameraFeedContainer.querySelector('.connection-status');
                    if (connectionStatusSpan) {
                        connectionStatusSpan.innerHTML = `<i class="fas fa-wifi mr-1"></i> ${cameraData.alert?.includes('No Camera Data') ? 'Disconnected' : 'Connected'}`;
                        connectionStatusSpan.style.backgroundColor = cameraData.alert?.includes('No Camera Data') ? '#e53e3e' : '#48bb78';
                    }

                    // For the actual camera feed, we handle its state via startCameraFeed/stopCameraFeed
                    // The cameraData from backend might be for simulated info, not actual stream status
                    // So, we'll primarily rely on `mediaStream` for connection status.
                    if (mediaStream) { // If camera is active, hide placeholder elements
                        cameraFeedContainer.querySelector('.camera-icon').style.display = 'none';
                        cameraFeedContainer.querySelector('.camera-feed-message').style.display = 'none';
                        cameraFeedContainer.querySelector('.camera-overlay-text').style.display = 'none';
                    } else { // If camera is not active, show placeholder elements
                         cameraFeedContainer.querySelector('.camera-icon').style.display = 'block';
                         cameraFeedContainer.querySelector('.camera-feed-message').style.display = 'block';
                         cameraFeedContainer.querySelector('.camera-overlay-text').style.display = 'block';
                         cameraFeedContainer.querySelector('.camera-feed-message').textContent = 'Live Camera Feed';
                         cameraFeedContainer.querySelector('.camera-overlay-text').textContent = 'Last Frame: N/A';
                    }


                    const cameraResolution = cameraDetailsExternal.querySelector('#camera-resolution');
                    const cameraFps = cameraDetailsExternal.querySelector('#camera-fps');
                    const cameraSignal = cameraDetailsExternal.querySelector('#camera-signal');
                    const lastFrameTime = cameraDetailsExternal.querySelector('#last-frame-time');

                    if (cameraResolution) cameraResolution.textContent = `Growth Stage: ${cameraData.stage || 'N/A'}`;
                    if (cameraFps) cameraFps.textContent = `Advisory: ${cameraData.alert || 'N/A'}`;
                    if (cameraSignal) cameraSignal.textContent = `Timestamp: ${new Date(cameraData.timestamp).toLocaleTimeString() || 'N/A'}`;
                    if (lastFrameTime) lastFrameTime.textContent = `Last Frame: ${new Date(cameraData.timestamp).toLocaleTimeString() || 'N/A'}`;

                } else if (cameraFeedContainer && cameraDetailsExternal) {
                    const connectionStatusSpan = cameraFeedContainer.querySelector('.connection-status');
                    if (connectionStatusSpan) {
                        connectionStatusSpan.innerHTML = `<i class="fas fa-wifi-slash mr-1"></i> Disconnected`;
                        connectionStatusSpan.style.backgroundColor = '#e53e3e';
                    }

                    const cameraResolution = cameraDetailsExternal.querySelector('#camera-resolution');
                    const cameraFps = cameraDetailsExternal.querySelector('#camera-fps');
                    const cameraSignal = cameraDetailsExternal.querySelector('#camera-signal');
                    const lastFrameTime = cameraDetailsExternal.querySelector('#last-frame-time');

                    if (cameraResolution) cameraResolution.textContent = `Growth Stage: N/A`;
                    if (cameraFps) cameraFps.textContent = `Advisory: N/A`;
                    if (cameraSignal) cameraSignal.textContent = `Timestamp: N/A`;
                    if (lastFrameTime) lastFrameTime.textContent = `Last Frame: N/A`;

                    // Ensure placeholder elements are visible if no camera data or stream
                    cameraFeedContainer.querySelector('.camera-icon').style.display = 'block';
                    cameraFeedContainer.querySelector('.camera-feed-message').style.display = 'block';
                    cameraFeedContainer.querySelector('.camera-overlay-text').style.display = 'block';
                    cameraFeedContainer.querySelector('.camera-feed-message').textContent = 'Live Camera Feed';
                    cameraFeedContainer.querySelector('.camera-overlay-text').textContent = 'Last Frame: N/A';
                }

                renderRawDataTable(currentRawData);
                renderWeatherData(); // Call the updated OpenWeather function
                renderRecentEvents();
                renderFarmHealthIndex();
                renderDeviceConnectivity();

            } catch (error) {
                console.error("Error fetching dashboard data:", error);
                displayMessage('soil-moisture-update', 'Error loading data.', 'error');
                displayMessage('temperature-update', 'Error loading data.', 'error');
                displayMessage('humidity-update', 'Error loading data.', 'error');
                displayMessage('ph-update', 'Error loading data.', 'error');
                displayMessage('light-intensity-update', 'Error loading data.', 'error');
                displayMessage('rainfall-update', 'Error loading data.', 'error');
                displayMessage('sensor-trends-status', 'Error loading trends.', 'error');
                Plotly.purge('sensor-trends-chart'); // Ensure chart is purged on error
                renderRawDataTable([]); // Clear table on error
                displayMessage('raw-data-table', 'Error loading raw data.', 'error');
                displayMessage('care-tips', 'Error loading recommendations.', 'error');
                displayMessage('growth-prediction', 'Error loading predictions.', 'error');
                displayMessage('market-price-forecast', 'Error loading forecast.', 'error');
                displayMessage('crop-suggestion', 'Error loading suggestions.', 'error');
            } finally {
                if (refreshButton) {
                    refreshButton.disabled = false;
                    refreshButton.innerHTML = `<i class="fas fa-sync-alt mr-2"></i> Refresh Data`;
                }
            }
        }

        // Function to update predictions and advice based on selected crop
        async function updateCropSpecificData() {
            const selectedCropType = document.getElementById('crop-select')?.value;

            if (!selectedCropType) {
                displayMessage('care-tips', 'Select a crop to get recommendations.', 'info');
                displayMessage('growth-prediction', 'Select a crop to view growth predictions.', 'info');
                displayMessage('market-price-forecast', 'Select a crop to view market price forecast.', 'info');
                displayMessage('crop-suggestion', 'Predicted soil moisture data is unusual or unavailable for crop suggestion.', 'info');
                return;
            }

            try {
                const response = await fetch(`${API_BASE_URL}/api/care_advice`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ selected_crop_type: selectedCropType })
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                const careTipsDiv = document.getElementById('care-tips');
                if (careTipsDiv) {
                    if (data.advice && data.advice.length > 0) {
                        careTipsDiv.innerHTML = data.advice.map(tip => `<p class="mb-1.5 last:mb-0">${renderMarkdown(tip)}</p>`).join('');
                    } else {
                        displayMessage('care-tips', 'No specific care recommendations available.', 'info');
                    }
                }
            } catch (error) {
                console.error("Error fetching crop care advice:", error);
                displayMessage('care-tips', 'Error loading recommendations.', 'error');
            }

            let predictedSoilMoisture = null;

            try {
                const response = await fetch(`${API_BASE_URL}/api/predict_growth`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ selected_crop_type: selectedCropType })
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                const growthPredictionDiv = document.getElementById('growth-prediction');
                if (growthPredictionDiv) {
                    if (data.error) {
                        displayMessage('growth-prediction', `Error: ${data.error}`, 'error');
                    } else {
                        predictedSoilMoisture = data.soil_moisture_pred;
                        let soilMoistureMsg = `Predicted Soil Moisture: <b>${data.soil_moisture_pred.toFixed(2)}%</b>`;
                        if (!(0 <= data.soil_moisture_pred && data.soil_moisture_pred <= 100)) {
                            soilMoistureMsg += ` (Unusual value, may indicate data anomaly)`;
                            growthPredictionDiv.innerHTML = `<p class="text-yellow-400"><i class="fas fa-exclamation-triangle mr-2"></i> ${soilMoistureMsg}</p>`;
                        } else {
                            growthPredictionDiv.innerHTML = `<p class="text-green-400"><i class="fas fa-check-circle mr-2"></i> ${soilMoistureMsg}</p>`;
                        }
                        growthPredictionDiv.innerHTML += `<p class="text-blue-400 mt-1.5"><i class="fas fa-sun mr-2"></i> Predicted Light Intensity: <b>${data.light_intensity_pred.toFixed(2)} lux</b></p>`;
                        growthPredictionDiv.innerHTML += `<p class="text-green-400 mt-1.5"><i class="fas fa-flask mr-2"></i> Predicted Nutrient Sum: <b>${data.nutrient_sum_pred.toFixed(2)}</b></p>`;
                    }
                }
            } catch (error) {
                console.error("Error fetching growth prediction:", error);
                displayMessage('growth-prediction', 'Error loading predictions.', 'error');
            }

            try {
                const response = await fetch(`${API_BASE_URL}/api/market_price`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ selected_crop_type: selectedCropType })
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                const marketPriceDiv = document.getElementById('market-price-forecast');
                if (marketPriceDiv) {
                    if (data.error) {
                        displayMessage('market-price-forecast', `Error: ${data.error}`, 'error');
                    } else {
                        marketPriceDiv.innerHTML = `<p class="text-green-400"><i class="fas fa-money-bill-wave mr-2"></i> Estimated Market Price for ${selectedCropType}: <b>$${data.predicted_price.toFixed(2)}</b></p>`;
                    }
                }
            } catch (error) {
                console.error("Error fetching market price forecast:", error);
                displayMessage('market-price-forecast', 'Error loading forecast.', 'error');
            }

            try {
                const response = await fetch(`${API_BASE_URL}/api/seed_recommendations`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ soil_moisture_pred: predictedSoilMoisture })
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                const cropSuggestionDiv = document.getElementById('crop-suggestion');
                if (cropSuggestionDiv) {
                    if (data.error) {
                        displayMessage('crop-suggestion', `Error: ${data.error}`, 'error');
                    } else {
                        cropSuggestionDiv.innerHTML = `<p class="text-gray-300">${renderMarkdown(data.recommendation)}</p>`;
                    }
                }
            } catch (error) {
                console.error("Error fetching crop suggestion:", error);
                displayMessage('crop-suggestion', 'Error loading suggestions.', 'error');
            }
        }

        // Event Listeners
        document.getElementById('refresh-button')?.addEventListener('click', fetchDataAndRender);
        document.getElementById('crop-select')?.addEventListener('change', updateCropSpecificData);
        document.getElementById('run-pest-scan-button')?.addEventListener('click', runPestScan);
        document.getElementById('chart-filter')?.addEventListener('change', (event) => {
            renderSensorTrendsChart(originalPlotData, event.target.value);
        });
        document.getElementById('export-csv-button')?.addEventListener('click', exportToCSV);
        document.getElementById('export-excel-button')?.addEventListener('click', exportToExcel);
        document.getElementById('capture-image-button')?.addEventListener('click', captureImage);


        // Custom Language Select Listener to connect to Google Translate
        document.getElementById("customLanguageSelect")?.addEventListener("change", function () {
            var lang = this.value;
            if (lang) {
                currentLanguage = lang; // Update currentLanguage for voice alerts

                // Attempt to find the hidden Google Translate select element
                let attempts = 0; // Changed from const to let
                const maxAttempts = 10;
                const intervalTime = 200;

                const findAndTranslate = () => {
                    const select = document.querySelector('.goog-te-combo');
                    if (select) {
                        select.value = lang;
                        // Dispatch both 'change' and 'domchange' events for broader compatibility
                        select.dispatchEvent(new Event('change'));
                        select.dispatchEvent(new Event('domchange', { bubbles: true })); // Custom event for some internal GT logic
                        console.log(`Language changed to ${lang} via direct select.`);
                        clearInterval(translationInterval);
                    } else if (attempts < maxAttempts) {
                        attempts++;
                        console.log(`Attempt ${attempts} to find Google Translate combo box...`);
                    } else {
                        console.error("Failed to find Google Translate combo box after multiple attempts.");
                        clearInterval(translationInterval);
                    }
                };

                // Use setInterval to repeatedly try finding the element until it's found or max attempts reached
                const translationInterval = setInterval(findAndTranslate, intervalTime);
            }
        });


        document.getElementById('play-alerts-button')?.addEventListener('click', async () => {
            const careTipsDiv = document.getElementById('care-tips');
            const audioStatusDiv = document.getElementById('audio-status');

            if (!careTipsDiv || !audioStatusDiv) {
                console.error("Care tips or audio status div not found.");
                return;
            }

            const tips = Array.from(careTipsDiv.querySelectorAll('p')).map(p => p.textContent);

            const noAlertsText = 'No alerts to play.';
            const loadingRecText = 'Loading recommendations...';
            const noSpecificRecText = 'No specific care recommendations available.';

            if (tips.length === 0 || tips[0].includes(noSpecificRecText) || tips[0].includes(loadingRecText)) {
                audioStatusDiv.textContent = noAlertsText;
                return;
            }

            audioStatusDiv.textContent = 'Playing alerts...';
            const topAlerts = tips.slice(0, 2);

            for (let i = 0; i < topAlerts.length; i++) {
                let tip = topAlerts[i];
                const cleanTip = tip.replace(/\*\*/g, '').replace(/[🌱🌡️💨🧪☀️🌧️✅⚠️❌ℹ️]/g, '').trim();
                if (cleanTip) {
                    try {
                        const response = await fetch(`${API_BASE_URL}/api/voice_alert`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ text: cleanTip, lang: currentLanguage })
                        });

                        if (!response.ok) {
                            const errorText = await response.text();
                            throw new Error(`Server error: ${response.status} ${response.statusText} - ${errorText}`);
                        }

                        const audioBlob = await response.blob();
                        const audio = new Audio(URL.createObjectURL(audioBlob));
                        audio.play().catch(e => console.error("Error playing audio:", e));

                        audioStatusDiv.textContent = `🔊 Playing alert ${i + 1}: "${cleanTip}"`;
                        await new Promise(resolve => setTimeout(resolve, cleanTip.length * 50 + 1000));
                    } catch (error) {
                        console.error("Error playing voice alert:", error);
                        audioStatusDiv.textContent = `Error playing alert ${i + 1}: ${error.message}`;
                        break;
                    }
                }
            }
            audioStatusDiv.textContent = 'Alerts finished.';
        });

        // Function to set the simulation mode via API
        async function setSimulationMode(isSimulation) {
            const mode = isSimulation ? 'simulation' : 'real-time';
            try {
                const response = await fetch(`${API_BASE_URL}/api/set_mode`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ mode: mode })
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                if (data.status === 'success') {
                    console.log(`Backend mode set to: ${data.mode}`);
                    fetchDataAndRender();
                } else {
                    console.error("Failed to set backend mode:", data.message);
                }
            } catch (error) {
                console.error("Error setting simulation mode:", error);
            }
        }

        // Function to get the current simulation mode from API and update toggle
        async function getAndSetInitialMode() {
            try {
                const response = await fetch(`${API_BASE_URL}/api/get_mode`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                const toggle = document.getElementById('simulation-mode-toggle');
                if (toggle) {
                    if (data.mode === 'simulation') {
                        toggle.checked = true;
                    } else {
                        toggle.checked = false;
                    }
                }
                console.log(`Initial backend mode: ${data.mode}`);
            } catch (error) {
                console.error("Error fetching initial simulation mode:", error);
            }
        }

        // Initial data load when the page is ready
        document.addEventListener('DOMContentLoaded', async () => {
            // Attempt to get user location first
            try {
                const coords = await getUserLocation();
                userLatitude = coords.lat;
                userLongitude = coords.lon;
                console.log("User location obtained:", userLatitude, userLongitude);
            } catch (error) {
                console.warn(error.message);
                // userLatitude and userLongitude remain null, so renderWeatherData will use default city
            }

            getAndSetInitialMode();
            fetchDataAndRender(); // Fetch initial data
            setInterval(fetchDataAndRender, 30000); // Refresh data every 30 seconds

            document.getElementById('simulation-mode-toggle')?.addEventListener('change', (event) => {
                setSimulationMode(event.target.checked);
            });

            // Start camera feed when the page loads
            startCameraFeed();
        });

        // Ensure camera feed is stopped when navigating away
        window.addEventListener('beforeunload', stopCameraFeed);
    </script>
</body>
</html>

-----------------------------------------------------------------------------------------------------------------------------

 Keep-alive: Thu Jul 31 2025 13:18:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:18:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:19:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:19:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:19:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:20:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:20:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:20:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:21:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:21:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:21:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:22:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:22:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:22:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:23:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:23:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:23:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:24:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:24:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:24:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:25:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:25:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:25:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:26:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:26:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:26:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:27:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:27:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:27:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:28:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:28:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:28:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:29:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:29:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:29:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:30:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:30:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:30:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:31:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:31:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:31:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:32:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:32:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:32:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:33:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:33:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:33:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:34:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:34:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:34:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:35:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:35:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:35:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:36:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:36:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:36:58 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:37:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:37:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:37:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:38:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:38:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:38:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:39:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:39:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:39:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:40:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:40:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:40:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:41:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:41:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:41:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:42:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:42:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:42:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:43:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:43:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:43:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:44:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:44:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:44:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:45:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:45:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:45:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:46:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:46:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:46:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:47:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:47:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:47:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:48:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:48:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:48:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:49:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:49:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:49:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:50:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:50:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:50:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:51:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:51:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:51:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:52:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:52:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:52:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:53:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:53:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:53:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:54:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:54:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:54:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:55:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:55:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:55:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:56:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:56:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:56:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:57:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:57:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:57:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:58:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:58:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:58:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:59:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:59:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 13:59:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:00:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:00:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:00:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:01:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:01:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:01:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:02:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:02:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:02:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:03:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:03:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:03:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:04:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:04:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:04:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:05:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:05:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:05:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:06:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:06:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:06:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:07:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:07:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:07:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:08:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:08:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:08:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:09:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:09:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:09:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:10:16 GMT+0530 (India Standard Time)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278097.undefined
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278097.44
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278097.43
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278097.45
 Keep-alive: Thu Jul 31 2025 14:10:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:10:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:11:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:11:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:11:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:12:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:12:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:12:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:13:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:13:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:13:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:14:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:14:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:14:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:15:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:15:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:15:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:16:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:16:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:16:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:17:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:17:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:17:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:18:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:18:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:18:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:19:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:19:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:19:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:20:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:20:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:20:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:21:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:21:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:21:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:22:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:22:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:22:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:23:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:23:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:23:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:24:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:24:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:24:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:25:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:25:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:25:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:26:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:26:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:26:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:27:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:27:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:27:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:28:16 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278184.undefined]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278184.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 Keep-alive: Thu Jul 31 2025 14:28:38 GMT+0530 (India Standard Time)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278184.undefined
 Keep-alive: Thu Jul 31 2025 14:28:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:29:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:29:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:29:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:30:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:30:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:30:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:31:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:31:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:31:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:32:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:32:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:32:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:33:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:33:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:33:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:34:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:34:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:34:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:35:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:35:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:35:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:36:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:36:36 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 Keep-alive: Thu Jul 31 2025 14:36:56 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 Keep-alive: Thu Jul 31 2025 14:37:17 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:37:36 GMT+0530 (India Standard Time)
 [bg:dnr]: Using ruleID#1 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Using ruleID#2 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 Keep-alive: Thu Jul 31 2025 14:37:56 GMT+0530 (India Standard Time)
 [bg:dnr]: Using ruleID#3 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:dnr]: Using ruleID#4 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:dnr]: Using ruleID#5 for dynamic-rule
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Using ruleID#6 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 Keep-alive: Thu Jul 31 2025 14:38:16 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278191.undefined]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278191.undefined
 Keep-alive: Thu Jul 31 2025 14:38:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:38:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:39:16 GMT+0530 (India Standard Time)
 [bg:dnr]: Using ruleID#7 for dynamic-rule
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Using ruleID#8 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:dnr]: Using ruleID#9 for dynamic-rule
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 Keep-alive: Thu Jul 31 2025 14:39:36 GMT+0530 (India Standard Time)
 [bg:dnr]: Using ruleID#10 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:dnr]: Using ruleID#11 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Using ruleID#12 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:dnr]: Using ruleID#13 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:dnr]: Using ruleID#14 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 Keep-alive: Thu Jul 31 2025 14:39:56 GMT+0530 (India Standard Time)
 [bg:dnr]: Using ruleID#15 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 Keep-alive: Thu Jul 31 2025 14:40:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:40:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:40:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:41:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:41:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:41:56 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 Keep-alive: Thu Jul 31 2025 14:42:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:42:36 GMT+0530 (India Standard Time)
 [bg:dnr]: Using ruleID#16 for dynamic-rule
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Using ruleID#17 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 Keep-alive: Thu Jul 31 2025 14:42:56 GMT+0530 (India Standard Time)
 [bg:dnr]: Using ruleID#18 for dynamic-rule
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 Keep-alive: Thu Jul 31 2025 14:43:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:43:36 GMT+0530 (India Standard Time)
 [bg:dnr]: Using ruleID#19 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:dnr]: Using ruleID#20 for dynamic-rule
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Using ruleID#21 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Using ruleID#22 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 Keep-alive: Thu Jul 31 2025 14:43:56 GMT+0530 (India Standard Time)
 [bg:dnr]: Using ruleID#23 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:dnr]: Using ruleID#24 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 Keep-alive: Thu Jul 31 2025 14:44:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:44:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:44:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:45:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:45:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:45:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:46:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:46:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:46:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:47:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:47:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:47:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:48:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:48:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:48:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:49:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:49:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:49:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:50:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:50:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:50:56 GMT+0530 (India Standard Time)
 [bg:dnr]: Using ruleID#25 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Using ruleID#26 for dynamic-rule
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:dnr]: Using ruleID#27 for dynamic-rule
 [bg:dnr]: Added dynamic rules for tabId=1147278097
 [bg:index]: [remote@1147278097.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 Keep-alive: Thu Jul 31 2025 14:51:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:51:36 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278199.undefined]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278199.67]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278199.68]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278199.undefined
 [bg:index]: [remote@1147278199.66]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278199.69]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278199.67
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278199.68
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278199.66
 [bg:index]: [remote@1147278199.72]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278199.72
 [bg:index]: [remote@1147278199.73]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278199.73
 Keep-alive: Thu Jul 31 2025 14:51:56 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278199.74]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278199.74
 Keep-alive: Thu Jul 31 2025 14:52:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:52:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:52:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:53:16 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278199.75]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278199.75
 [bg:index]: [remote@1147278199.76]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278199.76
 Keep-alive: Thu Jul 31 2025 14:53:36 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278202.undefined]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278202.undefined
 [bg:index]: [remote@1147278202.79]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278202.78]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278202.79
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278202.78
 [bg:index]: [remote@1147278202.80]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278202.83]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278202.83
 [bg:index]: [remote@1147278202.84]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278202.84
 [bg:index]: [remote@1147278202.85]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278202.85
 Keep-alive: Thu Jul 31 2025 14:53:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:54:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:54:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:54:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:55:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:55:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:55:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:56:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:56:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:56:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:57:16 GMT+0530 (India Standard Time)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278213.undefined
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278213.88
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278213.87
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278213.89
 Keep-alive: Thu Jul 31 2025 14:57:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:57:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:58:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:58:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:58:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:59:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:59:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 14:59:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:00:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:00:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:00:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:01:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:01:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:01:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:02:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:02:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:02:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:03:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:03:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:03:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:04:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:04:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:04:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:05:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:05:37 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:05:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:06:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:06:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:06:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:07:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:07:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:07:57 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:08:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:08:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:08:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:09:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:09:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:09:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:10:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:10:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:10:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:11:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:11:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:11:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:12:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:12:36 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278180.98]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278180.98
 Keep-alive: Thu Jul 31 2025 15:12:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:13:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:13:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:13:56 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278223.undefined]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278223.undefined
 Keep-alive: Thu Jul 31 2025 15:14:16 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278228.undefined]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278228.undefined
 [bg:index]: [remote@1147278228.undefined]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278228.undefined
 Keep-alive: Thu Jul 31 2025 15:14:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:14:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:15:16 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278223.undefined]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278223.undefined
 Keep-alive: Thu Jul 31 2025 15:15:36 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278223.undefined]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278223.undefined
 Keep-alive: Thu Jul 31 2025 15:15:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:16:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:16:36 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278223.undefined]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278223.undefined
 Keep-alive: Thu Jul 31 2025 15:16:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:17:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:17:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:17:59 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:18:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:18:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:18:57 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:19:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:19:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:19:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:20:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:20:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:20:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:21:17 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:21:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:21:57 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:22:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:22:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:22:58 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:23:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:23:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:23:57 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:24:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:24:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:24:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:25:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:25:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:25:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:26:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:26:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:26:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:27:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:27:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:27:56 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278180.120]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278180.120
 Keep-alive: Thu Jul 31 2025 15:28:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:28:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:28:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:29:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:29:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:29:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:30:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:30:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:30:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:31:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:31:36 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278223.undefined]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278223.undefined
 Keep-alive: Thu Jul 31 2025 15:31:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:32:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:32:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:32:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:33:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:33:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:33:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:34:17 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:34:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:34:59 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:35:16 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278270.undefined]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278270.undefined
 [bg:index]: [remote@1147278270.133]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278270.133
 [bg:index]: [remote@1147278270.134]-[page:captions]:  Array(1)
 Keep-alive: Thu Jul 31 2025 15:35:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:35:57 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:36:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:36:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:36:57 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:37:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:37:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:37:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:38:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:38:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:38:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:39:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:39:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:39:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:40:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:40:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:40:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:41:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:41:37 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:41:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:42:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:42:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:42:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:43:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:43:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:43:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:44:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:44:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:44:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:45:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:45:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:45:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:46:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:46:36 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278180.135]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278180.135
 [bg:index]: [remote@1147278180.undefined]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278180.undefined]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278180.undefined
 [bg:index]: [remote@1147278180.137]-[page:captions]:  Array(1)
 Keep-alive: Thu Jul 31 2025 15:46:56 GMT+0530 (India Standard Time)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278180.137
 [bg:index]: [remote@1147278180.139]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278180.139
 [bg:index]: [remote@1147278180.140]-[page:captions]:  Array(1)
 Keep-alive: Thu Jul 31 2025 15:47:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:47:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:47:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:48:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:48:40 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:49:00 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:49:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:49:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:49:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:50:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:50:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:50:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:51:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:51:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:51:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:52:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:52:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:52:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:53:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:53:36 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278180.141]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278180.141
 Keep-alive: Thu Jul 31 2025 15:53:56 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278223.undefined]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278223.undefined
 Keep-alive: Thu Jul 31 2025 15:54:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:54:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:54:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:55:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:55:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:55:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:56:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:56:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:56:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:57:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:57:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:57:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:58:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:58:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:58:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:59:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:59:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 15:59:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:00:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:00:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:00:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:01:18 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:01:37 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:01:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:02:17 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:02:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:02:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:03:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:03:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:03:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:04:17 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:04:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:04:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:05:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:05:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:05:57 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:06:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:06:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:06:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:07:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:07:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:07:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:08:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:08:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:08:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:09:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:09:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:09:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:10:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:10:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:10:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:11:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:11:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:11:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:12:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:12:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:12:57 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:13:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:13:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:13:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:14:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:14:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:14:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:15:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:15:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:15:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:16:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:16:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:16:56 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278180.150]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278180.150
 Keep-alive: Thu Jul 31 2025 16:17:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:17:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:17:56 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278223.undefined]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278223.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278223.undefined
 Keep-alive: Thu Jul 31 2025 16:18:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:18:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:18:56 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278223.undefined]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278223.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278223.undefined
 Keep-alive: Thu Jul 31 2025 16:19:17 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:19:55 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:19:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:20:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:20:37 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:20:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:21:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:21:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:21:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:22:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:22:37 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:22:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:23:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:23:37 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:23:57 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:24:17 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:24:37 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:24:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:25:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:25:37 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:25:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:26:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:26:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:26:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:27:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:27:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:27:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:28:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:28:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:28:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:29:17 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:29:39 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:29:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:30:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:30:46 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:30:57 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:31:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:31:37 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:31:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:32:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:32:43 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:32:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:33:16 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278320.undefined]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.undefined
 [bg:index]: [remote@1147278320.165]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278320.167]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278320.168]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278320.171]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278320.173]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278320.174]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.167
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.168
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.171
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.174
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.165
 Keep-alive: Thu Jul 31 2025 16:33:36 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278320.undefined]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.undefined
 [bg:index]: [remote@1147278320.175]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278320.178]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278320.177]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.175
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.178
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.177
 [bg:index]: [remote@1147278320.undefined]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278320.181]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278320.182]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278320.185]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278320.187]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278320.188]-[page:captions]:  Array(1)
 Keep-alive: Thu Jul 31 2025 16:34:02 GMT+0530 (India Standard Time)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.undefined
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.181
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.182
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.185
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.188
 [bg:index]: [remote@1147278320.190]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.190
 Keep-alive: Thu Jul 31 2025 16:34:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:34:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:34:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:35:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:35:37 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:36:01 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:36:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:36:36 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278320.undefined]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.undefined
 [bg:index]: [remote@1147278320.192]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278320.195]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278320.194]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278325.undefined]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278325.199]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278325.198]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278325.202]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278325.204]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278325.205]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278325.206]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278320.208]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.192
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.195
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.194
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278325.undefined
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278325.199
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278325.198
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278325.202
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278325.205
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.208
 [bg:index]: [remote@1147278320.207]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278325.206
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278320.207
 Keep-alive: Thu Jul 31 2025 16:36:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:37:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:37:37 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:37:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:38:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:38:38 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:38:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:39:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:39:38 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:39:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:40:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:40:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:40:56 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278330.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:index]: [remote@1147278330.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:index]: [remote@1147278180.213]-[page:captions]:  Array(1)
 Keep-alive: Thu Jul 31 2025 16:41:20 GMT+0530 (India Standard Time)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278330.undefined
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278180.213
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278330.216
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278330.215
 Keep-alive: Thu Jul 31 2025 16:41:42 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:42:00 GMT+0530 (India Standard Time)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278330.218
 Keep-alive: Thu Jul 31 2025 16:42:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:42:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:42:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:43:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:43:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:43:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:44:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:44:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:44:56 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278223.undefined]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278223.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278223.undefined
 Keep-alive: Thu Jul 31 2025 16:45:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:45:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:45:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:46:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:46:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:46:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:47:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:47:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:47:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:48:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:48:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:48:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:49:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:49:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:49:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:50:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:50:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:50:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:51:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:51:40 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:51:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:52:16 GMT+0530 (India Standard Time)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278346.undefined
 [bg:index]: [remote@1147278346.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:index]: [remote@1147278346.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:index]: [remote@1147278346.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:index]: [remote@1147278346.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278346.230
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278346.230
 Keep-alive: Thu Jul 31 2025 16:52:36 GMT+0530 (India Standard Time)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278346.231
 Keep-alive: Thu Jul 31 2025 16:52:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:53:16 GMT+0530 (India Standard Time)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278346.232
 Keep-alive: Thu Jul 31 2025 16:53:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:53:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:54:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:54:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:54:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:55:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:55:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:55:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:56:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:56:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:56:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:57:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:57:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:57:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:58:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:58:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:58:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:59:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:59:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 16:59:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:00:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:00:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:00:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:01:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:01:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:01:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:02:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:02:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:02:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:03:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:03:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:03:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:04:16 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278180.233]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278180.233
 Keep-alive: Thu Jul 31 2025 17:04:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:04:56 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278223.undefined]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278223.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278223.undefined
 Keep-alive: Thu Jul 31 2025 17:05:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:05:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:05:57 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:06:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:06:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:06:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:07:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:07:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:07:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:08:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:08:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:08:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:09:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:09:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:09:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:10:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:10:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:10:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:11:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:11:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:11:56 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278223.undefined]-[page:captions]:  Array(1)
 [bg:index]: [remote@1147278223.undefined]-[cs:media-finder:mediaElement]:  Array(2)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278223.undefined
 Keep-alive: Thu Jul 31 2025 17:12:24 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:12:43 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:12:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:13:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:13:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:13:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:14:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:14:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:14:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:15:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:15:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:15:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:16:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:16:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:16:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:17:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:17:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:17:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:18:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:18:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:18:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:19:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:19:36 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:19:56 GMT+0530 (India Standard Time)
 [bg:index]: [remote@1147278180.246]-[page:captions]:  Array(1)
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278180.246
 Keep-alive: Thu Jul 31 2025 17:20:16 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:20:36 GMT+0530 (India Standard Time)
early-page.js:6583 [cs:early-page]: Running on page: http://localhost:8080/ top=true
early-page.js:6583 [cs:early-page]: Assigned globalThis.twoseven
 [bg:index]: [remote@1147278223.undefined]-[page:captions]:  Array(1)
hook.js:608 cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation
overrideMethod @ hook.js:608
 [bg:index]: [remote@1147278223.undefined]-[cs:media-finder:mediaElement]:  Array(2)
(index):1216 Google Translate element initialized.
 [bg:index]: Injected 'dist/contentScripts/page.js into page@1147278223.undefined
(index):2579 User location obtained: 22.6385 88.4281
 
logError @ index-CUHM8_N7.js:1639
(index):2566 Initial backend mode: simulation
(index):1630 Fetching weather for coordinates: 22.6385 88.4281
 Keep-alive: Thu Jul 31 2025 17:20:56 GMT+0530 (India Standard Time)
(index):2458 Attempt 1 to find Google Translate combo box...
(index):2458 Attempt 2 to find Google Translate combo box...
(index):2458 Attempt 3 to find Google Translate combo box...
(index):2458 Attempt 4 to find Google Translate combo box...
(index):2458 Attempt 5 to find Google Translate combo box...
(index):2458 Attempt 6 to find Google Translate combo box...
(index):2458 Attempt 7 to find Google Translate combo box...
(index):2458 Attempt 8 to find Google Translate combo box...
(index):2458 Attempt 9 to find Google Translate combo box...
(index):2458 Attempt 10 to find Google Translate combo box...
hook.js:608 Failed to find Google Translate combo box after multiple attempts.
overrideMethod @ hook.js:608
(index):1630 Fetching weather for coordinates: 22.6385 88.4281
 Keep-alive: Thu Jul 31 2025 17:21:28 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:21:36 GMT+0530 (India Standard Time)
localhost/:1 Unchecked runtime.lastError: Could not establish connection. Receiving end does not exist.
(index):1630 Fetching weather for coordinates: 22.6385 88.4281
 Keep-alive: Thu Jul 31 2025 17:21:56 GMT+0530 (India Standard Time)
 Keep-alive: Thu Jul 31 2025 17:22:16 GMT+0530 (India Standard Time)
(index):1630 Fetching weather for coordinates: 22.6385 88.4281
